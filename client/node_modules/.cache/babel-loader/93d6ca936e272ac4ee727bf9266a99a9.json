{"ast":null,"code":"import * as React from 'react';\nimport { getGridCellElement, getGridColumnHeaderElement, getGridRowElement } from '../../../utils/domUtils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nlet warnedOnceMissingColumn = false;\n\nfunction warnMissingColumn(field) {\n  console.warn([`MUI: You are calling getValue('${field}') but the column \\`${field}\\` is not defined.`, `Instead, you can access the data from \\`params.row.${field}\\`.`].join('\\n'));\n  warnedOnceMissingColumn = true;\n}\n/**\n * @requires useGridColumns (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridEditing (method)\n * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi\n * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi\n */\n\n\nexport function useGridParamsApi(apiRef) {\n  const getColumnHeaderParams = React.useCallback(field => ({\n    field,\n    colDef: apiRef.current.getColumn(field)\n  }), [apiRef]);\n  const getRowParams = React.useCallback(id => {\n    const row = apiRef.current.getRow(id);\n\n    if (!row) {\n      throw new Error(`No row with id #${id} found`);\n    }\n\n    const params = {\n      id,\n      columns: apiRef.current.getAllColumns(),\n      row\n    };\n    return params;\n  }, [apiRef]);\n  const getBaseCellParams = React.useCallback((id, field) => {\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n\n    if (!row || !rowNode) {\n      throw new Error(`No row with id #${id} found`);\n    }\n\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      value: row[field],\n      colDef: apiRef.current.getColumn(field),\n      cellMode: apiRef.current.getCellMode(id, field),\n      api: apiRef.current,\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1\n    };\n    return params;\n  }, [apiRef]);\n  const getCellParams = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    const value = apiRef.current.getCellValue(id, field);\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n\n    if (!row || !rowNode) {\n      throw new Error(`No row with id #${id} found`);\n    }\n\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      colDef,\n      cellMode: apiRef.current.getCellMode(id, field),\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,\n      value,\n      formattedValue: value\n    };\n\n    if (colDef && colDef.valueFormatter) {\n      params.formattedValue = colDef.valueFormatter({\n        id,\n        field: params.field,\n        value: params.value,\n        api: apiRef.current\n      });\n    }\n\n    params.isEditable = colDef && apiRef.current.isCellEditable(params);\n    return params;\n  }, [apiRef]);\n  const getCellValue = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!colDef && !warnedOnceMissingColumn) {\n        warnMissingColumn(field);\n      }\n    }\n\n    if (!colDef || !colDef.valueGetter) {\n      const rowModel = apiRef.current.getRow(id);\n\n      if (!rowModel) {\n        throw new Error(`No row with id #${id} found`);\n      }\n\n      return rowModel[field];\n    }\n\n    return colDef.valueGetter(getBaseCellParams(id, field));\n  }, [apiRef, getBaseCellParams]);\n  const getColumnHeaderElement = React.useCallback(field => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n\n    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);\n  }, [apiRef]);\n  const getRowElement = React.useCallback(id => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n\n    return getGridRowElement(apiRef.current.rootElementRef.current, id);\n  }, [apiRef]);\n  const getCellElement = React.useCallback((id, field) => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n\n    return getGridCellElement(apiRef.current.rootElementRef.current, {\n      id,\n      field\n    });\n  }, [apiRef]);\n  const paramsApi = {\n    getCellValue,\n    getCellParams,\n    getCellElement,\n    getRowParams,\n    getRowElement,\n    getColumnHeaderParams,\n    getColumnHeaderElement\n  };\n  useGridApiMethod(apiRef, paramsApi, 'public');\n}","map":{"version":3,"names":["React","getGridCellElement","getGridColumnHeaderElement","getGridRowElement","useGridApiMethod","gridFocusCellSelector","gridTabIndexCellSelector","warnedOnceMissingColumn","warnMissingColumn","field","console","warn","join","useGridParamsApi","apiRef","getColumnHeaderParams","useCallback","colDef","current","getColumn","getRowParams","id","row","getRow","Error","params","columns","getAllColumns","getBaseCellParams","rowNode","getRowNode","cellFocus","cellTabIndex","value","cellMode","getCellMode","api","hasFocus","tabIndex","getCellParams","getCellValue","formattedValue","valueFormatter","isEditable","isCellEditable","process","env","NODE_ENV","valueGetter","rowModel","getColumnHeaderElement","rootElementRef","getRowElement","getCellElement","paramsApi"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/rows/useGridParamsApi.js"],"sourcesContent":["import * as React from 'react';\nimport { getGridCellElement, getGridColumnHeaderElement, getGridRowElement } from '../../../utils/domUtils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nlet warnedOnceMissingColumn = false;\nfunction warnMissingColumn(field) {\n  console.warn([`MUI: You are calling getValue('${field}') but the column \\`${field}\\` is not defined.`, `Instead, you can access the data from \\`params.row.${field}\\`.`].join('\\n'));\n  warnedOnceMissingColumn = true;\n}\n\n/**\n * @requires useGridColumns (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridEditing (method)\n * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi\n * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi\n */\nexport function useGridParamsApi(apiRef) {\n  const getColumnHeaderParams = React.useCallback(field => ({\n    field,\n    colDef: apiRef.current.getColumn(field)\n  }), [apiRef]);\n  const getRowParams = React.useCallback(id => {\n    const row = apiRef.current.getRow(id);\n    if (!row) {\n      throw new Error(`No row with id #${id} found`);\n    }\n    const params = {\n      id,\n      columns: apiRef.current.getAllColumns(),\n      row\n    };\n    return params;\n  }, [apiRef]);\n  const getBaseCellParams = React.useCallback((id, field) => {\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n    if (!row || !rowNode) {\n      throw new Error(`No row with id #${id} found`);\n    }\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      value: row[field],\n      colDef: apiRef.current.getColumn(field),\n      cellMode: apiRef.current.getCellMode(id, field),\n      api: apiRef.current,\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1\n    };\n    return params;\n  }, [apiRef]);\n  const getCellParams = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    const value = apiRef.current.getCellValue(id, field);\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n    if (!row || !rowNode) {\n      throw new Error(`No row with id #${id} found`);\n    }\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      colDef,\n      cellMode: apiRef.current.getCellMode(id, field),\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,\n      value,\n      formattedValue: value\n    };\n    if (colDef && colDef.valueFormatter) {\n      params.formattedValue = colDef.valueFormatter({\n        id,\n        field: params.field,\n        value: params.value,\n        api: apiRef.current\n      });\n    }\n    params.isEditable = colDef && apiRef.current.isCellEditable(params);\n    return params;\n  }, [apiRef]);\n  const getCellValue = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    if (process.env.NODE_ENV !== 'production') {\n      if (!colDef && !warnedOnceMissingColumn) {\n        warnMissingColumn(field);\n      }\n    }\n    if (!colDef || !colDef.valueGetter) {\n      const rowModel = apiRef.current.getRow(id);\n      if (!rowModel) {\n        throw new Error(`No row with id #${id} found`);\n      }\n      return rowModel[field];\n    }\n    return colDef.valueGetter(getBaseCellParams(id, field));\n  }, [apiRef, getBaseCellParams]);\n  const getColumnHeaderElement = React.useCallback(field => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);\n  }, [apiRef]);\n  const getRowElement = React.useCallback(id => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridRowElement(apiRef.current.rootElementRef.current, id);\n  }, [apiRef]);\n  const getCellElement = React.useCallback((id, field) => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridCellElement(apiRef.current.rootElementRef.current, {\n      id,\n      field\n    });\n  }, [apiRef]);\n  const paramsApi = {\n    getCellValue,\n    getCellParams,\n    getCellElement,\n    getRowParams,\n    getRowElement,\n    getColumnHeaderParams,\n    getColumnHeaderElement\n  };\n  useGridApiMethod(apiRef, paramsApi, 'public');\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}