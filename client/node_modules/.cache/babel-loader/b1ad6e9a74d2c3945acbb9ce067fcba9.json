{"ast":null,"code":"import * as React from 'react';\nimport { unstable_debounce as debounce, unstable_ownerDocument as ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnsTotalWidthSelector } from '../columns';\nimport { gridDensityFactorSelector } from '../density';\nimport { useGridSelector } from '../../utils';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { calculatePinnedRowsHeight } from '../rows/gridRowsUtils';\nimport { getTotalHeaderHeight } from '../columns/gridColumnsUtils';\nconst isTestEnvironment = process.env.NODE_ENV === 'test';\n\nconst hasScroll = _ref => {\n  let {\n    content,\n    container,\n    scrollBarSize\n  } = _ref;\n  const hasScrollXIfNoYScrollBar = content.width > container.width;\n  const hasScrollYIfNoXScrollBar = content.height > container.height;\n  let hasScrollX = false;\n  let hasScrollY = false;\n\n  if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n    hasScrollX = hasScrollXIfNoYScrollBar;\n    hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height; // We recalculate the scroll x to consider the size of the y scrollbar.\n\n    if (hasScrollY) {\n      hasScrollX = content.width + scrollBarSize > container.width;\n    }\n  }\n\n  return {\n    hasScrollX,\n    hasScrollY\n  };\n};\n\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(null);\n  const fullDimensionsRef = React.useRef(null);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const rowHeight = Math.floor(props.rowHeight * densityFactor);\n  const totalHeaderHeight = getTotalHeaderHeight(apiRef, props.columnHeaderHeight);\n  const updateGridDimensionsRef = React.useCallback(() => {\n    var _apiRef$current$rootE;\n\n    const rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n\n    if (!rootDimensionsRef.current) {\n      return;\n    }\n\n    let scrollBarSize;\n\n    if (props.scrollbarSize != null) {\n      scrollBarSize = props.scrollbarSize;\n    } else if (!columnsTotalWidth || !rootElement) {\n      scrollBarSize = 0;\n    } else {\n      const doc = ownerDocument(rootElement);\n      const scrollDiv = doc.createElement('div');\n      scrollDiv.style.width = '99px';\n      scrollDiv.style.height = '99px';\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.overflow = 'scroll';\n      scrollDiv.className = 'scrollDiv';\n      rootElement.appendChild(scrollDiv);\n      scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      rootElement.removeChild(scrollDiv);\n    }\n\n    let viewportOuterSize;\n    let hasScrollX;\n    let hasScrollY;\n\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > rootDimensionsRef.current.width;\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rowsMeta.currentPageTotalHeight + (hasScrollX ? scrollBarSize : 0)\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height - totalHeaderHeight\n      };\n      const scrollInformation = hasScroll({\n        content: {\n          width: Math.round(columnsTotalWidth),\n          height: rowsMeta.currentPageTotalHeight\n        },\n        container: {\n          width: viewportOuterSize.width,\n          height: viewportOuterSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom\n        },\n        scrollBarSize\n      });\n      hasScrollY = scrollInformation.hasScrollY;\n      hasScrollX = scrollInformation.hasScrollX;\n    }\n\n    const viewportInnerSize = {\n      width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),\n      height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)\n    };\n    const newFullDimensions = {\n      viewportOuterSize,\n      viewportInnerSize,\n      hasScrollX,\n      hasScrollY,\n      scrollBarSize\n    };\n    const prevDimensions = fullDimensionsRef.current;\n    fullDimensionsRef.current = newFullDimensions;\n\n    if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newFullDimensions.viewportInnerSize);\n    }\n  }, [apiRef, props.scrollbarSize, props.autoHeight, rowsMeta.currentPageTotalHeight, totalHeaderHeight]);\n  const resize = React.useCallback(() => {\n    updateGridDimensionsRef();\n    apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n  }, [apiRef, updateGridDimensionsRef]);\n  const getRootDimensions = React.useCallback(() => fullDimensionsRef.current, []);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return 0;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    }); // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n\n    if (props.getRowHeight) {\n      const renderContext = apiRef.current.getRenderContext();\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight, rowHeight]);\n  const dimensionsApi = {\n    resize,\n    getRootDimensions\n  };\n  const dimensionsPrivateApi = {\n    getViewportPageSize,\n    updateGridDimensionsRef\n  };\n  useGridApiMethod(apiRef, dimensionsApi, 'public');\n  useGridApiMethod(apiRef, dimensionsPrivateApi, 'private');\n  const debounceResize = React.useMemo(() => debounce(resize, 60), [resize]);\n  const isFirstSizing = React.useRef(true);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size; // jsdom has no layout capabilities\n\n    const isJSDOM = /jsdom/.test(window.navigator.userAgent);\n\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n\n    if (isTestEnvironment) {\n      // We don't need to debounce the resize for tests.\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n\n    debounceResize();\n  }, [props.autoHeight, debounceResize, logger, resize]);\n  useEnhancedEffect(() => updateGridDimensionsRef(), [updateGridDimensionsRef]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'paginationModelChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateGridDimensionsRef);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}","map":{"version":3,"names":["React","unstable_debounce","debounce","unstable_ownerDocument","ownerDocument","unstable_useEnhancedEffect","useEnhancedEffect","useGridApiEventHandler","useGridApiOptionHandler","useGridApiMethod","useGridLogger","gridColumnsTotalWidthSelector","gridDensityFactorSelector","useGridSelector","getVisibleRows","gridRowsMetaSelector","calculatePinnedRowsHeight","getTotalHeaderHeight","isTestEnvironment","process","env","NODE_ENV","hasScroll","content","container","scrollBarSize","hasScrollXIfNoYScrollBar","width","hasScrollYIfNoXScrollBar","height","hasScrollX","hasScrollY","useGridDimensions","apiRef","props","logger","errorShown","useRef","rootDimensionsRef","fullDimensionsRef","rowsMeta","densityFactor","rowHeight","Math","floor","totalHeaderHeight","columnHeaderHeight","updateGridDimensionsRef","useCallback","_apiRef$current$rootE","rootElement","current","rootElementRef","columnsTotalWidth","pinnedRowsHeight","scrollbarSize","doc","scrollDiv","createElement","style","position","overflow","className","appendChild","offsetWidth","clientWidth","removeChild","viewportOuterSize","autoHeight","round","currentPageTotalHeight","scrollInformation","top","bottom","viewportInnerSize","newFullDimensions","prevDimensions","publishEvent","resize","getRootDimensions","getViewportPageSize","dimensions","currentPage","pagination","paginationMode","getRowHeight","renderContext","getRenderContext","viewportPageSize","lastRowIndex","firstRowIndex","min","rows","length","maximumPageSizeWithoutScrollBar","dimensionsApi","dimensionsPrivateApi","debounceResize","useMemo","isFirstSizing","handleResize","size","isJSDOM","test","window","navigator","userAgent","error","join","onResize"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.js"],"sourcesContent":["import * as React from 'react';\nimport { unstable_debounce as debounce, unstable_ownerDocument as ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnsTotalWidthSelector } from '../columns';\nimport { gridDensityFactorSelector } from '../density';\nimport { useGridSelector } from '../../utils';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { calculatePinnedRowsHeight } from '../rows/gridRowsUtils';\nimport { getTotalHeaderHeight } from '../columns/gridColumnsUtils';\nconst isTestEnvironment = process.env.NODE_ENV === 'test';\nconst hasScroll = ({\n  content,\n  container,\n  scrollBarSize\n}) => {\n  const hasScrollXIfNoYScrollBar = content.width > container.width;\n  const hasScrollYIfNoXScrollBar = content.height > container.height;\n  let hasScrollX = false;\n  let hasScrollY = false;\n  if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n    hasScrollX = hasScrollXIfNoYScrollBar;\n    hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height;\n\n    // We recalculate the scroll x to consider the size of the y scrollbar.\n    if (hasScrollY) {\n      hasScrollX = content.width + scrollBarSize > container.width;\n    }\n  }\n  return {\n    hasScrollX,\n    hasScrollY\n  };\n};\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(null);\n  const fullDimensionsRef = React.useRef(null);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const rowHeight = Math.floor(props.rowHeight * densityFactor);\n  const totalHeaderHeight = getTotalHeaderHeight(apiRef, props.columnHeaderHeight);\n  const updateGridDimensionsRef = React.useCallback(() => {\n    var _apiRef$current$rootE;\n    const rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n    if (!rootDimensionsRef.current) {\n      return;\n    }\n    let scrollBarSize;\n    if (props.scrollbarSize != null) {\n      scrollBarSize = props.scrollbarSize;\n    } else if (!columnsTotalWidth || !rootElement) {\n      scrollBarSize = 0;\n    } else {\n      const doc = ownerDocument(rootElement);\n      const scrollDiv = doc.createElement('div');\n      scrollDiv.style.width = '99px';\n      scrollDiv.style.height = '99px';\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.overflow = 'scroll';\n      scrollDiv.className = 'scrollDiv';\n      rootElement.appendChild(scrollDiv);\n      scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      rootElement.removeChild(scrollDiv);\n    }\n    let viewportOuterSize;\n    let hasScrollX;\n    let hasScrollY;\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > rootDimensionsRef.current.width;\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rowsMeta.currentPageTotalHeight + (hasScrollX ? scrollBarSize : 0)\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height - totalHeaderHeight\n      };\n      const scrollInformation = hasScroll({\n        content: {\n          width: Math.round(columnsTotalWidth),\n          height: rowsMeta.currentPageTotalHeight\n        },\n        container: {\n          width: viewportOuterSize.width,\n          height: viewportOuterSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom\n        },\n        scrollBarSize\n      });\n      hasScrollY = scrollInformation.hasScrollY;\n      hasScrollX = scrollInformation.hasScrollX;\n    }\n    const viewportInnerSize = {\n      width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),\n      height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)\n    };\n    const newFullDimensions = {\n      viewportOuterSize,\n      viewportInnerSize,\n      hasScrollX,\n      hasScrollY,\n      scrollBarSize\n    };\n    const prevDimensions = fullDimensionsRef.current;\n    fullDimensionsRef.current = newFullDimensions;\n    if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newFullDimensions.viewportInnerSize);\n    }\n  }, [apiRef, props.scrollbarSize, props.autoHeight, rowsMeta.currentPageTotalHeight, totalHeaderHeight]);\n  const resize = React.useCallback(() => {\n    updateGridDimensionsRef();\n    apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n  }, [apiRef, updateGridDimensionsRef]);\n  const getRootDimensions = React.useCallback(() => fullDimensionsRef.current, []);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return 0;\n    }\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n    if (props.getRowHeight) {\n      const renderContext = apiRef.current.getRenderContext();\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight, rowHeight]);\n  const dimensionsApi = {\n    resize,\n    getRootDimensions\n  };\n  const dimensionsPrivateApi = {\n    getViewportPageSize,\n    updateGridDimensionsRef\n  };\n  useGridApiMethod(apiRef, dimensionsApi, 'public');\n  useGridApiMethod(apiRef, dimensionsPrivateApi, 'private');\n  const debounceResize = React.useMemo(() => debounce(resize, 60), [resize]);\n  const isFirstSizing = React.useRef(true);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size;\n\n    // jsdom has no layout capabilities\n    const isJSDOM = /jsdom/.test(window.navigator.userAgent);\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (isTestEnvironment) {\n      // We don't need to debounce the resize for tests.\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n    debounceResize();\n  }, [props.autoHeight, debounceResize, logger, resize]);\n  useEnhancedEffect(() => updateGridDimensionsRef(), [updateGridDimensionsRef]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'paginationModelChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateGridDimensionsRef);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,iBAAiB,IAAIC,QAA9B,EAAwCC,sBAAsB,IAAIC,aAAlE,EAAiFC,0BAA0B,IAAIC,iBAA/G,QAAwI,YAAxI;AACA,SAASC,sBAAT,EAAiCC,uBAAjC,QAAgE,oCAAhE;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,6BAAT,QAA8C,YAA9C;AACA,SAASC,yBAAT,QAA0C,YAA1C;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA,SAASC,cAAT,QAA+B,gCAA/B;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,yBAAT,QAA0C,uBAA1C;AACA,SAASC,oBAAT,QAAqC,6BAArC;AACA,MAAMC,iBAAiB,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAAnD;;AACA,MAAMC,SAAS,GAAG,QAIZ;EAAA,IAJa;IACjBC,OADiB;IAEjBC,SAFiB;IAGjBC;EAHiB,CAIb;EACJ,MAAMC,wBAAwB,GAAGH,OAAO,CAACI,KAAR,GAAgBH,SAAS,CAACG,KAA3D;EACA,MAAMC,wBAAwB,GAAGL,OAAO,CAACM,MAAR,GAAiBL,SAAS,CAACK,MAA5D;EACA,IAAIC,UAAU,GAAG,KAAjB;EACA,IAAIC,UAAU,GAAG,KAAjB;;EACA,IAAIL,wBAAwB,IAAIE,wBAAhC,EAA0D;IACxDE,UAAU,GAAGJ,wBAAb;IACAK,UAAU,GAAGR,OAAO,CAACM,MAAR,IAAkBC,UAAU,GAAGL,aAAH,GAAmB,CAA/C,IAAoDD,SAAS,CAACK,MAA3E,CAFwD,CAIxD;;IACA,IAAIE,UAAJ,EAAgB;MACdD,UAAU,GAAGP,OAAO,CAACI,KAAR,GAAgBF,aAAhB,GAAgCD,SAAS,CAACG,KAAvD;IACD;EACF;;EACD,OAAO;IACLG,UADK;IAELC;EAFK,CAAP;AAID,CAtBD;;AAuBA,OAAO,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,KAAnC,EAA0C;EAC/C,MAAMC,MAAM,GAAGzB,aAAa,CAACuB,MAAD,EAAS,oBAAT,CAA5B;EACA,MAAMG,UAAU,GAAGpC,KAAK,CAACqC,MAAN,CAAa,KAAb,CAAnB;EACA,MAAMC,iBAAiB,GAAGtC,KAAK,CAACqC,MAAN,CAAa,IAAb,CAA1B;EACA,MAAME,iBAAiB,GAAGvC,KAAK,CAACqC,MAAN,CAAa,IAAb,CAA1B;EACA,MAAMG,QAAQ,GAAG3B,eAAe,CAACoB,MAAD,EAASlB,oBAAT,CAAhC;EACA,MAAM0B,aAAa,GAAG5B,eAAe,CAACoB,MAAD,EAASrB,yBAAT,CAArC;EACA,MAAM8B,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWV,KAAK,CAACQ,SAAN,GAAkBD,aAA7B,CAAlB;EACA,MAAMI,iBAAiB,GAAG5B,oBAAoB,CAACgB,MAAD,EAASC,KAAK,CAACY,kBAAf,CAA9C;EACA,MAAMC,uBAAuB,GAAG/C,KAAK,CAACgD,WAAN,CAAkB,MAAM;IACtD,IAAIC,qBAAJ;;IACA,MAAMC,WAAW,GAAG,CAACD,qBAAqB,GAAGhB,MAAM,CAACkB,OAAP,CAAeC,cAAxC,KAA2D,IAA3D,GAAkE,KAAK,CAAvE,GAA2EH,qBAAqB,CAACE,OAArH;IACA,MAAME,iBAAiB,GAAG1C,6BAA6B,CAACsB,MAAD,CAAvD;IACA,MAAMqB,gBAAgB,GAAGtC,yBAAyB,CAACiB,MAAD,CAAlD;;IACA,IAAI,CAACK,iBAAiB,CAACa,OAAvB,EAAgC;MAC9B;IACD;;IACD,IAAI1B,aAAJ;;IACA,IAAIS,KAAK,CAACqB,aAAN,IAAuB,IAA3B,EAAiC;MAC/B9B,aAAa,GAAGS,KAAK,CAACqB,aAAtB;IACD,CAFD,MAEO,IAAI,CAACF,iBAAD,IAAsB,CAACH,WAA3B,EAAwC;MAC7CzB,aAAa,GAAG,CAAhB;IACD,CAFM,MAEA;MACL,MAAM+B,GAAG,GAAGpD,aAAa,CAAC8C,WAAD,CAAzB;MACA,MAAMO,SAAS,GAAGD,GAAG,CAACE,aAAJ,CAAkB,KAAlB,CAAlB;MACAD,SAAS,CAACE,KAAV,CAAgBhC,KAAhB,GAAwB,MAAxB;MACA8B,SAAS,CAACE,KAAV,CAAgB9B,MAAhB,GAAyB,MAAzB;MACA4B,SAAS,CAACE,KAAV,CAAgBC,QAAhB,GAA2B,UAA3B;MACAH,SAAS,CAACE,KAAV,CAAgBE,QAAhB,GAA2B,QAA3B;MACAJ,SAAS,CAACK,SAAV,GAAsB,WAAtB;MACAZ,WAAW,CAACa,WAAZ,CAAwBN,SAAxB;MACAhC,aAAa,GAAGgC,SAAS,CAACO,WAAV,GAAwBP,SAAS,CAACQ,WAAlD;MACAf,WAAW,CAACgB,WAAZ,CAAwBT,SAAxB;IACD;;IACD,IAAIU,iBAAJ;IACA,IAAIrC,UAAJ;IACA,IAAIC,UAAJ;;IACA,IAAIG,KAAK,CAACkC,UAAV,EAAsB;MACpBrC,UAAU,GAAG,KAAb;MACAD,UAAU,GAAGa,IAAI,CAAC0B,KAAL,CAAWhB,iBAAX,IAAgCf,iBAAiB,CAACa,OAAlB,CAA0BxB,KAAvE;MACAwC,iBAAiB,GAAG;QAClBxC,KAAK,EAAEW,iBAAiB,CAACa,OAAlB,CAA0BxB,KADf;QAElBE,MAAM,EAAEW,QAAQ,CAAC8B,sBAAT,IAAmCxC,UAAU,GAAGL,aAAH,GAAmB,CAAhE;MAFU,CAApB;IAID,CAPD,MAOO;MACL0C,iBAAiB,GAAG;QAClBxC,KAAK,EAAEW,iBAAiB,CAACa,OAAlB,CAA0BxB,KADf;QAElBE,MAAM,EAAES,iBAAiB,CAACa,OAAlB,CAA0BtB,MAA1B,GAAmCgB;MAFzB,CAApB;MAIA,MAAM0B,iBAAiB,GAAGjD,SAAS,CAAC;QAClCC,OAAO,EAAE;UACPI,KAAK,EAAEgB,IAAI,CAAC0B,KAAL,CAAWhB,iBAAX,CADA;UAEPxB,MAAM,EAAEW,QAAQ,CAAC8B;QAFV,CADyB;QAKlC9C,SAAS,EAAE;UACTG,KAAK,EAAEwC,iBAAiB,CAACxC,KADhB;UAETE,MAAM,EAAEsC,iBAAiB,CAACtC,MAAlB,GAA2ByB,gBAAgB,CAACkB,GAA5C,GAAkDlB,gBAAgB,CAACmB;QAFlE,CALuB;QASlChD;MATkC,CAAD,CAAnC;MAWAM,UAAU,GAAGwC,iBAAiB,CAACxC,UAA/B;MACAD,UAAU,GAAGyC,iBAAiB,CAACzC,UAA/B;IACD;;IACD,MAAM4C,iBAAiB,GAAG;MACxB/C,KAAK,EAAEwC,iBAAiB,CAACxC,KAAlB,IAA2BI,UAAU,GAAGN,aAAH,GAAmB,CAAxD,CADiB;MAExBI,MAAM,EAAEsC,iBAAiB,CAACtC,MAAlB,IAA4BC,UAAU,GAAGL,aAAH,GAAmB,CAAzD;IAFgB,CAA1B;IAIA,MAAMkD,iBAAiB,GAAG;MACxBR,iBADwB;MAExBO,iBAFwB;MAGxB5C,UAHwB;MAIxBC,UAJwB;MAKxBN;IALwB,CAA1B;IAOA,MAAMmD,cAAc,GAAGrC,iBAAiB,CAACY,OAAzC;IACAZ,iBAAiB,CAACY,OAAlB,GAA4BwB,iBAA5B;;IACA,IAAIA,iBAAiB,CAACD,iBAAlB,CAAoC/C,KAApC,MAA+CiD,cAAc,IAAI,IAAlB,GAAyB,KAAK,CAA9B,GAAkCA,cAAc,CAACF,iBAAf,CAAiC/C,KAAlH,KAA4HgD,iBAAiB,CAACD,iBAAlB,CAAoC7C,MAApC,MAAgD+C,cAAc,IAAI,IAAlB,GAAyB,KAAK,CAA9B,GAAkCA,cAAc,CAACF,iBAAf,CAAiC7C,MAAnH,CAAhI,EAA4P;MAC1PI,MAAM,CAACkB,OAAP,CAAe0B,YAAf,CAA4B,yBAA5B,EAAuDF,iBAAiB,CAACD,iBAAzE;IACD;EACF,CAtE+B,EAsE7B,CAACzC,MAAD,EAASC,KAAK,CAACqB,aAAf,EAA8BrB,KAAK,CAACkC,UAApC,EAAgD5B,QAAQ,CAAC8B,sBAAzD,EAAiFzB,iBAAjF,CAtE6B,CAAhC;EAuEA,MAAMiC,MAAM,GAAG9E,KAAK,CAACgD,WAAN,CAAkB,MAAM;IACrCD,uBAAuB;IACvBd,MAAM,CAACkB,OAAP,CAAe0B,YAAf,CAA4B,iBAA5B,EAA+CvC,iBAAiB,CAACa,OAAjE;EACD,CAHc,EAGZ,CAAClB,MAAD,EAASc,uBAAT,CAHY,CAAf;EAIA,MAAMgC,iBAAiB,GAAG/E,KAAK,CAACgD,WAAN,CAAkB,MAAMT,iBAAiB,CAACY,OAA1C,EAAmD,EAAnD,CAA1B;EACA,MAAM6B,mBAAmB,GAAGhF,KAAK,CAACgD,WAAN,CAAkB,MAAM;IAClD,MAAMiC,UAAU,GAAGhD,MAAM,CAACkB,OAAP,CAAe4B,iBAAf,EAAnB;;IACA,IAAI,CAACE,UAAL,EAAiB;MACf,OAAO,CAAP;IACD;;IACD,MAAMC,WAAW,GAAGpE,cAAc,CAACmB,MAAD,EAAS;MACzCkD,UAAU,EAAEjD,KAAK,CAACiD,UADuB;MAEzCC,cAAc,EAAElD,KAAK,CAACkD;IAFmB,CAAT,CAAlC,CALkD,CAUlD;IACA;;IACA,IAAIlD,KAAK,CAACmD,YAAV,EAAwB;MACtB,MAAMC,aAAa,GAAGrD,MAAM,CAACkB,OAAP,CAAeoC,gBAAf,EAAtB;MACA,MAAMC,gBAAgB,GAAGF,aAAa,CAACG,YAAd,GAA6BH,aAAa,CAACI,aAApE;MACA,OAAO/C,IAAI,CAACgD,GAAL,CAASH,gBAAgB,GAAG,CAA5B,EAA+BN,WAAW,CAACU,IAAZ,CAAiBC,MAAhD,CAAP;IACD;;IACD,MAAMC,+BAA+B,GAAGnD,IAAI,CAACC,KAAL,CAAWqC,UAAU,CAACP,iBAAX,CAA6B7C,MAA7B,GAAsCa,SAAjD,CAAxC;IACA,OAAOC,IAAI,CAACgD,GAAL,CAASG,+BAAT,EAA0CZ,WAAW,CAACU,IAAZ,CAAiBC,MAA3D,CAAP;EACD,CAnB2B,EAmBzB,CAAC5D,MAAD,EAASC,KAAK,CAACiD,UAAf,EAA2BjD,KAAK,CAACkD,cAAjC,EAAiDlD,KAAK,CAACmD,YAAvD,EAAqE3C,SAArE,CAnByB,CAA5B;EAoBA,MAAMqD,aAAa,GAAG;IACpBjB,MADoB;IAEpBC;EAFoB,CAAtB;EAIA,MAAMiB,oBAAoB,GAAG;IAC3BhB,mBAD2B;IAE3BjC;EAF2B,CAA7B;EAIAtC,gBAAgB,CAACwB,MAAD,EAAS8D,aAAT,EAAwB,QAAxB,CAAhB;EACAtF,gBAAgB,CAACwB,MAAD,EAAS+D,oBAAT,EAA+B,SAA/B,CAAhB;EACA,MAAMC,cAAc,GAAGjG,KAAK,CAACkG,OAAN,CAAc,MAAMhG,QAAQ,CAAC4E,MAAD,EAAS,EAAT,CAA5B,EAA0C,CAACA,MAAD,CAA1C,CAAvB;EACA,MAAMqB,aAAa,GAAGnG,KAAK,CAACqC,MAAN,CAAa,IAAb,CAAtB;EACA,MAAM+D,YAAY,GAAGpG,KAAK,CAACgD,WAAN,CAAkBqD,IAAI,IAAI;IAC7C/D,iBAAiB,CAACa,OAAlB,GAA4BkD,IAA5B,CAD6C,CAG7C;;IACA,MAAMC,OAAO,GAAG,QAAQC,IAAR,CAAaC,MAAM,CAACC,SAAP,CAAiBC,SAA9B,CAAhB;;IACA,IAAIL,IAAI,CAACxE,MAAL,KAAgB,CAAhB,IAAqB,CAACO,UAAU,CAACe,OAAjC,IAA4C,CAACjB,KAAK,CAACkC,UAAnD,IAAiE,CAACkC,OAAtE,EAA+E;MAC7EnE,MAAM,CAACwE,KAAP,CAAa,CAAC,8DAAD,EAAiE,6DAAjE,EAAgI,yCAAhI,EAA2K,EAA3K,EAA+K,4DAA/K,EAA6OC,IAA7O,CAAkP,IAAlP,CAAb;MACAxE,UAAU,CAACe,OAAX,GAAqB,IAArB;IACD;;IACD,IAAIkD,IAAI,CAAC1E,KAAL,KAAe,CAAf,IAAoB,CAACS,UAAU,CAACe,OAAhC,IAA2C,CAACmD,OAAhD,EAAyD;MACvDnE,MAAM,CAACwE,KAAP,CAAa,CAAC,6DAAD,EAAgE,4DAAhE,EAA8H,wCAA9H,EAAwK,EAAxK,EAA4K,4DAA5K,EAA0OC,IAA1O,CAA+O,IAA/O,CAAb;MACAxE,UAAU,CAACe,OAAX,GAAqB,IAArB;IACD;;IACD,IAAIjC,iBAAJ,EAAuB;MACrB;MACA4D,MAAM;MACNqB,aAAa,CAAChD,OAAd,GAAwB,KAAxB;MACA;IACD;;IACD,IAAIgD,aAAa,CAAChD,OAAlB,EAA2B;MACzB;MACA2B,MAAM;MACNqB,aAAa,CAAChD,OAAd,GAAwB,KAAxB;MACA;IACD;;IACD8C,cAAc;EACf,CA1BoB,EA0BlB,CAAC/D,KAAK,CAACkC,UAAP,EAAmB6B,cAAnB,EAAmC9D,MAAnC,EAA2C2C,MAA3C,CA1BkB,CAArB;EA2BAxE,iBAAiB,CAAC,MAAMyC,uBAAuB,EAA9B,EAAkC,CAACA,uBAAD,CAAlC,CAAjB;EACAvC,uBAAuB,CAACyB,MAAD,EAAS,eAAT,EAA0Bc,uBAA1B,CAAvB;EACAvC,uBAAuB,CAACyB,MAAD,EAAS,uBAAT,EAAkCc,uBAAlC,CAAvB;EACAvC,uBAAuB,CAACyB,MAAD,EAAS,eAAT,EAA0Bc,uBAA1B,CAAvB;EACAxC,sBAAsB,CAAC0B,MAAD,EAAS,QAAT,EAAmBmE,YAAnB,CAAtB;EACA5F,uBAAuB,CAACyB,MAAD,EAAS,iBAAT,EAA4BC,KAAK,CAAC2E,QAAlC,CAAvB;AACD"},"metadata":{},"sourceType":"module"}