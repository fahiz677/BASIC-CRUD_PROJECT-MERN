{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { GRID_ROOT_GROUP_ID, gridRowTreeSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport const useGridFilter = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$, _props$slotProps2;\n\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === 'client' ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.applyStrategyProcessor('filtering', {\n        isRowMatchingFilters,\n        filterModel: filterModel != null ? filterModel : getDefaultGridFilterModel()\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {\n      return columnMenuItems;\n    }\n\n    return [...columnMenuItems, 'ColumnMenuFilterItem'];\n  }, [props.disableColumnFilter]);\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        var _column$filterOperato;\n\n        if (item.value !== undefined) {\n          return true;\n        }\n\n        const column = apiRef.current.getColumn(item.field);\n        const filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find(operator => operator.value === item.operator);\n        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue; // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n\n        if (requiresFilterValue) {\n          return false;\n        }\n\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.field === targetColumnField);\n      const targetColumn = apiRef.current.getColumn(targetColumnField);\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLogicOperator = React.useCallback(logicOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.logicOperator === logicOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      logicOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const filterApi = {\n    setFilterLogicOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n    const shouldExportFilterModel = // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.filterModel != null || // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null || // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$slotProps;\n\n      const FilterPanel = props.slots.filterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.filterPanel));\n    }\n\n    return initialValue;\n  }, [props.slots.filterPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === 'client' && params.isRowMatchingFilters) {\n      const tree = gridRowTreeSelector(apiRef);\n      const rowIds = tree[GRID_ROOT_GROUP_ID].children;\n      const filteredRowsLookup = {};\n\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        let isRowPassing;\n\n        if (typeof rowId === 'string' && rowId.startsWith('auto-generated-group-footer')) {\n          isRowPassing = true;\n        } else {\n          const {\n            passingFilterItems,\n            passingQuickFilterValues\n          } = params.isRowMatchingFilters(rowId);\n          isRowPassing = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, apiRef);\n        }\n\n        filteredRowsLookup[rowId] = isRowPassing;\n      }\n\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` are equals since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.field && filterableColumnsLookup[item.field]);\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};","map":{"version":3,"names":["_extends","React","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridFilterableColumnLookupSelector","GridPreferencePanelsValue","getDefaultGridFilterModel","gridFilterModelSelector","useFirstRender","GRID_ROOT_GROUP_ID","gridRowTreeSelector","useGridRegisterPipeProcessor","GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","buildAggregatedFilterApplier","sanitizeFilterModel","mergeStateWithFilterModel","cleanFilterItem","passFilterLogic","isDeepEqual","jsx","_jsx","filterStateInitializer","state","props","apiRef","_ref","_props$filterModel","_props$initialState","_props$initialState$f","filterModel","initialState","filter","disableMultipleColumnsFiltering","visibleRowsLookup","filteredDescendantCountLookup","useGridFilter","_props$initialState3","_props$initialState3$","_props$slotProps2","logger","current","registerControlState","stateId","propModel","propOnChange","onFilterModelChange","stateSelector","changeEvent","updateFilteredRows","useCallback","setState","instanceId","isRowMatchingFilters","filterMode","filteringResult","applyStrategyProcessor","publishEvent","addColumnMenuItem","columnMenuItems","colDef","filterable","disableColumnFilter","applyFilters","forceUpdate","upsertFilterItem","item","items","itemIndex","findIndex","filterItem","id","push","setFilterModel","upsertFilterItems","existingItems","forEach","deleteFilterItem","itemToDelete","length","showFilterPanel","targetColumnField","debug","filterItemsWithValue","_column$filterOperato","value","undefined","column","getColumn","field","filterOperator","filterOperators","find","operator","requiresFilterValue","newFilterItems","filterItemOnTarget","targetColumn","showPreferences","filters","hideFilterPanel","hidePreferences","setFilterLogicOperator","logicOperator","setQuickFilterValues","values","quickFilterValues","model","reason","currentModel","updateControlState","unstable_applyFilters","filterApi","stateExportPreProcessing","prevState","context","_props$initialState2","_props$initialState2$","filterModelToExport","shouldExportFilterModel","exportOnlyDirtyModels","stateRestorePreProcessing","params","_context$stateToResto","stateToRestore","callbacks","preferencePanelPreProcessing","initialValue","_props$slotProps","FilterPanel","slots","filterPanel","slotProps","flatFilteringMethod","tree","rowIds","children","filteredRowsLookup","i","rowId","isRowPassing","startsWith","passingFilterItems","passingQuickFilterValues","handleColumnsChange","filterableColumnsLookup","handleStrategyProcessorChange","methodName","useEffect"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { GRID_ROOT_GROUP_ID, gridRowTreeSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\nexport const useGridFilter = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$, _props$slotProps2;\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === 'client' ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.applyStrategyProcessor('filtering', {\n        isRowMatchingFilters,\n        filterModel: filterModel != null ? filterModel : getDefaultGridFilterModel()\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'ColumnMenuFilterItem'];\n  }, [props.disableColumnFilter]);\n\n  /**\n   * API METHODS\n   */\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        var _column$filterOperato;\n        if (item.value !== undefined) {\n          return true;\n        }\n        const column = apiRef.current.getColumn(item.field);\n        const filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find(operator => operator.value === item.operator);\n        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue;\n\n        // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n        if (requiresFilterValue) {\n          return false;\n        }\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.field === targetColumnField);\n      const targetColumn = apiRef.current.getColumn(targetColumnField);\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      }\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLogicOperator = React.useCallback(logicOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (filterModel.logicOperator === logicOperator) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      logicOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const filterApi = {\n    setFilterLogicOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n    const shouldExportFilterModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.filterModel != null ||\n    // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null ||\n    // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n    if (filterModel == null) {\n      return params;\n    }\n    apiRef.current.updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$slotProps;\n      const FilterPanel = props.slots.filterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.filterPanel));\n    }\n    return initialValue;\n  }, [props.slots.filterPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === 'client' && params.isRowMatchingFilters) {\n      const tree = gridRowTreeSelector(apiRef);\n      const rowIds = tree[GRID_ROOT_GROUP_ID].children;\n      const filteredRowsLookup = {};\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        let isRowPassing;\n        if (typeof rowId === 'string' && rowId.startsWith('auto-generated-group-footer')) {\n          isRowPassing = true;\n        } else {\n          const {\n            passingFilterItems,\n            passingQuickFilterValues\n          } = params.isRowMatchingFilters(rowId);\n          isRowPassing = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, apiRef);\n        }\n        filteredRowsLookup[rowId] = isRowPassing;\n      }\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` are equals since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n\n  /**\n   * EVENTS\n   */\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.field && filterableColumnsLookup[item.field]);\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n\n  // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}