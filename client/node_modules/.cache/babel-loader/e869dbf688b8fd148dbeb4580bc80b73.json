{"ast":null,"code":"import { buildWarning } from '../../../utils/warning';\nimport { GridSignature } from '../../utils';\nconst MAX_PAGE_SIZE = 100;\nexport const defaultPageSize = autoPageSize => autoPageSize ? 0 : 100;\nexport const getPageCount = (rowCount, pageSize) => {\n  if (pageSize > 0 && rowCount > 0) {\n    return Math.ceil(rowCount / pageSize);\n  }\n\n  return 0;\n};\nexport const noRowCountInServerMode = buildWarning([\"MUI: the 'rowCount' prop is undefined while using paginationMode='server'\", 'For more detail, see http://mui.com/components/data-grid/pagination/#basic-implementation'], 'error');\nexport const getDefaultGridPaginationModel = autoPageSize => ({\n  page: 0,\n  pageSize: autoPageSize ? 0 : 100\n});\nexport const getValidPage = function (page) {\n  let pageCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (pageCount === 0) {\n    return page;\n  }\n\n  return Math.max(Math.min(page, pageCount - 1), 0);\n};\nexport const throwIfPageSizeExceedsTheLimit = (pageSize, signatureProp) => {\n  if (signatureProp === GridSignature.DataGrid && pageSize > MAX_PAGE_SIZE) {\n    throw new Error(['MUI: `pageSize` cannot exceed 100 in the MIT version of the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n  }\n};","map":{"version":3,"names":["buildWarning","GridSignature","MAX_PAGE_SIZE","defaultPageSize","autoPageSize","getPageCount","rowCount","pageSize","Math","ceil","noRowCountInServerMode","getDefaultGridPaginationModel","page","getValidPage","pageCount","max","min","throwIfPageSizeExceedsTheLimit","signatureProp","DataGrid","Error","join"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationUtils.js"],"sourcesContent":["import { buildWarning } from '../../../utils/warning';\nimport { GridSignature } from '../../utils';\nconst MAX_PAGE_SIZE = 100;\nexport const defaultPageSize = autoPageSize => autoPageSize ? 0 : 100;\nexport const getPageCount = (rowCount, pageSize) => {\n  if (pageSize > 0 && rowCount > 0) {\n    return Math.ceil(rowCount / pageSize);\n  }\n  return 0;\n};\nexport const noRowCountInServerMode = buildWarning([\"MUI: the 'rowCount' prop is undefined while using paginationMode='server'\", 'For more detail, see http://mui.com/components/data-grid/pagination/#basic-implementation'], 'error');\nexport const getDefaultGridPaginationModel = autoPageSize => ({\n  page: 0,\n  pageSize: autoPageSize ? 0 : 100\n});\nexport const getValidPage = (page, pageCount = 0) => {\n  if (pageCount === 0) {\n    return page;\n  }\n  return Math.max(Math.min(page, pageCount - 1), 0);\n};\nexport const throwIfPageSizeExceedsTheLimit = (pageSize, signatureProp) => {\n  if (signatureProp === GridSignature.DataGrid && pageSize > MAX_PAGE_SIZE) {\n    throw new Error(['MUI: `pageSize` cannot exceed 100 in the MIT version of the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n  }\n};"],"mappings":"AAAA,SAASA,YAAT,QAA6B,wBAA7B;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,MAAMC,aAAa,GAAG,GAAtB;AACA,OAAO,MAAMC,eAAe,GAAGC,YAAY,IAAIA,YAAY,GAAG,CAAH,GAAO,GAA3D;AACP,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;EAClD,IAAIA,QAAQ,GAAG,CAAX,IAAgBD,QAAQ,GAAG,CAA/B,EAAkC;IAChC,OAAOE,IAAI,CAACC,IAAL,CAAUH,QAAQ,GAAGC,QAArB,CAAP;EACD;;EACD,OAAO,CAAP;AACD,CALM;AAMP,OAAO,MAAMG,sBAAsB,GAAGV,YAAY,CAAC,CAAC,2EAAD,EAA8E,2FAA9E,CAAD,EAA6K,OAA7K,CAA3C;AACP,OAAO,MAAMW,6BAA6B,GAAGP,YAAY,KAAK;EAC5DQ,IAAI,EAAE,CADsD;EAE5DL,QAAQ,EAAEH,YAAY,GAAG,CAAH,GAAO;AAF+B,CAAL,CAAlD;AAIP,OAAO,MAAMS,YAAY,GAAG,UAACD,IAAD,EAAyB;EAAA,IAAlBE,SAAkB,uEAAN,CAAM;;EACnD,IAAIA,SAAS,KAAK,CAAlB,EAAqB;IACnB,OAAOF,IAAP;EACD;;EACD,OAAOJ,IAAI,CAACO,GAAL,CAASP,IAAI,CAACQ,GAAL,CAASJ,IAAT,EAAeE,SAAS,GAAG,CAA3B,CAAT,EAAwC,CAAxC,CAAP;AACD,CALM;AAMP,OAAO,MAAMG,8BAA8B,GAAG,CAACV,QAAD,EAAWW,aAAX,KAA6B;EACzE,IAAIA,aAAa,KAAKjB,aAAa,CAACkB,QAAhC,IAA4CZ,QAAQ,GAAGL,aAA3D,EAA0E;IACxE,MAAM,IAAIkB,KAAJ,CAAU,CAAC,uEAAD,EAA0E,yFAA1E,EAAqKC,IAArK,CAA0K,IAA1K,CAAV,CAAN;EACD;AACF,CAJM"},"metadata":{},"sourceType":"module"}