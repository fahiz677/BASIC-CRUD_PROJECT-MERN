{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowGroupingNameSelector, gridRowTreeDepthsSelector, gridDataRowIdsSelector, gridRowsDataRowIdToIdLookupSelector, gridRowMaximumTreeDepthSelector } from './gridRowsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridSortedRowIdsSelector } from '../sorting/gridSortingSelector';\nimport { gridFilteredRowsLookupSelector } from '../filter/gridFilterSelector';\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, isAutoGeneratedRow, GRID_ROOT_GROUP_ID, updateCacheWithNewRows, getTopLevelRowCount, getRowIdFromRowModel } from './gridRowsUtils';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport const rowsStateInitializer = (state, props, apiRef) => {\n  apiRef.current.caches.rows = createRowsInternalCache({\n    rows: props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading,\n    rowCount: props.rowCount\n  });\n  return _extends({}, state, {\n    rows: getRowsStateFromCache({\n      apiRef,\n      rowCountProp: props.rowCount,\n      loadingProp: props.loading,\n      previousTree: null,\n      previousTreeDepths: null\n    })\n  });\n};\nexport const useGridRows = (apiRef, props) => {\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      // Freeze the `rows` prop so developers have a fast failure if they try to use Array.prototype.push().\n      Object.freeze(props.rows);\n    } catch (error) {// Sometimes, it's impossible to freeze, so we give up on it.\n    }\n  }\n\n  const logger = useGridLogger(apiRef, 'useGridRows');\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const lastUpdateMs = React.useRef(Date.now());\n  const timeout = React.useRef(null);\n  const getRow = React.useCallback(id => {\n    const model = gridRowsLookupSelector(apiRef)[id];\n\n    if (model) {\n      return model;\n    }\n\n    const node = apiRef.current.getRowNode(id);\n\n    if (node && isAutoGeneratedRow(node)) {\n      // TODO rows v6: Is it the best approach ?\n      return {};\n    }\n\n    return null;\n  }, [apiRef]);\n  const lookup = React.useMemo(() => currentPage.rows.reduce((acc, _ref2, index) => {\n    let {\n      id\n    } = _ref2;\n    acc[id] = index;\n    return acc;\n  }, {}), [currentPage.rows]);\n  const throttledRowsChange = React.useCallback(_ref3 => {\n    let {\n      cache,\n      throttle\n    } = _ref3;\n\n    const run = () => {\n      timeout.current = null;\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(state => _extends({}, state, {\n        rows: getRowsStateFromCache({\n          apiRef,\n          rowCountProp: props.rowCount,\n          loadingProp: props.loading,\n          previousTree: gridRowTreeSelector(apiRef),\n          previousTreeDepths: gridRowTreeDepthsSelector(apiRef)\n        })\n      }));\n      apiRef.current.publishEvent('rowsSet');\n      apiRef.current.forceUpdate();\n    };\n\n    if (timeout.current) {\n      clearTimeout(timeout.current);\n      timeout.current = null;\n    }\n\n    apiRef.current.caches.rows = cache;\n\n    if (!throttle) {\n      run();\n      return;\n    }\n\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n\n    if (throttleRemainingTimeMs > 0) {\n      timeout.current = setTimeout(run, throttleRemainingTimeMs);\n      return;\n    }\n\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setRows = React.useCallback(rows => {\n    logger.debug(`Updating all rows, new length ${rows.length}`);\n    const cache = createRowsInternalCache({\n      rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    });\n    const prevCache = apiRef.current.caches.rows;\n    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);\n  const updateRows = React.useCallback(updates => {\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\n      throw new Error([\"MUI: You can't update several rows at once in `apiRef.current.updateRows` on the DataGrid.\", 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n\n    const cache = updateCacheWithNewRows({\n      updates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows\n    });\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  const getRowModels = React.useCallback(() => {\n    const dataRows = gridDataRowIdsSelector(apiRef);\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\n    return new Map(dataRows.map(id => {\n      var _idRowsLookup$id;\n\n      return [id, (_idRowsLookup$id = idRowsLookup[id]) != null ? _idRowsLookup$id : {}];\n    }));\n  }, [apiRef]);\n  const getRowsCount = React.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);\n  const getAllRowIds = React.useCallback(() => gridDataRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => lookup[id], [lookup]);\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\n    const currentNode = apiRef.current.getRowNode(id);\n\n    if (!currentNode) {\n      throw new Error(`MUI: No row with id #${id} found`);\n    }\n\n    if (currentNode.type !== 'group') {\n      throw new Error('MUI: Only group nodes can be expanded or collapsed');\n    }\n\n    const newNode = _extends({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [id]: newNode\n          })\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  const getRowNode = React.useCallback(id => {\n    var _ref;\n\n    return (_ref = gridRowTreeSelector(apiRef)[id]) != null ? _ref : null;\n  }, [apiRef]);\n  const getRowGroupChildren = React.useCallback(_ref4 => {\n    let {\n      skipAutoGeneratedRows = true,\n      groupId,\n      applySorting,\n      applyFiltering\n    } = _ref4;\n    const tree = gridRowTreeSelector(apiRef);\n    let children;\n\n    if (applySorting) {\n      const groupNode = tree[groupId];\n\n      if (!groupNode) {\n        return [];\n      }\n\n      const sortedRowIds = gridSortedRowIdsSelector(apiRef);\n      children = [];\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n\n      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\n        const id = sortedRowIds[index];\n\n        if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[id])) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);\n    }\n\n    if (applyFiltering) {\n      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n      children = children.filter(childId => filteredRowsLookup[childId] !== false);\n    }\n\n    return children;\n  }, [apiRef]);\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\n    const node = apiRef.current.getRowNode(rowId);\n\n    if (!node) {\n      throw new Error(`MUI: No row with id #${rowId} found`);\n    }\n\n    if (node.parent !== GRID_ROOT_GROUP_ID) {\n      throw new Error(`MUI: The row reordering do not support reordering of grouped rows yet`);\n    }\n\n    if (node.type !== 'leaf') {\n      throw new Error(`MUI: The row reordering do not support reordering of footer or grouping rows`);\n    }\n\n    apiRef.current.setState(state => {\n      const group = gridRowTreeSelector(state, apiRef.current.instanceId)[GRID_ROOT_GROUP_ID];\n      const allRows = group.children;\n      const oldIndex = allRows.findIndex(row => row === rowId);\n\n      if (oldIndex === -1 || oldIndex === targetIndex) {\n        return state;\n      }\n\n      logger.debug(`Moving row ${rowId} to index ${targetIndex}`);\n      const updatedRows = [...allRows];\n      updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [GRID_ROOT_GROUP_ID]: _extends({}, group, {\n              children: updatedRows\n            })\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, logger]);\n  const replaceRows = React.useCallback((firstRowToRender, newRows) => {\n    if (props.signature === GridSignature.DataGrid && newRows.length > 1) {\n      throw new Error([\"MUI: You can't replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.\", 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n\n    if (newRows.length === 0) {\n      return;\n    }\n\n    const treeDepth = gridRowMaximumTreeDepthSelector(apiRef);\n\n    if (treeDepth > 1) {\n      throw new Error('`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping');\n    }\n\n    const tree = _extends({}, gridRowTreeSelector(apiRef));\n\n    const dataRowIdToModelLookup = _extends({}, gridRowsLookupSelector(apiRef));\n\n    const dataRowIdToIdLookup = _extends({}, gridRowsDataRowIdToIdLookupSelector(apiRef));\n\n    const rootGroup = tree[GRID_ROOT_GROUP_ID];\n    const rootGroupChildren = [...rootGroup.children];\n\n    for (let i = 0; i < newRows.length; i += 1) {\n      const rowModel = newRows[i];\n      const rowId = getRowIdFromRowModel(rowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');\n      const [replacedRowId] = rootGroupChildren.splice(firstRowToRender + i, 1, rowId);\n      delete dataRowIdToModelLookup[replacedRowId];\n      delete dataRowIdToIdLookup[replacedRowId];\n      delete tree[replacedRowId];\n      const rowTreeNodeConfig = {\n        id: rowId,\n        depth: 0,\n        parent: GRID_ROOT_GROUP_ID,\n        type: 'leaf',\n        groupingKey: null\n      };\n      dataRowIdToModelLookup[rowId] = rowModel;\n      dataRowIdToIdLookup[rowId] = rowId;\n      tree[rowId] = rowTreeNodeConfig;\n    }\n\n    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n      children: rootGroupChildren\n    }); // Removes potential remaining skeleton rows from the dataRowIds.\n\n    const dataRowIds = rootGroupChildren.filter(childId => tree[childId].type === 'leaf');\n    apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;\n    apiRef.current.caches.rows.dataRowIdToIdLookup = dataRowIdToIdLookup;\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        dataRowIdToModelLookup,\n        dataRowIdToIdLookup,\n        dataRowIds,\n        tree\n      })\n    }));\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.signature, props.getRowId]);\n  const rowApi = {\n    getRow,\n    getRowModels,\n    getRowsCount,\n    getAllRowIds,\n    setRows,\n    updateRows,\n    getRowNode,\n    getRowIndexRelativeToVisibleRows,\n    unstable_replaceRows: replaceRows\n  };\n  const rowProApi = {\n    setRowIndex,\n    setRowChildrenExpansion,\n    getRowGroupChildren\n  };\n  /**\n   * EVENTS\n   */\n\n  const groupRows = React.useCallback(() => {\n    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);\n    let cache;\n\n    if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = _extends({}, apiRef.current.caches.rows, {\n        updates: {\n          type: 'full',\n          rows: gridDataRowIdsSelector(apiRef)\n        }\n      });\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      });\n    }\n\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.getActiveStrategy('rowTree') !== gridRowGroupingNameSelector(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n  /**\n   * APPLIERS\n   */\n\n  const applyHydrateRowsProcessor = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const response = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n        tree: gridRowTreeSelector(state, apiRef.current.instanceId),\n        treeDepths: gridRowTreeDepthsSelector(state, apiRef.current.instanceId),\n        dataRowIds: gridDataRowIdsSelector(state, apiRef.current.instanceId),\n        dataRowIdToModelLookup: gridRowsLookupSelector(state, apiRef.current.instanceId),\n        dataRowIdToIdLookup: gridRowsDataRowIdToIdLookupSelector(state, apiRef.current.instanceId)\n      });\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, response, {\n          totalTopLevelRowCount: getTopLevelRowCount({\n            tree: response.tree,\n            rowCountProp: props.rowCount\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.rowCount]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  useGridApiMethod(apiRef, rowApi, 'public');\n  useGridApiMethod(apiRef, rowProApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    return () => {\n      if (timeout.current !== null) {\n        clearTimeout(timeout.current);\n      }\n    };\n  }, []); // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    const areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows;\n    const isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;\n    const isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount; // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n\n    if (areNewRowsAlreadyInState) {\n      // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`\n      if (!isNewLoadingAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            loading: props.loading\n          })\n        }));\n        apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;\n        apiRef.current.forceUpdate();\n      }\n\n      if (!isNewRowCountAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),\n            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)\n          })\n        }));\n        apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;\n        apiRef.current.forceUpdate();\n      }\n\n      return;\n    }\n\n    logger.debug(`Updating all rows, new length ${props.rows.length}`);\n    throttledRowsChange({\n      cache: createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      }),\n      throttle: false\n    });\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);\n};","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","gridRowCountSelector","gridRowsLookupSelector","gridRowTreeSelector","gridRowGroupingNameSelector","gridRowTreeDepthsSelector","gridDataRowIdsSelector","gridRowsDataRowIdToIdLookupSelector","gridRowMaximumTreeDepthSelector","GridSignature","useGridApiEventHandler","useGridVisibleRows","gridSortedRowIdsSelector","gridFilteredRowsLookupSelector","getTreeNodeDescendants","createRowsInternalCache","getRowsStateFromCache","isAutoGeneratedRow","GRID_ROOT_GROUP_ID","updateCacheWithNewRows","getTopLevelRowCount","getRowIdFromRowModel","useGridRegisterPipeApplier","rowsStateInitializer","state","props","apiRef","current","caches","rows","getRowId","loading","rowCount","rowCountProp","loadingProp","previousTree","previousTreeDepths","useGridRows","process","env","NODE_ENV","Object","freeze","error","logger","currentPage","lastUpdateMs","useRef","Date","now","timeout","getRow","useCallback","id","model","node","getRowNode","lookup","useMemo","reduce","acc","index","throttledRowsChange","cache","throttle","run","setState","publishEvent","forceUpdate","clearTimeout","throttleRemainingTimeMs","throttleRowsMs","setTimeout","setRows","debug","length","prevCache","rowsBeforePartialUpdates","updateRows","updates","signature","DataGrid","Error","join","previousCache","getRowModels","dataRows","idRowsLookup","Map","map","_idRowsLookup$id","getRowsCount","getAllRowIds","getRowIndexRelativeToVisibleRows","setRowChildrenExpansion","isExpanded","currentNode","type","newNode","childrenExpanded","tree","_ref","getRowGroupChildren","skipAutoGeneratedRows","groupId","applySorting","applyFiltering","children","groupNode","sortedRowIds","startIndex","findIndex","depth","push","filteredRowsLookup","filter","childId","setRowIndex","rowId","targetIndex","parent","group","instanceId","allRows","oldIndex","row","updatedRows","splice","replaceRows","firstRowToRender","newRows","treeDepth","dataRowIdToModelLookup","dataRowIdToIdLookup","rootGroup","rootGroupChildren","i","rowModel","replacedRowId","rowTreeNodeConfig","groupingKey","dataRowIds","rowApi","unstable_replaceRows","rowProApi","groupRows","info","handleStrategyProcessorChange","methodName","handleStrategyActivityChange","getActiveStrategy","applyHydrateRowsProcessor","response","unstable_applyPipeProcessors","treeDepths","totalTopLevelRowCount","useEffect","isFirstRender","areNewRowsAlreadyInState","isNewLoadingAlreadyInState","loadingPropBeforePartialUpdates","isNewRowCountAlreadyInState","rowCountPropBeforePartialUpdates","totalRowCount","Math","max"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRows.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowGroupingNameSelector, gridRowTreeDepthsSelector, gridDataRowIdsSelector, gridRowsDataRowIdToIdLookupSelector, gridRowMaximumTreeDepthSelector } from './gridRowsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridSortedRowIdsSelector } from '../sorting/gridSortingSelector';\nimport { gridFilteredRowsLookupSelector } from '../filter/gridFilterSelector';\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, isAutoGeneratedRow, GRID_ROOT_GROUP_ID, updateCacheWithNewRows, getTopLevelRowCount, getRowIdFromRowModel } from './gridRowsUtils';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport const rowsStateInitializer = (state, props, apiRef) => {\n  apiRef.current.caches.rows = createRowsInternalCache({\n    rows: props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading,\n    rowCount: props.rowCount\n  });\n  return _extends({}, state, {\n    rows: getRowsStateFromCache({\n      apiRef,\n      rowCountProp: props.rowCount,\n      loadingProp: props.loading,\n      previousTree: null,\n      previousTreeDepths: null\n    })\n  });\n};\nexport const useGridRows = (apiRef, props) => {\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      // Freeze the `rows` prop so developers have a fast failure if they try to use Array.prototype.push().\n      Object.freeze(props.rows);\n    } catch (error) {\n      // Sometimes, it's impossible to freeze, so we give up on it.\n    }\n  }\n  const logger = useGridLogger(apiRef, 'useGridRows');\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const lastUpdateMs = React.useRef(Date.now());\n  const timeout = React.useRef(null);\n  const getRow = React.useCallback(id => {\n    const model = gridRowsLookupSelector(apiRef)[id];\n    if (model) {\n      return model;\n    }\n    const node = apiRef.current.getRowNode(id);\n    if (node && isAutoGeneratedRow(node)) {\n      // TODO rows v6: Is it the best approach ?\n      return {};\n    }\n    return null;\n  }, [apiRef]);\n  const lookup = React.useMemo(() => currentPage.rows.reduce((acc, {\n    id\n  }, index) => {\n    acc[id] = index;\n    return acc;\n  }, {}), [currentPage.rows]);\n  const throttledRowsChange = React.useCallback(({\n    cache,\n    throttle\n  }) => {\n    const run = () => {\n      timeout.current = null;\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(state => _extends({}, state, {\n        rows: getRowsStateFromCache({\n          apiRef,\n          rowCountProp: props.rowCount,\n          loadingProp: props.loading,\n          previousTree: gridRowTreeSelector(apiRef),\n          previousTreeDepths: gridRowTreeDepthsSelector(apiRef)\n        })\n      }));\n      apiRef.current.publishEvent('rowsSet');\n      apiRef.current.forceUpdate();\n    };\n    if (timeout.current) {\n      clearTimeout(timeout.current);\n      timeout.current = null;\n    }\n    apiRef.current.caches.rows = cache;\n    if (!throttle) {\n      run();\n      return;\n    }\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n    if (throttleRemainingTimeMs > 0) {\n      timeout.current = setTimeout(run, throttleRemainingTimeMs);\n      return;\n    }\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const setRows = React.useCallback(rows => {\n    logger.debug(`Updating all rows, new length ${rows.length}`);\n    const cache = createRowsInternalCache({\n      rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    });\n    const prevCache = apiRef.current.caches.rows;\n    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);\n  const updateRows = React.useCallback(updates => {\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\n      throw new Error([\"MUI: You can't update several rows at once in `apiRef.current.updateRows` on the DataGrid.\", 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    const cache = updateCacheWithNewRows({\n      updates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows\n    });\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  const getRowModels = React.useCallback(() => {\n    const dataRows = gridDataRowIdsSelector(apiRef);\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\n    return new Map(dataRows.map(id => {\n      var _idRowsLookup$id;\n      return [id, (_idRowsLookup$id = idRowsLookup[id]) != null ? _idRowsLookup$id : {}];\n    }));\n  }, [apiRef]);\n  const getRowsCount = React.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);\n  const getAllRowIds = React.useCallback(() => gridDataRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => lookup[id], [lookup]);\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\n    const currentNode = apiRef.current.getRowNode(id);\n    if (!currentNode) {\n      throw new Error(`MUI: No row with id #${id} found`);\n    }\n    if (currentNode.type !== 'group') {\n      throw new Error('MUI: Only group nodes can be expanded or collapsed');\n    }\n    const newNode = _extends({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [id]: newNode\n          })\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  const getRowNode = React.useCallback(id => {\n    var _ref;\n    return (_ref = gridRowTreeSelector(apiRef)[id]) != null ? _ref : null;\n  }, [apiRef]);\n  const getRowGroupChildren = React.useCallback(({\n    skipAutoGeneratedRows = true,\n    groupId,\n    applySorting,\n    applyFiltering\n  }) => {\n    const tree = gridRowTreeSelector(apiRef);\n    let children;\n    if (applySorting) {\n      const groupNode = tree[groupId];\n      if (!groupNode) {\n        return [];\n      }\n      const sortedRowIds = gridSortedRowIdsSelector(apiRef);\n      children = [];\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\n        const id = sortedRowIds[index];\n        if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[id])) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);\n    }\n    if (applyFiltering) {\n      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n      children = children.filter(childId => filteredRowsLookup[childId] !== false);\n    }\n    return children;\n  }, [apiRef]);\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\n    const node = apiRef.current.getRowNode(rowId);\n    if (!node) {\n      throw new Error(`MUI: No row with id #${rowId} found`);\n    }\n    if (node.parent !== GRID_ROOT_GROUP_ID) {\n      throw new Error(`MUI: The row reordering do not support reordering of grouped rows yet`);\n    }\n    if (node.type !== 'leaf') {\n      throw new Error(`MUI: The row reordering do not support reordering of footer or grouping rows`);\n    }\n    apiRef.current.setState(state => {\n      const group = gridRowTreeSelector(state, apiRef.current.instanceId)[GRID_ROOT_GROUP_ID];\n      const allRows = group.children;\n      const oldIndex = allRows.findIndex(row => row === rowId);\n      if (oldIndex === -1 || oldIndex === targetIndex) {\n        return state;\n      }\n      logger.debug(`Moving row ${rowId} to index ${targetIndex}`);\n      const updatedRows = [...allRows];\n      updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [GRID_ROOT_GROUP_ID]: _extends({}, group, {\n              children: updatedRows\n            })\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, logger]);\n  const replaceRows = React.useCallback((firstRowToRender, newRows) => {\n    if (props.signature === GridSignature.DataGrid && newRows.length > 1) {\n      throw new Error([\"MUI: You can't replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.\", 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    if (newRows.length === 0) {\n      return;\n    }\n    const treeDepth = gridRowMaximumTreeDepthSelector(apiRef);\n    if (treeDepth > 1) {\n      throw new Error('`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping');\n    }\n    const tree = _extends({}, gridRowTreeSelector(apiRef));\n    const dataRowIdToModelLookup = _extends({}, gridRowsLookupSelector(apiRef));\n    const dataRowIdToIdLookup = _extends({}, gridRowsDataRowIdToIdLookupSelector(apiRef));\n    const rootGroup = tree[GRID_ROOT_GROUP_ID];\n    const rootGroupChildren = [...rootGroup.children];\n    for (let i = 0; i < newRows.length; i += 1) {\n      const rowModel = newRows[i];\n      const rowId = getRowIdFromRowModel(rowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');\n      const [replacedRowId] = rootGroupChildren.splice(firstRowToRender + i, 1, rowId);\n      delete dataRowIdToModelLookup[replacedRowId];\n      delete dataRowIdToIdLookup[replacedRowId];\n      delete tree[replacedRowId];\n      const rowTreeNodeConfig = {\n        id: rowId,\n        depth: 0,\n        parent: GRID_ROOT_GROUP_ID,\n        type: 'leaf',\n        groupingKey: null\n      };\n      dataRowIdToModelLookup[rowId] = rowModel;\n      dataRowIdToIdLookup[rowId] = rowId;\n      tree[rowId] = rowTreeNodeConfig;\n    }\n    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n      children: rootGroupChildren\n    });\n\n    // Removes potential remaining skeleton rows from the dataRowIds.\n    const dataRowIds = rootGroupChildren.filter(childId => tree[childId].type === 'leaf');\n    apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;\n    apiRef.current.caches.rows.dataRowIdToIdLookup = dataRowIdToIdLookup;\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        dataRowIdToModelLookup,\n        dataRowIdToIdLookup,\n        dataRowIds,\n        tree\n      })\n    }));\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.signature, props.getRowId]);\n  const rowApi = {\n    getRow,\n    getRowModels,\n    getRowsCount,\n    getAllRowIds,\n    setRows,\n    updateRows,\n    getRowNode,\n    getRowIndexRelativeToVisibleRows,\n    unstable_replaceRows: replaceRows\n  };\n  const rowProApi = {\n    setRowIndex,\n    setRowChildrenExpansion,\n    getRowGroupChildren\n  };\n\n  /**\n   * EVENTS\n   */\n  const groupRows = React.useCallback(() => {\n    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);\n    let cache;\n    if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = _extends({}, apiRef.current.caches.rows, {\n        updates: {\n          type: 'full',\n          rows: gridDataRowIdsSelector(apiRef)\n        }\n      });\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      });\n    }\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.getActiveStrategy('rowTree') !== gridRowGroupingNameSelector(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n\n  /**\n   * APPLIERS\n   */\n  const applyHydrateRowsProcessor = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const response = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n        tree: gridRowTreeSelector(state, apiRef.current.instanceId),\n        treeDepths: gridRowTreeDepthsSelector(state, apiRef.current.instanceId),\n        dataRowIds: gridDataRowIdsSelector(state, apiRef.current.instanceId),\n        dataRowIdToModelLookup: gridRowsLookupSelector(state, apiRef.current.instanceId),\n        dataRowIdToIdLookup: gridRowsDataRowIdToIdLookupSelector(state, apiRef.current.instanceId)\n      });\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, response, {\n          totalTopLevelRowCount: getTopLevelRowCount({\n            tree: response.tree,\n            rowCountProp: props.rowCount\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.rowCount]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  useGridApiMethod(apiRef, rowApi, 'public');\n  useGridApiMethod(apiRef, rowProApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    return () => {\n      if (timeout.current !== null) {\n        clearTimeout(timeout.current);\n      }\n    };\n  }, []);\n\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    const areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows;\n    const isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;\n    const isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;\n\n    // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n    if (areNewRowsAlreadyInState) {\n      // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`\n      if (!isNewLoadingAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            loading: props.loading\n          })\n        }));\n        apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;\n        apiRef.current.forceUpdate();\n      }\n      if (!isNewRowCountAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),\n            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)\n          })\n        }));\n        apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;\n        apiRef.current.forceUpdate();\n      }\n      return;\n    }\n    logger.debug(`Updating all rows, new length ${props.rows.length}`);\n    throttledRowsChange({\n      cache: createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      }),\n      throttle: false\n    });\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}