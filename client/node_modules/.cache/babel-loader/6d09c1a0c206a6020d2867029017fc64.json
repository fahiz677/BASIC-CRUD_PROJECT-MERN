{"ast":null,"code":"import { isLeaf } from '../../../models/gridColumnGrouping';\nimport { isDeepEqual } from '../../../utils/utils'; // This is the recurrence function that help writing `unwrapGroupingColumnModel()`\n\nconst recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplete) => {\n  if (isLeaf(columnGroupNode)) {\n    if (unwrappedGroupingModelToComplete[columnGroupNode.field] !== undefined) {\n      throw new Error([`MUI: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplete[columnGroupNode.field].join(' > ')}`, `- ${parents.join(' > ')}`].join('\\n'));\n    }\n\n    unwrappedGroupingModelToComplete[columnGroupNode.field] = parents;\n    return;\n  }\n\n  const {\n    groupId,\n    children\n  } = columnGroupNode;\n  children.forEach(child => {\n    recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplete);\n  });\n};\n/**\n * This is a function that provide for each column the array of its parents.\n * Parents are ordered from the root to the leaf.\n * @param columnGroupingModel The model such as provided in DataGrid props\n * @returns An object `{[field]: groupIds}` where `groupIds` is the parents of the column `field`\n */\n\n\nexport const unwrapGroupingColumnModel = columnGroupingModel => {\n  if (!columnGroupingModel) {\n    return {};\n  }\n\n  const unwrappedSubTree = {};\n  columnGroupingModel.forEach(columnGroupNode => {\n    recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);\n  });\n  return unwrappedSubTree;\n};\nexport const getColumnGroupsHeaderStructure = (orderedColumns, unwrappedGroupingModel) => {\n  const getParents = field => {\n    var _unwrappedGroupingMod;\n\n    return (_unwrappedGroupingMod = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod : [];\n  };\n\n  const groupingHeaderStructure = [];\n  const maxDepth = Math.max(...orderedColumns.map(field => getParents(field).length));\n\n  const haveSameParents = (field1, field2, depth) => isDeepEqual(getParents(field1).slice(0, depth + 1), getParents(field2).slice(0, depth + 1));\n\n  for (let depth = 0; depth < maxDepth; depth += 1) {\n    const depthStructure = orderedColumns.reduce((structure, newField) => {\n      var _getParents$depth;\n\n      const groupId = (_getParents$depth = getParents(newField)[depth]) != null ? _getParents$depth : null;\n\n      if (structure.length === 0) {\n        return [{\n          columnFields: [newField],\n          groupId\n        }];\n      }\n\n      const lastGroup = structure[structure.length - 1];\n      const prevField = lastGroup.columnFields[lastGroup.columnFields.length - 1];\n      const prevGroupId = lastGroup.groupId;\n\n      if (prevGroupId !== groupId || !haveSameParents(prevField, newField, depth)) {\n        // It's a new group\n        return [...structure, {\n          columnFields: [newField],\n          groupId\n        }];\n      } // It extends the previous group\n\n\n      return [...structure.slice(0, structure.length - 1), {\n        columnFields: [...lastGroup.columnFields, newField],\n        groupId\n      }];\n    }, []);\n    groupingHeaderStructure.push(depthStructure);\n  }\n\n  return groupingHeaderStructure;\n};","map":{"version":3,"names":["isLeaf","isDeepEqual","recurrentUnwrapGroupingColumnModel","columnGroupNode","parents","unwrappedGroupingModelToComplete","field","undefined","Error","join","groupId","children","forEach","child","unwrapGroupingColumnModel","columnGroupingModel","unwrappedSubTree","getColumnGroupsHeaderStructure","orderedColumns","unwrappedGroupingModel","getParents","_unwrappedGroupingMod","groupingHeaderStructure","maxDepth","Math","max","map","length","haveSameParents","field1","field2","depth","slice","depthStructure","reduce","structure","newField","_getParents$depth","columnFields","lastGroup","prevField","prevGroupId","push"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsUtils.js"],"sourcesContent":["import { isLeaf } from '../../../models/gridColumnGrouping';\nimport { isDeepEqual } from '../../../utils/utils';\n// This is the recurrence function that help writing `unwrapGroupingColumnModel()`\nconst recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplete) => {\n  if (isLeaf(columnGroupNode)) {\n    if (unwrappedGroupingModelToComplete[columnGroupNode.field] !== undefined) {\n      throw new Error([`MUI: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplete[columnGroupNode.field].join(' > ')}`, `- ${parents.join(' > ')}`].join('\\n'));\n    }\n    unwrappedGroupingModelToComplete[columnGroupNode.field] = parents;\n    return;\n  }\n  const {\n    groupId,\n    children\n  } = columnGroupNode;\n  children.forEach(child => {\n    recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplete);\n  });\n};\n\n/**\n * This is a function that provide for each column the array of its parents.\n * Parents are ordered from the root to the leaf.\n * @param columnGroupingModel The model such as provided in DataGrid props\n * @returns An object `{[field]: groupIds}` where `groupIds` is the parents of the column `field`\n */\nexport const unwrapGroupingColumnModel = columnGroupingModel => {\n  if (!columnGroupingModel) {\n    return {};\n  }\n  const unwrappedSubTree = {};\n  columnGroupingModel.forEach(columnGroupNode => {\n    recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);\n  });\n  return unwrappedSubTree;\n};\nexport const getColumnGroupsHeaderStructure = (orderedColumns, unwrappedGroupingModel) => {\n  const getParents = field => {\n    var _unwrappedGroupingMod;\n    return (_unwrappedGroupingMod = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod : [];\n  };\n  const groupingHeaderStructure = [];\n  const maxDepth = Math.max(...orderedColumns.map(field => getParents(field).length));\n  const haveSameParents = (field1, field2, depth) => isDeepEqual(getParents(field1).slice(0, depth + 1), getParents(field2).slice(0, depth + 1));\n  for (let depth = 0; depth < maxDepth; depth += 1) {\n    const depthStructure = orderedColumns.reduce((structure, newField) => {\n      var _getParents$depth;\n      const groupId = (_getParents$depth = getParents(newField)[depth]) != null ? _getParents$depth : null;\n      if (structure.length === 0) {\n        return [{\n          columnFields: [newField],\n          groupId\n        }];\n      }\n      const lastGroup = structure[structure.length - 1];\n      const prevField = lastGroup.columnFields[lastGroup.columnFields.length - 1];\n      const prevGroupId = lastGroup.groupId;\n      if (prevGroupId !== groupId || !haveSameParents(prevField, newField, depth)) {\n        // It's a new group\n        return [...structure, {\n          columnFields: [newField],\n          groupId\n        }];\n      }\n\n      // It extends the previous group\n      return [...structure.slice(0, structure.length - 1), {\n        columnFields: [...lastGroup.columnFields, newField],\n        groupId\n      }];\n    }, []);\n    groupingHeaderStructure.push(depthStructure);\n  }\n  return groupingHeaderStructure;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}