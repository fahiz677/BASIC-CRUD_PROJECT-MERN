{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"style\"],\n      _excluded2 = [\"style\"],\n      _excluded3 = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\"; // Uses binary search to avoid looping through all possible positions\n\nexport function binarySearch(offset, positions) {\n  let sliceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let sliceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : positions.length;\n\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\n\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\n\nexport const getRenderableIndexes = _ref4 => {\n  let {\n    firstIndex,\n    lastIndex,\n    buffer,\n    minFirstIndex,\n    maxLastIndex\n  } = _ref4;\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\n\nconst areRenderContextsEqual = (context1, context2) => {\n  if (context1 === context2) {\n    return true;\n  }\n\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\n\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const theme = useTheme();\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const rowStyleCache = React.useRef({});\n  const prevGetRowProps = React.useRef();\n  const prevRootRowStyle = React.useRef();\n  const getRenderedColumnsRef = React.useRef(defaultMemoize((columns, firstColumnToRender, lastColumnToRender) => {\n    return columns.slice(firstColumnToRender, lastColumnToRender);\n  }));\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    } // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current; // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);\n    }\n\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(Math.abs(left), columnPositions);\n      lastColumnIndex = binarySearch(Math.abs(left) + containerDimensions.width, columnPositions);\n    }\n\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(params => {\n    setContainerDimensions({\n      width: params.width,\n      height: params.height\n    });\n  }, []);\n  useGridApiEventHandler(apiRef, 'debouncedResize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const direction = theme.direction === 'ltr' ? 1 : -1;\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('scrollPositionChange', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (!prevRenderContext.current || scrollTop < 0) {\n      return;\n    }\n\n    if (theme.direction === 'ltr') {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n\n    if (theme.direction === 'rtl') {\n      if (scrollLeft > 0) {\n        return;\n      }\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n\n  const getRows = function () {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      renderContext\n    };\n\n    var _rootProps$slotProps;\n\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender);\n\n    const _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {},\n          {\n      style: rootRowStyle\n    } = _ref,\n          rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    const invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;\n\n    if (invalidatesCachedRowStyle) {\n      rowStyleCache.current = {};\n    }\n\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n\n      const focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;\n      let tabbableCell = null;\n\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n\n      const _ref2 = typeof getRowProps === 'function' && getRowProps(id, model) || {},\n            {\n        style: rowStyle\n      } = _ref2,\n            rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n\n      if (!rowStyleCache.current[id]) {\n        const style = _extends({}, rowStyle, rootRowStyle);\n\n        rowStyleCache.current[id] = style;\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        focusedCell: focusedCell,\n        tabbableCell: tabbableCell,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, rowProps, rootRowProps, {\n        style: rowStyleCache.current[id]\n      }), id));\n    }\n\n    prevGetRowProps.current = getRowProps;\n    prevRootRowStyle.current = rootRowStyle;\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth > containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.register('private', {\n    getRenderContext\n  });\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: function () {\n      let _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      let {\n        style = {}\n      } = _ref3,\n          other = _objectWithoutPropertiesLoose(_ref3, _excluded3);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: function () {\n      let {\n        style = {}\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        style: _extends({}, style, contentSize)\n      };\n    },\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","_excluded3","React","ReactDOM","unstable_useForkRef","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","useTheme","defaultMemoize","useGridPrivateApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridFocusCellSelector","gridTabIndexCellSelector","useGridVisibleRows","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","getMinimalContentHeight","jsx","_jsx","binarySearch","offset","positions","sliceStart","sliceEnd","length","pivot","Math","floor","itemOffset","exponentialSearch","index","interval","abs","min","getRenderableIndexes","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","areRenderContextsEqual","context1","context2","firstRowIndex","lastRowIndex","firstColumnIndex","lastColumnIndex","useGridVirtualScroller","props","_currentPage$range3","_currentPage$range4","apiRef","rootProps","visibleColumns","ref","disableVirtualization","onRenderZonePositioning","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","getRowProps","theme","columnPositions","columnsTotalWidth","cellFocus","cellTabIndex","rowsMeta","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","renderContext","setRenderContext","useState","prevRenderContext","scrollPosition","top","left","containerDimensions","setContainerDimensions","width","height","prevTotalWidth","rowStyleCache","prevGetRowProps","prevRootRowStyle","getRenderedColumnsRef","columns","firstColumnToRender","lastColumnToRender","slice","getNearestIndexToRender","useCallback","_currentPage$range","_currentPage$range2","lastMeasuredIndexRelativeToAllRows","current","getLastMeasuredRowIndex","allRowsMeasured","Infinity","range","lastMeasuredIndexRelativeToCurrentPage","computeRenderContext","rows","autoHeight","hasRowWithAutoHeight","firstRowToRender","lastRowToRender","rowBuffer","i","row","rowHasAutoHeight","id","style","transform","scrollLeft","scrollTop","clientWidth","clientHeight","currentPageTotalHeight","handleResize","params","updateRenderZonePosition","nextRenderContext","initialFirstColumnToRender","columnBuffer","visibleRows","direction","state","updateRenderContext","publishEvent","initialRenderContext","handleScroll","event","currentTarget","topRowsScrolledSincePreviousRender","bottomRowsScrolledSincePreviousRender","topColumnsScrolledSincePreviousRender","bottomColumnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","flushSync","handleWheel","handleTouchMove","getRows","_rootProps$slotProps","minFirstColumn","maxLastColumn","availableSpace","rowIndexOffset","position","renderedRows","forEach","push","calculateColSpan","rowId","renderedColumns","_ref","slotProps","rootRowStyle","rootRowProps","invalidatesCachedRowStyle","_currentPage$range5","model","lastVisibleRowIndex","baseRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","focusedCell","field","tabbableCell","cellParams","getCellParams","cellMode","_ref2","rowStyle","rowProps","slots","rowHeight","selected","containerWidth","isLastVisible","needsHorizontalScrollbar","contentSize","useMemo","max","shouldExtendContent","size","minHeight","useEffect","rootStyle","overflowX","overflowY","getRenderContext","register","getRootProps","_ref3","other","onScroll","onWheel","onTouchMove","getContentProps","getRenderZoneProps"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"style\"],\n  _excluded2 = [\"style\"],\n  _excluded3 = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Uses binary search to avoid looping through all possible positions\nexport function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nconst areRenderContextsEqual = (context1, context2) => {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const theme = useTheme();\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const rowStyleCache = React.useRef({});\n  const prevGetRowProps = React.useRef();\n  const prevRootRowStyle = React.useRef();\n  const getRenderedColumnsRef = React.useRef(defaultMemoize((columns, firstColumnToRender, lastColumnToRender) => {\n    return columns.slice(firstColumnToRender, lastColumnToRender);\n  }));\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    }\n\n    // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n\n    // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);\n    }\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(Math.abs(left), columnPositions);\n      lastColumnIndex = binarySearch(Math.abs(left) + containerDimensions.width, columnPositions);\n    }\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(params => {\n    setContainerDimensions({\n      width: params.width,\n      height: params.height\n    });\n  }, []);\n  useGridApiEventHandler(apiRef, 'debouncedResize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const direction = theme.direction === 'ltr' ? 1 : -1;\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('scrollPositionChange', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft;\n\n    // On iOS and macOS, negative offsets are possible when swiping past the start\n    if (!prevRenderContext.current || scrollTop < 0) {\n      return;\n    }\n    if (theme.direction === 'ltr') {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n    if (theme.direction === 'rtl') {\n      if (scrollLeft > 0) {\n        return;\n      }\n    }\n\n    // When virtualization is disabled, the context never changes during scroll\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n  const getRows = (params = {\n    renderContext\n  }) => {\n    var _rootProps$slotProps;\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender);\n    const _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {},\n      {\n        style: rootRowStyle\n      } = _ref,\n      rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;\n    if (invalidatesCachedRowStyle) {\n      rowStyleCache.current = {};\n    }\n    const rows = [];\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5;\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      const focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;\n      let tabbableCell = null;\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n      const _ref2 = typeof getRowProps === 'function' && getRowProps(id, model) || {},\n        {\n          style: rowStyle\n        } = _ref2,\n        rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n      if (!rowStyleCache.current[id]) {\n        const style = _extends({}, rowStyle, rootRowStyle);\n        rowStyleCache.current[id] = style;\n      }\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        focusedCell: focusedCell,\n        tabbableCell: tabbableCell,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, rowProps, rootRowProps, {\n        style: rowStyleCache.current[id]\n      }), id));\n    }\n    prevGetRowProps.current = getRowProps;\n    prevRootRowStyle.current = rootRowStyle;\n    return rows;\n  };\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth > containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.register('private', {\n    getRenderContext\n  });\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (_ref3 = {}) => {\n      let {\n          style = {}\n        } = _ref3,\n        other = _objectWithoutPropertiesLoose(_ref3, _excluded3);\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: ({\n      style = {}\n    } = {}) => ({\n      style: _extends({}, style, contentSize)\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}