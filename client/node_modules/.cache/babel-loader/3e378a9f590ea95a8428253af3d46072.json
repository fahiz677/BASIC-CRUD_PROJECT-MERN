{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { styled } from '@mui/system';\nimport { isOverflown } from '../../utils/domUtils';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['columnHeaderTitle']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridColumnHeaderTitleRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderTitle',\n  overridesResolver: (props, styles) => styles.columnHeaderTitle\n})({\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap',\n  fontWeight: 'var(--unstable_DataGrid-headWeight)'\n});\nconst ColumnHeaderInnerTitle = /*#__PURE__*/React.forwardRef(function ColumnHeaderInnerTitle(props, ref) {\n  const {\n    className\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const rootProps = useGridRootProps();\n  const classes = useUtilityClasses(rootProps);\n  return /*#__PURE__*/_jsx(GridColumnHeaderTitleRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: rootProps\n  }, other));\n}); // No React.memo here as if we display the sort icon, we need to recalculate the isOver\n\nfunction GridColumnHeaderTitle(props) {\n  var _rootProps$slotProps;\n\n  const {\n    label,\n    description,\n    columnWidth\n  } = props;\n  const rootProps = useGridRootProps();\n  const titleRef = React.useRef(null);\n  const [tooltip, setTooltip] = React.useState('');\n  React.useEffect(() => {\n    if (!description && titleRef && titleRef.current) {\n      const isOver = isOverflown(titleRef.current);\n\n      if (isOver) {\n        setTooltip(label);\n      } else {\n        setTooltip('');\n      }\n    }\n  }, [titleRef, columnWidth, description, label]);\n  return /*#__PURE__*/_jsx(rootProps.slots.baseTooltip, _extends({\n    title: description || tooltip\n  }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTooltip, {\n    children: /*#__PURE__*/_jsx(ColumnHeaderInnerTitle, {\n      ref: titleRef,\n      children: label\n    })\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridColumnHeaderTitle.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  columnWidth: PropTypes.number.isRequired,\n  description: PropTypes.node,\n  label: PropTypes.string.isRequired\n} : void 0;\nexport { GridColumnHeaderTitle };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_composeClasses","composeClasses","styled","isOverflown","getDataGridUtilityClass","useGridRootProps","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","GridColumnHeaderTitleRoot","name","slot","overridesResolver","props","styles","columnHeaderTitle","textOverflow","overflow","whiteSpace","fontWeight","ColumnHeaderInnerTitle","forwardRef","ref","className","other","rootProps","GridColumnHeaderTitle","_rootProps$slotProps","label","description","columnWidth","titleRef","useRef","tooltip","setTooltip","useState","useEffect","current","isOver","baseTooltip","title","slotProps","children","process","env","NODE_ENV","propTypes","number","isRequired","node","string"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderTitle.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { styled } from '@mui/system';\nimport { isOverflown } from '../../utils/domUtils';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['columnHeaderTitle']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nconst GridColumnHeaderTitleRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderTitle',\n  overridesResolver: (props, styles) => styles.columnHeaderTitle\n})({\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap',\n  fontWeight: 'var(--unstable_DataGrid-headWeight)'\n});\nconst ColumnHeaderInnerTitle = /*#__PURE__*/React.forwardRef(function ColumnHeaderInnerTitle(props, ref) {\n  const {\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const rootProps = useGridRootProps();\n  const classes = useUtilityClasses(rootProps);\n  return /*#__PURE__*/_jsx(GridColumnHeaderTitleRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: rootProps\n  }, other));\n});\n// No React.memo here as if we display the sort icon, we need to recalculate the isOver\nfunction GridColumnHeaderTitle(props) {\n  var _rootProps$slotProps;\n  const {\n    label,\n    description,\n    columnWidth\n  } = props;\n  const rootProps = useGridRootProps();\n  const titleRef = React.useRef(null);\n  const [tooltip, setTooltip] = React.useState('');\n  React.useEffect(() => {\n    if (!description && titleRef && titleRef.current) {\n      const isOver = isOverflown(titleRef.current);\n      if (isOver) {\n        setTooltip(label);\n      } else {\n        setTooltip('');\n      }\n    }\n  }, [titleRef, columnWidth, description, label]);\n  return /*#__PURE__*/_jsx(rootProps.slots.baseTooltip, _extends({\n    title: description || tooltip\n  }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTooltip, {\n    children: /*#__PURE__*/_jsx(ColumnHeaderInnerTitle, {\n      ref: titleRef,\n      children: label\n    })\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridColumnHeaderTitle.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  columnWidth: PropTypes.number.isRequired,\n  description: PropTypes.node,\n  label: PropTypes.string.isRequired\n} : void 0;\nexport { GridColumnHeaderTitle };"],"mappings":"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"},"metadata":{},"sourceType":"module"}