{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_debounce as debounce, unstable_capitalize as capitalize } from '@mui/utils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterModelSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortModelSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from '../../../DataGrid/useDataGridProps';\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\nlet warnedOnceInvalidRowHeight = false;\n\nconst getValidRowHeight = (rowHeightProp, defaultRowHeight, warningMessage) => {\n  if (typeof rowHeightProp === 'number' && rowHeightProp > 0) {\n    return rowHeightProp;\n  }\n\n  if (process.env.NODE_ENV !== 'production' && !warnedOnceInvalidRowHeight && typeof rowHeightProp !== 'undefined' && rowHeightProp !== null) {\n    console.warn(warningMessage);\n    warnedOnceInvalidRowHeight = true;\n  }\n\n  return defaultRowHeight;\n};\n\nconst rowHeightWarning = [`MUI: The \\`rowHeight\\` prop should be a number greater than 0.`, `The default value will be used instead.`].join('\\n');\nconst getRowHeightWarning = [`MUI: The \\`getRowHeight\\` prop should return a number greater than 0 or 'auto'.`, `The default value will be used instead.`].join('\\n');\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\n\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = props;\n  const rowsHeightLookup = React.useRef({}); // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const filterModel = useGridSelector(apiRef, gridFilterModelSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  const rowHeight = Math.floor(validRowHeight * densityFactor);\n  const hydrateRowsMeta = React.useCallback(() => {\n    var _pinnedRows$top, _pinnedRows$bottom;\n\n    hasRowWithAutoHeight.current = false;\n\n    const calculateRowProcessedSizes = row => {\n      if (!rowsHeightLookup.current[row.id]) {\n        rowsHeightLookup.current[row.id] = {\n          sizes: {\n            baseCenter: rowHeight\n          },\n          isResized: false,\n          autoHeight: false,\n          needsFirstMeasurement: true // Assume all rows will need to be measured by default\n\n        };\n      }\n\n      const {\n        isResized,\n        needsFirstMeasurement,\n        sizes\n      } = rowsHeightLookup.current[row.id];\n      let baseRowHeight = typeof rowHeight === 'number' && rowHeight > 0 ? rowHeight : 52;\n      const existingBaseRowHeight = sizes.baseCenter;\n\n      if (isResized) {\n        // Do not recalculate resized row height and use the value from the lookup\n        baseRowHeight = existingBaseRowHeight;\n      } else if (getRowHeightProp) {\n        const rowHeightFromUser = getRowHeightProp(_extends({}, row, {\n          densityFactor\n        }));\n\n        if (rowHeightFromUser === 'auto') {\n          if (needsFirstMeasurement) {\n            const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\n              densityFactor\n            })) : rowHeight; // If the row was not measured yet use the estimated row height\n\n            baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeight;\n          } else {\n            baseRowHeight = existingBaseRowHeight;\n          }\n\n          hasRowWithAutoHeight.current = true;\n          rowsHeightLookup.current[row.id].autoHeight = true;\n        } else {\n          // Default back to base rowHeight if getRowHeight returns invalid value.\n          baseRowHeight = getValidRowHeight(rowHeightFromUser, rowHeight, getRowHeightWarning);\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n          rowsHeightLookup.current[row.id].autoHeight = false;\n        }\n      } else {\n        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n      }\n\n      const existingBaseSizes = Object.entries(sizes).reduce((acc, _ref) => {\n        let [key, size] = _ref;\n\n        if (/^base[A-Z]/.test(key)) {\n          acc[key] = size;\n        }\n\n        return acc;\n      }, {}); // We use an object to make simple to check if a height is already added or not\n\n      const initialHeights = _extends({}, existingBaseSizes, {\n        baseCenter: baseRowHeight\n      });\n\n      if (getRowSpacing) {\n        var _spacing$top, _spacing$bottom;\n\n        const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n        const spacing = getRowSpacing(_extends({}, row, {\n          isFirstVisible: indexRelativeToCurrentPage === 0,\n          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n          indexRelativeToCurrentPage\n        }));\n        initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n        initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n      }\n\n      const processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n      rowsHeightLookup.current[row.id].sizes = processedSizes;\n      return processedSizes;\n    };\n\n    const positions = [];\n    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n      positions.push(acc);\n      let maximumBaseSize = 0;\n      let otherSizes = 0;\n      const processedSizes = calculateRowProcessedSizes(row);\n      Object.entries(processedSizes).forEach(_ref2 => {\n        let [size, value] = _ref2;\n\n        if (/^base[A-Z]/.test(size)) {\n          maximumBaseSize = value > maximumBaseSize ? value : maximumBaseSize;\n        } else {\n          otherSizes += value;\n        }\n      });\n      return acc + maximumBaseSize + otherSizes;\n    }, 0);\n    pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, rowHeight, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows, densityFactor]);\n  const getRowHeight = React.useCallback(rowId => {\n    const height = rowsHeightLookup.current[rowId];\n    return height ? height.sizes.baseCenter : rowHeight;\n  }, [rowHeight]);\n\n  const getRowInternalSizes = rowId => {\n    var _rowsHeightLookup$cur;\n\n    return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;\n  };\n\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id].sizes.baseCenter = height;\n    rowsHeightLookup.current[id].isResized = true;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  const debouncedHydrateRowsMeta = React.useMemo(() => debounce(hydrateRowsMeta), [hydrateRowsMeta]);\n  const storeMeasuredRowHeight = React.useCallback((id, height, position) => {\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\n      return;\n    } // Only trigger hydration if the value is different, otherwise we trigger a loop\n\n\n    const needsHydration = rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] !== height;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] = height;\n\n    if (needsHydration) {\n      debouncedHydrateRowsMeta();\n    }\n  }, [debouncedHydrateRowsMeta]);\n  const rowHasAutoHeight = React.useCallback(id => {\n    var _rowsHeightLookup$cur2;\n\n    return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;\n  }, []);\n  const getLastMeasuredRowIndex = React.useCallback(() => {\n    return lastMeasuredRowIndex.current;\n  }, []);\n  const setLastMeasuredRowIndex = React.useCallback(index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  }, []);\n  const resetRowHeights = React.useCallback(() => {\n    rowsHeightLookup.current = {};\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeight, filterModel, paginationState, sortModel, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  const rowsMetaApi = {\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_getRowHeight: getRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight,\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,\n    resetRowHeights\n  };\n  const rowsMetaPrivateApi = {\n    getLastMeasuredRowIndex,\n    rowHasAutoHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'public');\n  useGridApiMethod(apiRef, rowsMetaPrivateApi, 'private');\n};","map":{"version":3,"names":["_extends","React","unstable_debounce","debounce","unstable_capitalize","capitalize","useGridVisibleRows","useGridApiMethod","useGridSelector","gridDensityFactorSelector","gridFilterModelSelector","gridPaginationSelector","gridSortModelSelector","useGridRegisterPipeApplier","gridPinnedRowsSelector","DATA_GRID_PROPS_DEFAULT_VALUES","rowsMetaStateInitializer","state","rowsMeta","currentPageTotalHeight","positions","warnedOnceInvalidRowHeight","getValidRowHeight","rowHeightProp","defaultRowHeight","warningMessage","process","env","NODE_ENV","console","warn","rowHeightWarning","join","getRowHeightWarning","useGridRowsMeta","apiRef","props","getRowHeight","getRowHeightProp","getRowSpacing","getEstimatedRowHeight","rowsHeightLookup","useRef","lastMeasuredRowIndex","hasRowWithAutoHeight","densityFactor","filterModel","paginationState","sortModel","currentPage","pinnedRows","validRowHeight","rowHeight","Math","floor","hydrateRowsMeta","useCallback","_pinnedRows$top","_pinnedRows$bottom","current","calculateRowProcessedSizes","row","id","sizes","baseCenter","isResized","autoHeight","needsFirstMeasurement","baseRowHeight","existingBaseRowHeight","rowHeightFromUser","estimatedRowHeight","existingBaseSizes","Object","entries","reduce","acc","key","size","test","initialHeights","_spacing$top","_spacing$bottom","indexRelativeToCurrentPage","getRowIndexRelativeToVisibleRows","spacing","isFirstVisible","isLastVisible","rows","length","spacingTop","top","spacingBottom","bottom","processedSizes","unstable_applyPipeProcessors","push","maximumBaseSize","otherSizes","forEach","value","setState","Infinity","forceUpdate","rowId","height","getRowInternalSizes","_rowsHeightLookup$cur","setRowHeight","debouncedHydrateRowsMeta","useMemo","storeMeasuredRowHeight","position","needsHydration","rowHasAutoHeight","_rowsHeightLookup$cur2","getLastMeasuredRowIndex","setLastMeasuredRowIndex","index","resetRowHeights","useEffect","rowsMetaApi","unstable_setLastMeasuredRowIndex","unstable_getRowHeight","unstable_getRowInternalSizes","unstable_setRowHeight","unstable_storeRowHeightMeasurement","rowsMetaPrivateApi"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_debounce as debounce, unstable_capitalize as capitalize } from '@mui/utils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterModelSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortModelSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from '../../../DataGrid/useDataGridProps';\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\nlet warnedOnceInvalidRowHeight = false;\nconst getValidRowHeight = (rowHeightProp, defaultRowHeight, warningMessage) => {\n  if (typeof rowHeightProp === 'number' && rowHeightProp > 0) {\n    return rowHeightProp;\n  }\n  if (process.env.NODE_ENV !== 'production' && !warnedOnceInvalidRowHeight && typeof rowHeightProp !== 'undefined' && rowHeightProp !== null) {\n    console.warn(warningMessage);\n    warnedOnceInvalidRowHeight = true;\n  }\n  return defaultRowHeight;\n};\nconst rowHeightWarning = [`MUI: The \\`rowHeight\\` prop should be a number greater than 0.`, `The default value will be used instead.`].join('\\n');\nconst getRowHeightWarning = [`MUI: The \\`getRowHeight\\` prop should return a number greater than 0 or 'auto'.`, `The default value will be used instead.`].join('\\n');\n\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = props;\n  const rowsHeightLookup = React.useRef({});\n\n  // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const filterModel = useGridSelector(apiRef, gridFilterModelSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  const rowHeight = Math.floor(validRowHeight * densityFactor);\n  const hydrateRowsMeta = React.useCallback(() => {\n    var _pinnedRows$top, _pinnedRows$bottom;\n    hasRowWithAutoHeight.current = false;\n    const calculateRowProcessedSizes = row => {\n      if (!rowsHeightLookup.current[row.id]) {\n        rowsHeightLookup.current[row.id] = {\n          sizes: {\n            baseCenter: rowHeight\n          },\n          isResized: false,\n          autoHeight: false,\n          needsFirstMeasurement: true // Assume all rows will need to be measured by default\n        };\n      }\n\n      const {\n        isResized,\n        needsFirstMeasurement,\n        sizes\n      } = rowsHeightLookup.current[row.id];\n      let baseRowHeight = typeof rowHeight === 'number' && rowHeight > 0 ? rowHeight : 52;\n      const existingBaseRowHeight = sizes.baseCenter;\n      if (isResized) {\n        // Do not recalculate resized row height and use the value from the lookup\n        baseRowHeight = existingBaseRowHeight;\n      } else if (getRowHeightProp) {\n        const rowHeightFromUser = getRowHeightProp(_extends({}, row, {\n          densityFactor\n        }));\n        if (rowHeightFromUser === 'auto') {\n          if (needsFirstMeasurement) {\n            const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\n              densityFactor\n            })) : rowHeight;\n\n            // If the row was not measured yet use the estimated row height\n            baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeight;\n          } else {\n            baseRowHeight = existingBaseRowHeight;\n          }\n          hasRowWithAutoHeight.current = true;\n          rowsHeightLookup.current[row.id].autoHeight = true;\n        } else {\n          // Default back to base rowHeight if getRowHeight returns invalid value.\n          baseRowHeight = getValidRowHeight(rowHeightFromUser, rowHeight, getRowHeightWarning);\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n          rowsHeightLookup.current[row.id].autoHeight = false;\n        }\n      } else {\n        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n      }\n      const existingBaseSizes = Object.entries(sizes).reduce((acc, [key, size]) => {\n        if (/^base[A-Z]/.test(key)) {\n          acc[key] = size;\n        }\n        return acc;\n      }, {});\n\n      // We use an object to make simple to check if a height is already added or not\n      const initialHeights = _extends({}, existingBaseSizes, {\n        baseCenter: baseRowHeight\n      });\n      if (getRowSpacing) {\n        var _spacing$top, _spacing$bottom;\n        const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n        const spacing = getRowSpacing(_extends({}, row, {\n          isFirstVisible: indexRelativeToCurrentPage === 0,\n          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n          indexRelativeToCurrentPage\n        }));\n        initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n        initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n      }\n      const processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n      rowsHeightLookup.current[row.id].sizes = processedSizes;\n      return processedSizes;\n    };\n    const positions = [];\n    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n      positions.push(acc);\n      let maximumBaseSize = 0;\n      let otherSizes = 0;\n      const processedSizes = calculateRowProcessedSizes(row);\n      Object.entries(processedSizes).forEach(([size, value]) => {\n        if (/^base[A-Z]/.test(size)) {\n          maximumBaseSize = value > maximumBaseSize ? value : maximumBaseSize;\n        } else {\n          otherSizes += value;\n        }\n      });\n      return acc + maximumBaseSize + otherSizes;\n    }, 0);\n    pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, rowHeight, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows, densityFactor]);\n  const getRowHeight = React.useCallback(rowId => {\n    const height = rowsHeightLookup.current[rowId];\n    return height ? height.sizes.baseCenter : rowHeight;\n  }, [rowHeight]);\n  const getRowInternalSizes = rowId => {\n    var _rowsHeightLookup$cur;\n    return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;\n  };\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id].sizes.baseCenter = height;\n    rowsHeightLookup.current[id].isResized = true;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  const debouncedHydrateRowsMeta = React.useMemo(() => debounce(hydrateRowsMeta), [hydrateRowsMeta]);\n  const storeMeasuredRowHeight = React.useCallback((id, height, position) => {\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\n      return;\n    }\n\n    // Only trigger hydration if the value is different, otherwise we trigger a loop\n    const needsHydration = rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] !== height;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] = height;\n    if (needsHydration) {\n      debouncedHydrateRowsMeta();\n    }\n  }, [debouncedHydrateRowsMeta]);\n  const rowHasAutoHeight = React.useCallback(id => {\n    var _rowsHeightLookup$cur2;\n    return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;\n  }, []);\n  const getLastMeasuredRowIndex = React.useCallback(() => {\n    return lastMeasuredRowIndex.current;\n  }, []);\n  const setLastMeasuredRowIndex = React.useCallback(index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  }, []);\n  const resetRowHeights = React.useCallback(() => {\n    rowsHeightLookup.current = {};\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n\n  // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeight, filterModel, paginationState, sortModel, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  const rowsMetaApi = {\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_getRowHeight: getRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight,\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,\n    resetRowHeights\n  };\n  const rowsMetaPrivateApi = {\n    getLastMeasuredRowIndex,\n    rowHasAutoHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'public');\n  useGridApiMethod(apiRef, rowsMetaPrivateApi, 'private');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}