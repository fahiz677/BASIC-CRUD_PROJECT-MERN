{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { gridColumnMenuSelector } from './columnMenuSelector';\nimport { gridColumnLookupSelector, gridColumnVisibilityModelSelector, gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nexport const columnMenuStateInitializer = state => _extends({}, state, {\n  columnMenu: {\n    open: false\n  }\n});\n/**\n * @requires useGridColumnResize (event)\n * @requires useGridInfiniteLoader (event)\n */\n\nexport const useGridColumnMenu = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridColumnMenu');\n  /**\n   * API METHODS\n   */\n\n  const showColumnMenu = React.useCallback(field => {\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (state.columnMenu.open && state.columnMenu.field === field) {\n        return state;\n      }\n\n      logger.debug('Opening Column Menu');\n      return _extends({}, state, {\n        columnMenu: {\n          open: true,\n          field\n        }\n      });\n    });\n\n    if (shouldUpdate) {\n      apiRef.current.hidePreferences();\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const hideColumnMenu = React.useCallback(() => {\n    const columnMenuState = gridColumnMenuSelector(apiRef.current.state);\n\n    if (columnMenuState.field) {\n      const columnLookup = gridColumnLookupSelector(apiRef);\n      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n      const orderedFields = gridColumnFieldsSelector(apiRef);\n      let fieldToFocus = columnMenuState.field; // If the column was removed from the grid, we need to find the closest visible field\n\n      if (!columnLookup[fieldToFocus]) {\n        fieldToFocus = orderedFields[0];\n      } // If the field to focus is hidden, we need to find the closest visible field\n\n\n      if (columnVisibilityModel[fieldToFocus] === false) {\n        // contains visible column fields + the field that was just hidden\n        const visibleOrderedFields = orderedFields.filter(field => {\n          if (field === fieldToFocus) {\n            return true;\n          }\n\n          return columnVisibilityModel[field] !== false;\n        });\n        const fieldIndex = visibleOrderedFields.indexOf(fieldToFocus);\n        fieldToFocus = visibleOrderedFields[fieldIndex + 1] || visibleOrderedFields[fieldIndex - 1];\n      }\n\n      apiRef.current.setColumnHeaderFocus(fieldToFocus);\n    }\n\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (!state.columnMenu.open && state.columnMenu.field === undefined) {\n        return state;\n      }\n\n      logger.debug('Hiding Column Menu');\n      return _extends({}, state, {\n        columnMenu: _extends({}, state.columnMenu, {\n          open: false,\n          field: undefined\n        })\n      });\n    });\n\n    if (shouldUpdate) {\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const toggleColumnMenu = React.useCallback(field => {\n    logger.debug('Toggle Column Menu');\n    const columnMenu = gridColumnMenuSelector(apiRef.current.state);\n\n    if (!columnMenu.open || columnMenu.field !== field) {\n      showColumnMenu(field);\n    } else {\n      hideColumnMenu();\n    }\n  }, [apiRef, logger, showColumnMenu, hideColumnMenu]);\n  const columnMenuApi = {\n    showColumnMenu,\n    hideColumnMenu,\n    toggleColumnMenu\n  };\n  useGridApiMethod(apiRef, columnMenuApi, 'public');\n  useGridApiEventHandler(apiRef, 'columnResizeStart', hideColumnMenu);\n  useGridApiEventHandler(apiRef, 'virtualScrollerWheel', apiRef.current.hideColumnMenu);\n  useGridApiEventHandler(apiRef, 'virtualScrollerTouchMove', apiRef.current.hideColumnMenu);\n};","map":{"version":3,"names":["_extends","React","useGridLogger","useGridApiMethod","useGridApiEventHandler","gridColumnMenuSelector","gridColumnLookupSelector","gridColumnVisibilityModelSelector","gridColumnFieldsSelector","columnMenuStateInitializer","state","columnMenu","open","useGridColumnMenu","apiRef","logger","showColumnMenu","useCallback","field","shouldUpdate","current","setState","debug","hidePreferences","forceUpdate","hideColumnMenu","columnMenuState","columnLookup","columnVisibilityModel","orderedFields","fieldToFocus","visibleOrderedFields","filter","fieldIndex","indexOf","setColumnHeaderFocus","undefined","toggleColumnMenu","columnMenuApi"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenu.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { gridColumnMenuSelector } from './columnMenuSelector';\nimport { gridColumnLookupSelector, gridColumnVisibilityModelSelector, gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nexport const columnMenuStateInitializer = state => _extends({}, state, {\n  columnMenu: {\n    open: false\n  }\n});\n\n/**\n * @requires useGridColumnResize (event)\n * @requires useGridInfiniteLoader (event)\n */\nexport const useGridColumnMenu = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridColumnMenu');\n\n  /**\n   * API METHODS\n   */\n  const showColumnMenu = React.useCallback(field => {\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (state.columnMenu.open && state.columnMenu.field === field) {\n        return state;\n      }\n      logger.debug('Opening Column Menu');\n      return _extends({}, state, {\n        columnMenu: {\n          open: true,\n          field\n        }\n      });\n    });\n    if (shouldUpdate) {\n      apiRef.current.hidePreferences();\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const hideColumnMenu = React.useCallback(() => {\n    const columnMenuState = gridColumnMenuSelector(apiRef.current.state);\n    if (columnMenuState.field) {\n      const columnLookup = gridColumnLookupSelector(apiRef);\n      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n      const orderedFields = gridColumnFieldsSelector(apiRef);\n      let fieldToFocus = columnMenuState.field;\n\n      // If the column was removed from the grid, we need to find the closest visible field\n      if (!columnLookup[fieldToFocus]) {\n        fieldToFocus = orderedFields[0];\n      }\n\n      // If the field to focus is hidden, we need to find the closest visible field\n      if (columnVisibilityModel[fieldToFocus] === false) {\n        // contains visible column fields + the field that was just hidden\n        const visibleOrderedFields = orderedFields.filter(field => {\n          if (field === fieldToFocus) {\n            return true;\n          }\n          return columnVisibilityModel[field] !== false;\n        });\n        const fieldIndex = visibleOrderedFields.indexOf(fieldToFocus);\n        fieldToFocus = visibleOrderedFields[fieldIndex + 1] || visibleOrderedFields[fieldIndex - 1];\n      }\n      apiRef.current.setColumnHeaderFocus(fieldToFocus);\n    }\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (!state.columnMenu.open && state.columnMenu.field === undefined) {\n        return state;\n      }\n      logger.debug('Hiding Column Menu');\n      return _extends({}, state, {\n        columnMenu: _extends({}, state.columnMenu, {\n          open: false,\n          field: undefined\n        })\n      });\n    });\n    if (shouldUpdate) {\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const toggleColumnMenu = React.useCallback(field => {\n    logger.debug('Toggle Column Menu');\n    const columnMenu = gridColumnMenuSelector(apiRef.current.state);\n    if (!columnMenu.open || columnMenu.field !== field) {\n      showColumnMenu(field);\n    } else {\n      hideColumnMenu();\n    }\n  }, [apiRef, logger, showColumnMenu, hideColumnMenu]);\n  const columnMenuApi = {\n    showColumnMenu,\n    hideColumnMenu,\n    toggleColumnMenu\n  };\n  useGridApiMethod(apiRef, columnMenuApi, 'public');\n  useGridApiEventHandler(apiRef, 'columnResizeStart', hideColumnMenu);\n  useGridApiEventHandler(apiRef, 'virtualScrollerWheel', apiRef.current.hideColumnMenu);\n  useGridApiEventHandler(apiRef, 'virtualScrollerTouchMove', apiRef.current.hideColumnMenu);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}