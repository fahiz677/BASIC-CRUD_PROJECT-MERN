{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"position\", \"rowHeight\", \"className\", \"visibleColumns\", \"renderedColumns\", \"containerWidth\", \"firstColumnToRender\", \"lastColumnToRender\", \"isLastVisible\", \"focusedCell\", \"tabbableCell\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\"],\n      _excluded2 = [\"changeReason\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { GridEditModes, GridRowModes, GridCellModes } from '../models/gridEditRowModel';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass, gridClasses } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridColumnsTotalWidthSelector } from '../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector } from '../hooks/utils/useGridSelector';\nimport { useGridVisibleRows } from '../hooks/utils/useGridVisibleRows';\nimport { findParentElementFromClassName } from '../utils/domUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../colDef/gridCheckboxSelectionColDef';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../colDef/gridActionsColDef';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../constants/gridDetailPanelToggleField';\nimport { gridSortModelSelector } from '../hooks/features/sorting/gridSortingSelector';\nimport { gridRowMaximumTreeDepthSelector } from '../hooks/features/rows/gridRowsSelector';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../hooks/features/columnGrouping/gridColumnGroupsSelector';\nimport { randomNumberBetween } from '../utils/utils';\nimport { gridEditRowsStateSelector } from '../hooks/features/editing/gridEditingSelectors';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    editable,\n    editing,\n    selected,\n    isLastVisible,\n    rowHeight,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isLastVisible && 'row--lastVisible', rowHeight === 'auto' && 'row--dynamicHeight']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nfunction EmptyCell(_ref) {\n  let {\n    width\n  } = _ref;\n\n  if (!width) {\n    return null;\n  }\n\n  const style = {\n    width\n  };\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"MuiDataGrid-cell MuiDataGrid-withBorderColor\",\n    style: style\n  }); // TODO change to .MuiDataGrid-emptyCell or .MuiDataGrid-rowFiller\n}\n\nconst GridRow = /*#__PURE__*/React.forwardRef(function GridRow(props, refProp) {\n  const {\n    selected,\n    rowId,\n    row,\n    index,\n    style: styleProp,\n    position,\n    rowHeight,\n    className,\n    renderedColumns,\n    containerWidth,\n    firstColumnToRender,\n    isLastVisible = false,\n    focusedCell,\n    tabbableCell,\n    onClick,\n    onDoubleClick,\n    onMouseEnter,\n    onMouseLeave\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);\n  const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const handleRef = useForkRef(ref, refProp);\n  const ariaRowIndex = index + headerGroupingMaxDepth + 2; // 1 for the header row and 1 as it's 1-based\n\n  const ownerState = {\n    selected,\n    isLastVisible,\n    classes: rootProps.classes,\n    editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,\n    editable: rootProps.editMode === GridEditModes.Row,\n    rowHeight\n  };\n  const classes = useUtilityClasses(ownerState);\n  React.useLayoutEffect(() => {\n    if (rowHeight === 'auto' && ref.current && typeof ResizeObserver === 'undefined') {\n      // Fallback for IE\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, ref.current.clientHeight, position);\n    }\n  }, [apiRef, rowHeight, rowId, position]);\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      // The index prop is relative to the rows from all pages. As example, the index prop of the\n      // first row is 5 if `paginationModel.pageSize=5` and `paginationModel.page=1`. However, the index used by the virtualization\n      // doesn't care about pagination and considers the rows from the current page only, so the\n      // first row always has index=0. We need to subtract the index of the first row to make it\n      // compatible with the index used by the virtualization.\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId); // pinned rows are not part of the visible rows\n\n      if (rowIndex != null) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n\n    const rootElement = ref.current;\n    const hasFixedHeight = rowHeight !== 'auto';\n\n    if (!rootElement || hasFixedHeight || typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n\n    const resizeObserver = new ResizeObserver(entries => {\n      const [entry] = entries;\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, height, position);\n    });\n    resizeObserver.observe(rootElement);\n    return () => resizeObserver.disconnect();\n  }, [apiRef, currentPage.range, index, rowHeight, rowId, position]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    // The target is not an element when triggered by a Select inside the cell\n    // See https://github.com/mui/material-ui/issues/10534\n    if (event.target.nodeType === 1 && !event.currentTarget.contains(event.target)) {\n      return;\n    } // The row might have been deleted\n\n\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell == null ? void 0 : cell.getAttribute('data-field'); // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      } // User opened a detail panel\n\n\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      } // User reorders a row\n\n\n      if (field === '__reorder__') {\n        return;\n      } // User is editing a cell\n\n\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      } // User clicked a button from the \"actions\" column type\n\n\n      const column = apiRef.current.getColumn(field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n  const {\n    slots,\n    slotProps,\n    classes: rootClasses,\n    disableColumnReorder,\n    getCellClassName\n  } = rootProps;\n  const rowReordering = rootProps.rowReordering;\n  const CellComponent = slots.cell;\n  const getCell = React.useCallback((column, cellProps) => {\n    const cellParams = apiRef.current.getCellParams(rowId, column.field);\n    const classNames = apiRef.current.unstable_applyPipeProcessors('cellClassName', [], {\n      id: rowId,\n      field: column.field\n    });\n    const disableDragEvents = disableColumnReorder && column.disableReorder || !rowReordering && !!sortModel.length && treeDepth > 1 && Object.keys(editRowsState).length > 0;\n\n    if (column.cellClassName) {\n      classNames.push(clsx(typeof column.cellClassName === 'function' ? column.cellClassName(cellParams) : column.cellClassName));\n    }\n\n    const editCellState = editRowsState[rowId] ? editRowsState[rowId][column.field] : null;\n    let content;\n\n    if (editCellState == null && column.renderCell) {\n      content = column.renderCell(_extends({}, cellParams, {\n        api: apiRef.current\n      })); // TODO move to GridCell\n\n      classNames.push(clsx(gridClasses['cell--withRenderer'], rootClasses == null ? void 0 : rootClasses['cell--withRenderer']));\n    }\n\n    if (editCellState != null && column.renderEditCell) {\n      const updatedRow = apiRef.current.getRowWithUpdatedValues(rowId, column.field);\n\n      const editCellStateRest = _objectWithoutPropertiesLoose(editCellState, _excluded2);\n\n      const params = _extends({}, cellParams, {\n        row: updatedRow\n      }, editCellStateRest, {\n        api: apiRef.current\n      });\n\n      content = column.renderEditCell(params); // TODO move to GridCell\n\n      classNames.push(clsx(gridClasses['cell--editing'], rootClasses == null ? void 0 : rootClasses['cell--editing']));\n    }\n\n    if (getCellClassName) {\n      // TODO move to GridCell\n      classNames.push(getCellClassName(cellParams));\n    }\n\n    const hasFocus = focusedCell === column.field;\n    const tabIndex = tabbableCell === column.field ? 0 : -1;\n    const isSelected = apiRef.current.unstable_applyPipeProcessors('isCellSelected', false, {\n      id: rowId,\n      field: column.field\n    });\n    return /*#__PURE__*/_jsx(CellComponent, _extends({\n      value: cellParams.value,\n      field: column.field,\n      width: cellProps.width,\n      rowId: rowId,\n      height: rowHeight,\n      showRightBorder: cellProps.showRightBorder,\n      formattedValue: cellParams.formattedValue,\n      align: column.align || 'left',\n      cellMode: cellParams.cellMode,\n      colIndex: cellProps.indexRelativeToAllColumns,\n      isEditable: cellParams.isEditable,\n      isSelected: isSelected,\n      hasFocus: hasFocus,\n      tabIndex: tabIndex,\n      className: clsx(classNames),\n      colSpan: cellProps.colSpan,\n      disableDragEvents: disableDragEvents\n    }, slotProps == null ? void 0 : slotProps.cell, {\n      children: content\n    }), column.field);\n  }, [apiRef, rowId, disableColumnReorder, rowReordering, sortModel.length, treeDepth, editRowsState, getCellClassName, focusedCell, tabbableCell, CellComponent, rowHeight, slotProps == null ? void 0 : slotProps.cell, rootClasses]);\n  const sizes = apiRef.current.unstable_getRowInternalSizes(rowId);\n  let minHeight = rowHeight;\n\n  if (minHeight === 'auto' && sizes) {\n    let numberOfBaseSizes = 0;\n    const maximumSize = Object.entries(sizes).reduce((acc, _ref2) => {\n      let [key, size] = _ref2;\n      const isBaseHeight = /^base[A-Z]/.test(key);\n\n      if (!isBaseHeight) {\n        return acc;\n      }\n\n      numberOfBaseSizes += 1;\n\n      if (size > acc) {\n        return size;\n      }\n\n      return acc;\n    }, 0);\n\n    if (maximumSize > 0 && numberOfBaseSizes > 1) {\n      minHeight = maximumSize;\n    }\n  }\n\n  const style = _extends({}, styleProp, {\n    maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n    // max-height doesn't support \"auto\"\n    minHeight\n  });\n\n  if (sizes != null && sizes.spacingTop) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n    style[property] = sizes.spacingTop;\n  }\n\n  if (sizes != null && sizes.spacingBottom) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n    let propertyValue = style[property]; // avoid overriding existing value\n\n    if (typeof propertyValue !== 'number') {\n      propertyValue = parseInt(propertyValue || '0', 10);\n    }\n\n    propertyValue += sizes.spacingBottom;\n    style[property] = propertyValue;\n  }\n\n  const rowClassNames = apiRef.current.unstable_applyPipeProcessors('rowClassName', [], rowId);\n\n  if (typeof rootProps.getRowClassName === 'function') {\n    var _currentPage$range;\n\n    const indexRelativeToCurrentPage = index - (((_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) || 0);\n\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n\n    rowClassNames.push(rootProps.getRowClassName(rowParams));\n  }\n\n  const randomNumber = randomNumberBetween(10000, 20, 80);\n  const rowType = apiRef.current.getRowNode(rowId).type;\n  const cells = [];\n\n  for (let i = 0; i < renderedColumns.length; i += 1) {\n    const column = renderedColumns[i];\n    const indexRelativeToAllColumns = firstColumnToRender + i;\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n\n    if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n      if (rowType !== 'skeletonRow') {\n        const {\n          colSpan,\n          width\n        } = cellColSpanInfo.cellProps;\n        const cellProps = {\n          width,\n          colSpan,\n          showRightBorder: rootProps.showCellVerticalBorder,\n          indexRelativeToAllColumns\n        };\n        cells.push(getCell(column, cellProps));\n      } else {\n        const {\n          width\n        } = cellColSpanInfo.cellProps;\n        const contentWidth = Math.round(randomNumber());\n        cells.push( /*#__PURE__*/_jsx(rootProps.slots.skeletonCell, {\n          width: width,\n          contentWidth: contentWidth,\n          field: column.field,\n          align: column.align\n        }, column.field));\n      }\n    }\n  }\n\n  const emptyCellWidth = containerWidth - columnsTotalWidth;\n  const eventHandlers = row ? {\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave)\n  } : null;\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    ref: handleRef,\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(...rowClassNames, classes.root, className),\n    \"aria-rowindex\": ariaRowIndex,\n    \"aria-selected\": selected,\n    style: style\n  }, eventHandlers, other, {\n    children: [cells, emptyCellWidth > 0 && /*#__PURE__*/_jsx(EmptyCell, {\n      width: emptyCellWidth\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  containerWidth: PropTypes.number,\n  firstColumnToRender: PropTypes.number,\n\n  /**\n   * Determines which cell has focus.\n   * If `null`, no cell in this row has focus.\n   */\n  focusedCell: PropTypes.string,\n\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number,\n  isLastVisible: PropTypes.bool,\n  lastColumnToRender: PropTypes.number,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  position: PropTypes.oneOf(['center', 'left', 'right']),\n  renderedColumns: PropTypes.arrayOf(PropTypes.object),\n  row: PropTypes.object,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]),\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  selected: PropTypes.bool,\n\n  /**\n   * Determines which cell should be tabbable by having tabIndex=0.\n   * If `null`, no cell in this row is in the tab sequence.\n   */\n  tabbableCell: PropTypes.string,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object)\n} : void 0;\nexport { GridRow };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","React","PropTypes","clsx","unstable_composeClasses","composeClasses","unstable_useForkRef","useForkRef","GridEditModes","GridRowModes","GridCellModes","useGridApiContext","getDataGridUtilityClass","gridClasses","useGridRootProps","gridColumnsTotalWidthSelector","useGridSelector","useGridVisibleRows","findParentElementFromClassName","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridSortModelSelector","gridRowMaximumTreeDepthSelector","gridColumnGroupsHeaderMaxDepthSelector","randomNumberBetween","gridEditRowsStateSelector","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","editable","editing","selected","isLastVisible","rowHeight","classes","slots","root","EmptyCell","width","style","className","GridRow","forwardRef","props","refProp","rowId","row","index","styleProp","position","renderedColumns","containerWidth","firstColumnToRender","focusedCell","tabbableCell","onClick","onDoubleClick","onMouseEnter","onMouseLeave","other","apiRef","ref","useRef","rootProps","currentPage","columnsTotalWidth","sortModel","treeDepth","headerGroupingMaxDepth","editRowsState","handleRef","ariaRowIndex","current","getRowMode","Edit","editMode","Row","useLayoutEffect","ResizeObserver","unstable_storeRowHeightMeasurement","clientHeight","range","rowIndex","getRowIndexRelativeToVisibleRows","unstable_setLastMeasuredRowIndex","rootElement","hasFixedHeight","undefined","resizeObserver","entries","entry","height","borderBoxSize","length","blockSize","contentRect","observe","disconnect","publish","useCallback","eventName","propHandler","event","target","nodeType","currentTarget","contains","getRow","publishEvent","getRowParams","publishClick","cell","field","getAttribute","getCellMode","column","getColumn","type","slotProps","rootClasses","disableColumnReorder","getCellClassName","rowReordering","CellComponent","getCell","cellProps","cellParams","getCellParams","classNames","unstable_applyPipeProcessors","id","disableDragEvents","disableReorder","Object","keys","cellClassName","push","editCellState","content","renderCell","api","renderEditCell","updatedRow","getRowWithUpdatedValues","editCellStateRest","params","hasFocus","tabIndex","isSelected","value","showRightBorder","formattedValue","align","cellMode","colIndex","indexRelativeToAllColumns","isEditable","colSpan","children","sizes","unstable_getRowInternalSizes","minHeight","numberOfBaseSizes","maximumSize","reduce","acc","key","size","isBaseHeight","test","maxHeight","spacingTop","property","rowSpacingType","spacingBottom","propertyValue","parseInt","rowClassNames","getRowClassName","_currentPage$range","indexRelativeToCurrentPage","firstRowIndex","rowParams","isFirstVisible","rows","randomNumber","rowType","getRowNode","cells","i","cellColSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","showCellVerticalBorder","contentWidth","Math","round","skeletonCell","emptyCellWidth","eventHandlers","role","process","env","NODE_ENV","propTypes","number","string","bool","lastColumnToRender","func","oneOf","arrayOf","object","oneOfType","visibleColumns"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/components/GridRow.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"position\", \"rowHeight\", \"className\", \"visibleColumns\", \"renderedColumns\", \"containerWidth\", \"firstColumnToRender\", \"lastColumnToRender\", \"isLastVisible\", \"focusedCell\", \"tabbableCell\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\"],\n  _excluded2 = [\"changeReason\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { GridEditModes, GridRowModes, GridCellModes } from '../models/gridEditRowModel';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass, gridClasses } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridColumnsTotalWidthSelector } from '../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector } from '../hooks/utils/useGridSelector';\nimport { useGridVisibleRows } from '../hooks/utils/useGridVisibleRows';\nimport { findParentElementFromClassName } from '../utils/domUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../colDef/gridCheckboxSelectionColDef';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../colDef/gridActionsColDef';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../constants/gridDetailPanelToggleField';\nimport { gridSortModelSelector } from '../hooks/features/sorting/gridSortingSelector';\nimport { gridRowMaximumTreeDepthSelector } from '../hooks/features/rows/gridRowsSelector';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../hooks/features/columnGrouping/gridColumnGroupsSelector';\nimport { randomNumberBetween } from '../utils/utils';\nimport { gridEditRowsStateSelector } from '../hooks/features/editing/gridEditingSelectors';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    editable,\n    editing,\n    selected,\n    isLastVisible,\n    rowHeight,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isLastVisible && 'row--lastVisible', rowHeight === 'auto' && 'row--dynamicHeight']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nfunction EmptyCell({\n  width\n}) {\n  if (!width) {\n    return null;\n  }\n  const style = {\n    width\n  };\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"MuiDataGrid-cell MuiDataGrid-withBorderColor\",\n    style: style\n  }); // TODO change to .MuiDataGrid-emptyCell or .MuiDataGrid-rowFiller\n}\n\nconst GridRow = /*#__PURE__*/React.forwardRef(function GridRow(props, refProp) {\n  const {\n      selected,\n      rowId,\n      row,\n      index,\n      style: styleProp,\n      position,\n      rowHeight,\n      className,\n      renderedColumns,\n      containerWidth,\n      firstColumnToRender,\n      isLastVisible = false,\n      focusedCell,\n      tabbableCell,\n      onClick,\n      onDoubleClick,\n      onMouseEnter,\n      onMouseLeave\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);\n  const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const handleRef = useForkRef(ref, refProp);\n  const ariaRowIndex = index + headerGroupingMaxDepth + 2; // 1 for the header row and 1 as it's 1-based\n\n  const ownerState = {\n    selected,\n    isLastVisible,\n    classes: rootProps.classes,\n    editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,\n    editable: rootProps.editMode === GridEditModes.Row,\n    rowHeight\n  };\n  const classes = useUtilityClasses(ownerState);\n  React.useLayoutEffect(() => {\n    if (rowHeight === 'auto' && ref.current && typeof ResizeObserver === 'undefined') {\n      // Fallback for IE\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, ref.current.clientHeight, position);\n    }\n  }, [apiRef, rowHeight, rowId, position]);\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      // The index prop is relative to the rows from all pages. As example, the index prop of the\n      // first row is 5 if `paginationModel.pageSize=5` and `paginationModel.page=1`. However, the index used by the virtualization\n      // doesn't care about pagination and considers the rows from the current page only, so the\n      // first row always has index=0. We need to subtract the index of the first row to make it\n      // compatible with the index used by the virtualization.\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);\n      // pinned rows are not part of the visible rows\n      if (rowIndex != null) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n    const rootElement = ref.current;\n    const hasFixedHeight = rowHeight !== 'auto';\n    if (!rootElement || hasFixedHeight || typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n    const resizeObserver = new ResizeObserver(entries => {\n      const [entry] = entries;\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, height, position);\n    });\n    resizeObserver.observe(rootElement);\n    return () => resizeObserver.disconnect();\n  }, [apiRef, currentPage.range, index, rowHeight, rowId, position]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    // The target is not an element when triggered by a Select inside the cell\n    // See https://github.com/mui/material-ui/issues/10534\n    if (event.target.nodeType === 1 && !event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell == null ? void 0 : cell.getAttribute('data-field');\n\n    // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      }\n\n      // User opened a detail panel\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      }\n\n      // User reorders a row\n      if (field === '__reorder__') {\n        return;\n      }\n\n      // User is editing a cell\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      }\n\n      // User clicked a button from the \"actions\" column type\n      const column = apiRef.current.getColumn(field);\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n  const {\n    slots,\n    slotProps,\n    classes: rootClasses,\n    disableColumnReorder,\n    getCellClassName\n  } = rootProps;\n  const rowReordering = rootProps.rowReordering;\n  const CellComponent = slots.cell;\n  const getCell = React.useCallback((column, cellProps) => {\n    const cellParams = apiRef.current.getCellParams(rowId, column.field);\n    const classNames = apiRef.current.unstable_applyPipeProcessors('cellClassName', [], {\n      id: rowId,\n      field: column.field\n    });\n    const disableDragEvents = disableColumnReorder && column.disableReorder || !rowReordering && !!sortModel.length && treeDepth > 1 && Object.keys(editRowsState).length > 0;\n    if (column.cellClassName) {\n      classNames.push(clsx(typeof column.cellClassName === 'function' ? column.cellClassName(cellParams) : column.cellClassName));\n    }\n    const editCellState = editRowsState[rowId] ? editRowsState[rowId][column.field] : null;\n    let content;\n    if (editCellState == null && column.renderCell) {\n      content = column.renderCell(_extends({}, cellParams, {\n        api: apiRef.current\n      }));\n      // TODO move to GridCell\n      classNames.push(clsx(gridClasses['cell--withRenderer'], rootClasses == null ? void 0 : rootClasses['cell--withRenderer']));\n    }\n    if (editCellState != null && column.renderEditCell) {\n      const updatedRow = apiRef.current.getRowWithUpdatedValues(rowId, column.field);\n      const editCellStateRest = _objectWithoutPropertiesLoose(editCellState, _excluded2);\n      const params = _extends({}, cellParams, {\n        row: updatedRow\n      }, editCellStateRest, {\n        api: apiRef.current\n      });\n      content = column.renderEditCell(params);\n      // TODO move to GridCell\n      classNames.push(clsx(gridClasses['cell--editing'], rootClasses == null ? void 0 : rootClasses['cell--editing']));\n    }\n    if (getCellClassName) {\n      // TODO move to GridCell\n      classNames.push(getCellClassName(cellParams));\n    }\n    const hasFocus = focusedCell === column.field;\n    const tabIndex = tabbableCell === column.field ? 0 : -1;\n    const isSelected = apiRef.current.unstable_applyPipeProcessors('isCellSelected', false, {\n      id: rowId,\n      field: column.field\n    });\n    return /*#__PURE__*/_jsx(CellComponent, _extends({\n      value: cellParams.value,\n      field: column.field,\n      width: cellProps.width,\n      rowId: rowId,\n      height: rowHeight,\n      showRightBorder: cellProps.showRightBorder,\n      formattedValue: cellParams.formattedValue,\n      align: column.align || 'left',\n      cellMode: cellParams.cellMode,\n      colIndex: cellProps.indexRelativeToAllColumns,\n      isEditable: cellParams.isEditable,\n      isSelected: isSelected,\n      hasFocus: hasFocus,\n      tabIndex: tabIndex,\n      className: clsx(classNames),\n      colSpan: cellProps.colSpan,\n      disableDragEvents: disableDragEvents\n    }, slotProps == null ? void 0 : slotProps.cell, {\n      children: content\n    }), column.field);\n  }, [apiRef, rowId, disableColumnReorder, rowReordering, sortModel.length, treeDepth, editRowsState, getCellClassName, focusedCell, tabbableCell, CellComponent, rowHeight, slotProps == null ? void 0 : slotProps.cell, rootClasses]);\n  const sizes = apiRef.current.unstable_getRowInternalSizes(rowId);\n  let minHeight = rowHeight;\n  if (minHeight === 'auto' && sizes) {\n    let numberOfBaseSizes = 0;\n    const maximumSize = Object.entries(sizes).reduce((acc, [key, size]) => {\n      const isBaseHeight = /^base[A-Z]/.test(key);\n      if (!isBaseHeight) {\n        return acc;\n      }\n      numberOfBaseSizes += 1;\n      if (size > acc) {\n        return size;\n      }\n      return acc;\n    }, 0);\n    if (maximumSize > 0 && numberOfBaseSizes > 1) {\n      minHeight = maximumSize;\n    }\n  }\n  const style = _extends({}, styleProp, {\n    maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n    // max-height doesn't support \"auto\"\n    minHeight\n  });\n  if (sizes != null && sizes.spacingTop) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n    style[property] = sizes.spacingTop;\n  }\n  if (sizes != null && sizes.spacingBottom) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n    let propertyValue = style[property];\n    // avoid overriding existing value\n    if (typeof propertyValue !== 'number') {\n      propertyValue = parseInt(propertyValue || '0', 10);\n    }\n    propertyValue += sizes.spacingBottom;\n    style[property] = propertyValue;\n  }\n  const rowClassNames = apiRef.current.unstable_applyPipeProcessors('rowClassName', [], rowId);\n  if (typeof rootProps.getRowClassName === 'function') {\n    var _currentPage$range;\n    const indexRelativeToCurrentPage = index - (((_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) || 0);\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n    rowClassNames.push(rootProps.getRowClassName(rowParams));\n  }\n  const randomNumber = randomNumberBetween(10000, 20, 80);\n  const rowType = apiRef.current.getRowNode(rowId).type;\n  const cells = [];\n  for (let i = 0; i < renderedColumns.length; i += 1) {\n    const column = renderedColumns[i];\n    const indexRelativeToAllColumns = firstColumnToRender + i;\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n    if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n      if (rowType !== 'skeletonRow') {\n        const {\n          colSpan,\n          width\n        } = cellColSpanInfo.cellProps;\n        const cellProps = {\n          width,\n          colSpan,\n          showRightBorder: rootProps.showCellVerticalBorder,\n          indexRelativeToAllColumns\n        };\n        cells.push(getCell(column, cellProps));\n      } else {\n        const {\n          width\n        } = cellColSpanInfo.cellProps;\n        const contentWidth = Math.round(randomNumber());\n        cells.push( /*#__PURE__*/_jsx(rootProps.slots.skeletonCell, {\n          width: width,\n          contentWidth: contentWidth,\n          field: column.field,\n          align: column.align\n        }, column.field));\n      }\n    }\n  }\n  const emptyCellWidth = containerWidth - columnsTotalWidth;\n  const eventHandlers = row ? {\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave)\n  } : null;\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    ref: handleRef,\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(...rowClassNames, classes.root, className),\n    \"aria-rowindex\": ariaRowIndex,\n    \"aria-selected\": selected,\n    style: style\n  }, eventHandlers, other, {\n    children: [cells, emptyCellWidth > 0 && /*#__PURE__*/_jsx(EmptyCell, {\n      width: emptyCellWidth\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  containerWidth: PropTypes.number,\n  firstColumnToRender: PropTypes.number,\n  /**\n   * Determines which cell has focus.\n   * If `null`, no cell in this row has focus.\n   */\n  focusedCell: PropTypes.string,\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number,\n  isLastVisible: PropTypes.bool,\n  lastColumnToRender: PropTypes.number,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  position: PropTypes.oneOf(['center', 'left', 'right']),\n  renderedColumns: PropTypes.arrayOf(PropTypes.object),\n  row: PropTypes.object,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]),\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  selected: PropTypes.bool,\n  /**\n   * Determines which cell should be tabbable by having tabIndex=0.\n   * If `null`, no cell in this row is in the tab sequence.\n   */\n  tabbableCell: PropTypes.string,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object)\n} : void 0;\nexport { GridRow };"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,MAAMC,SAAS,GAAG,CAAC,UAAD,EAAa,OAAb,EAAsB,KAAtB,EAA6B,OAA7B,EAAsC,OAAtC,EAA+C,UAA/C,EAA2D,WAA3D,EAAwE,WAAxE,EAAqF,gBAArF,EAAuG,iBAAvG,EAA0H,gBAA1H,EAA4I,qBAA5I,EAAmK,oBAAnK,EAAyL,eAAzL,EAA0M,aAA1M,EAAyN,cAAzN,EAAyO,SAAzO,EAAoP,eAApP,EAAqQ,cAArQ,EAAqR,cAArR,CAAlB;AAAA,MACEC,UAAU,GAAG,CAAC,cAAD,CADf;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,uBAAuB,IAAIC,cAApC,EAAoDC,mBAAmB,IAAIC,UAA3E,QAA6F,YAA7F;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,aAAtC,QAA2D,4BAA3D;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AACA,SAASC,uBAAT,EAAkCC,WAAlC,QAAqD,0BAArD;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,6BAAT,QAA8C,+CAA9C;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,kBAAT,QAAmC,mCAAnC;AACA,SAASC,8BAAT,QAA+C,mBAA/C;AACA,SAASC,+BAAT,QAAgD,uCAAhD;AACA,SAASC,wBAAT,QAAyC,6BAAzC;AACA,SAASC,8BAAT,QAA+C,yCAA/C;AACA,SAASC,qBAAT,QAAsC,+CAAtC;AACA,SAASC,+BAAT,QAAgD,yCAAhD;AACA,SAASC,sCAAT,QAAuD,2DAAvD;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,yBAAT,QAA0C,gDAA1C;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,SAASC,IAAI,IAAIC,KAAjB,QAA8B,mBAA9B;;AACA,MAAMC,iBAAiB,GAAGC,UAAU,IAAI;EACtC,MAAM;IACJC,QADI;IAEJC,OAFI;IAGJC,QAHI;IAIJC,aAJI;IAKJC,SALI;IAMJC;EANI,IAOFN,UAPJ;EAQA,MAAMO,KAAK,GAAG;IACZC,IAAI,EAAE,CAAC,KAAD,EAAQL,QAAQ,IAAI,UAApB,EAAgCF,QAAQ,IAAI,eAA5C,EAA6DC,OAAO,IAAI,cAAxE,EAAwFE,aAAa,IAAI,kBAAzG,EAA6HC,SAAS,KAAK,MAAd,IAAwB,oBAArJ;EADM,CAAd;EAGA,OAAOhC,cAAc,CAACkC,KAAD,EAAQ3B,uBAAR,EAAiC0B,OAAjC,CAArB;AACD,CAbD;;AAcA,SAASG,SAAT,OAEG;EAAA,IAFgB;IACjBC;EADiB,CAEhB;;EACD,IAAI,CAACA,KAAL,EAAY;IACV,OAAO,IAAP;EACD;;EACD,MAAMC,KAAK,GAAG;IACZD;EADY,CAAd;EAGA,OAAO,aAAad,IAAI,CAAC,KAAD,EAAQ;IAC9BgB,SAAS,EAAE,8CADmB;IAE9BD,KAAK,EAAEA;EAFuB,CAAR,CAAxB,CAPC,CAUG;AACL;;AAED,MAAME,OAAO,GAAG,aAAa5C,KAAK,CAAC6C,UAAN,CAAiB,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;EAC7E,MAAM;IACFb,QADE;IAEFc,KAFE;IAGFC,GAHE;IAIFC,KAJE;IAKFR,KAAK,EAAES,SALL;IAMFC,QANE;IAOFhB,SAPE;IAQFO,SARE;IASFU,eATE;IAUFC,cAVE;IAWFC,mBAXE;IAYFpB,aAAa,GAAG,KAZd;IAaFqB,WAbE;IAcFC,YAdE;IAeFC,OAfE;IAgBFC,aAhBE;IAiBFC,YAjBE;IAkBFC;EAlBE,IAmBAf,KAnBN;EAAA,MAoBEgB,KAAK,GAAGjE,6BAA6B,CAACiD,KAAD,EAAQhD,SAAR,CApBvC;;EAqBA,MAAMiE,MAAM,GAAGrD,iBAAiB,EAAhC;EACA,MAAMsD,GAAG,GAAGhE,KAAK,CAACiE,MAAN,CAAa,IAAb,CAAZ;EACA,MAAMC,SAAS,GAAGrD,gBAAgB,EAAlC;EACA,MAAMsD,WAAW,GAAGnD,kBAAkB,CAAC+C,MAAD,EAASG,SAAT,CAAtC;EACA,MAAME,iBAAiB,GAAGrD,eAAe,CAACgD,MAAD,EAASjD,6BAAT,CAAzC;EACA,MAAMuD,SAAS,GAAGtD,eAAe,CAACgD,MAAD,EAAS1C,qBAAT,CAAjC;EACA,MAAMiD,SAAS,GAAGvD,eAAe,CAACgD,MAAD,EAASzC,+BAAT,CAAjC;EACA,MAAMiD,sBAAsB,GAAGxD,eAAe,CAACgD,MAAD,EAASxC,sCAAT,CAA9C;EACA,MAAMiD,aAAa,GAAGzD,eAAe,CAACgD,MAAD,EAAStC,yBAAT,CAArC;EACA,MAAMgD,SAAS,GAAGnE,UAAU,CAAC0D,GAAD,EAAMjB,OAAN,CAA5B;EACA,MAAM2B,YAAY,GAAGxB,KAAK,GAAGqB,sBAAR,GAAiC,CAAtD,CAhC6E,CAgCpB;;EAEzD,MAAMxC,UAAU,GAAG;IACjBG,QADiB;IAEjBC,aAFiB;IAGjBE,OAAO,EAAE6B,SAAS,CAAC7B,OAHF;IAIjBJ,OAAO,EAAE8B,MAAM,CAACY,OAAP,CAAeC,UAAf,CAA0B5B,KAA1B,MAAqCxC,YAAY,CAACqE,IAJ1C;IAKjB7C,QAAQ,EAAEkC,SAAS,CAACY,QAAV,KAAuBvE,aAAa,CAACwE,GAL9B;IAMjB3C;EANiB,CAAnB;EAQA,MAAMC,OAAO,GAAGP,iBAAiB,CAACC,UAAD,CAAjC;EACA/B,KAAK,CAACgF,eAAN,CAAsB,MAAM;IAC1B,IAAI5C,SAAS,KAAK,MAAd,IAAwB4B,GAAG,CAACW,OAA5B,IAAuC,OAAOM,cAAP,KAA0B,WAArE,EAAkF;MAChF;MACAlB,MAAM,CAACY,OAAP,CAAeO,kCAAf,CAAkDlC,KAAlD,EAAyDgB,GAAG,CAACW,OAAJ,CAAYQ,YAArE,EAAmF/B,QAAnF;IACD;EACF,CALD,EAKG,CAACW,MAAD,EAAS3B,SAAT,EAAoBY,KAApB,EAA2BI,QAA3B,CALH;EAMApD,KAAK,CAACgF,eAAN,CAAsB,MAAM;IAC1B,IAAIb,WAAW,CAACiB,KAAhB,EAAuB;MACrB;MACA;MACA;MACA;MACA;MACA,MAAMC,QAAQ,GAAGtB,MAAM,CAACY,OAAP,CAAeW,gCAAf,CAAgDtC,KAAhD,CAAjB,CANqB,CAOrB;;MACA,IAAIqC,QAAQ,IAAI,IAAhB,EAAsB;QACpBtB,MAAM,CAACY,OAAP,CAAeY,gCAAf,CAAgDF,QAAhD;MACD;IACF;;IACD,MAAMG,WAAW,GAAGxB,GAAG,CAACW,OAAxB;IACA,MAAMc,cAAc,GAAGrD,SAAS,KAAK,MAArC;;IACA,IAAI,CAACoD,WAAD,IAAgBC,cAAhB,IAAkC,OAAOR,cAAP,KAA0B,WAAhE,EAA6E;MAC3E,OAAOS,SAAP;IACD;;IACD,MAAMC,cAAc,GAAG,IAAIV,cAAJ,CAAmBW,OAAO,IAAI;MACnD,MAAM,CAACC,KAAD,IAAUD,OAAhB;MACA,MAAME,MAAM,GAAGD,KAAK,CAACE,aAAN,IAAuBF,KAAK,CAACE,aAAN,CAAoBC,MAApB,GAA6B,CAApD,GAAwDH,KAAK,CAACE,aAAN,CAAoB,CAApB,EAAuBE,SAA/E,GAA2FJ,KAAK,CAACK,WAAN,CAAkBJ,MAA5H;MACA/B,MAAM,CAACY,OAAP,CAAeO,kCAAf,CAAkDlC,KAAlD,EAAyD8C,MAAzD,EAAiE1C,QAAjE;IACD,CAJsB,CAAvB;IAKAuC,cAAc,CAACQ,OAAf,CAAuBX,WAAvB;IACA,OAAO,MAAMG,cAAc,CAACS,UAAf,EAAb;EACD,CAzBD,EAyBG,CAACrC,MAAD,EAASI,WAAW,CAACiB,KAArB,EAA4BlC,KAA5B,EAAmCd,SAAnC,EAA8CY,KAA9C,EAAqDI,QAArD,CAzBH;EA0BA,MAAMiD,OAAO,GAAGrG,KAAK,CAACsG,WAAN,CAAkB,CAACC,SAAD,EAAYC,WAAZ,KAA4BC,KAAK,IAAI;IACrE;IACA;IACA;IACA,IAAIA,KAAK,CAACC,MAAN,CAAaC,QAAb,KAA0B,CAA1B,IAA+B,CAACF,KAAK,CAACG,aAAN,CAAoBC,QAApB,CAA6BJ,KAAK,CAACC,MAAnC,CAApC,EAAgF;MAC9E;IACD,CANoE,CAQrE;;;IACA,IAAI,CAAC3C,MAAM,CAACY,OAAP,CAAemC,MAAf,CAAsB9D,KAAtB,CAAL,EAAmC;MACjC;IACD;;IACDe,MAAM,CAACY,OAAP,CAAeoC,YAAf,CAA4BR,SAA5B,EAAuCxC,MAAM,CAACY,OAAP,CAAeqC,YAAf,CAA4BhE,KAA5B,CAAvC,EAA2EyD,KAA3E;;IACA,IAAID,WAAJ,EAAiB;MACfA,WAAW,CAACC,KAAD,CAAX;IACD;EACF,CAhBe,EAgBb,CAAC1C,MAAD,EAASf,KAAT,CAhBa,CAAhB;EAiBA,MAAMiE,YAAY,GAAGjH,KAAK,CAACsG,WAAN,CAAkBG,KAAK,IAAI;IAC9C,MAAMS,IAAI,GAAGjG,8BAA8B,CAACwF,KAAK,CAACC,MAAP,EAAe9F,WAAW,CAACsG,IAA3B,CAA3C;IACA,MAAMC,KAAK,GAAGD,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACE,YAAL,CAAkB,YAAlB,CAAtC,CAF8C,CAI9C;IACA;;IACA,IAAID,KAAJ,EAAW;MACT;MACA,IAAIA,KAAK,KAAKjG,+BAA+B,CAACiG,KAA9C,EAAqD;QACnD;MACD,CAJQ,CAMT;;;MACA,IAAIA,KAAK,KAAK/F,8BAAd,EAA8C;QAC5C;MACD,CATQ,CAWT;;;MACA,IAAI+F,KAAK,KAAK,aAAd,EAA6B;QAC3B;MACD,CAdQ,CAgBT;;;MACA,IAAIpD,MAAM,CAACY,OAAP,CAAe0C,WAAf,CAA2BrE,KAA3B,EAAkCmE,KAAlC,MAA6C1G,aAAa,CAACoE,IAA/D,EAAqE;QACnE;MACD,CAnBQ,CAqBT;;;MACA,MAAMyC,MAAM,GAAGvD,MAAM,CAACY,OAAP,CAAe4C,SAAf,CAAyBJ,KAAzB,CAAf;;MACA,IAAIG,MAAM,CAACE,IAAP,KAAgBrG,wBAApB,EAA8C;QAC5C;MACD;IACF;;IACDkF,OAAO,CAAC,UAAD,EAAa3C,OAAb,CAAP,CAA6B+C,KAA7B;EACD,CAlCoB,EAkClB,CAAC1C,MAAD,EAASL,OAAT,EAAkB2C,OAAlB,EAA2BrD,KAA3B,CAlCkB,CAArB;EAmCA,MAAM;IACJV,KADI;IAEJmF,SAFI;IAGJpF,OAAO,EAAEqF,WAHL;IAIJC,oBAJI;IAKJC;EALI,IAMF1D,SANJ;EAOA,MAAM2D,aAAa,GAAG3D,SAAS,CAAC2D,aAAhC;EACA,MAAMC,aAAa,GAAGxF,KAAK,CAAC4E,IAA5B;EACA,MAAMa,OAAO,GAAG/H,KAAK,CAACsG,WAAN,CAAkB,CAACgB,MAAD,EAASU,SAAT,KAAuB;IACvD,MAAMC,UAAU,GAAGlE,MAAM,CAACY,OAAP,CAAeuD,aAAf,CAA6BlF,KAA7B,EAAoCsE,MAAM,CAACH,KAA3C,CAAnB;IACA,MAAMgB,UAAU,GAAGpE,MAAM,CAACY,OAAP,CAAeyD,4BAAf,CAA4C,eAA5C,EAA6D,EAA7D,EAAiE;MAClFC,EAAE,EAAErF,KAD8E;MAElFmE,KAAK,EAAEG,MAAM,CAACH;IAFoE,CAAjE,CAAnB;IAIA,MAAMmB,iBAAiB,GAAGX,oBAAoB,IAAIL,MAAM,CAACiB,cAA/B,IAAiD,CAACV,aAAD,IAAkB,CAAC,CAACxD,SAAS,CAAC2B,MAA9B,IAAwC1B,SAAS,GAAG,CAApD,IAAyDkE,MAAM,CAACC,IAAP,CAAYjE,aAAZ,EAA2BwB,MAA3B,GAAoC,CAAxK;;IACA,IAAIsB,MAAM,CAACoB,aAAX,EAA0B;MACxBP,UAAU,CAACQ,IAAX,CAAgBzI,IAAI,CAAC,OAAOoH,MAAM,CAACoB,aAAd,KAAgC,UAAhC,GAA6CpB,MAAM,CAACoB,aAAP,CAAqBT,UAArB,CAA7C,GAAgFX,MAAM,CAACoB,aAAxF,CAApB;IACD;;IACD,MAAME,aAAa,GAAGpE,aAAa,CAACxB,KAAD,CAAb,GAAuBwB,aAAa,CAACxB,KAAD,CAAb,CAAqBsE,MAAM,CAACH,KAA5B,CAAvB,GAA4D,IAAlF;IACA,IAAI0B,OAAJ;;IACA,IAAID,aAAa,IAAI,IAAjB,IAAyBtB,MAAM,CAACwB,UAApC,EAAgD;MAC9CD,OAAO,GAAGvB,MAAM,CAACwB,UAAP,CAAkBlJ,QAAQ,CAAC,EAAD,EAAKqI,UAAL,EAAiB;QACnDc,GAAG,EAAEhF,MAAM,CAACY;MADuC,CAAjB,CAA1B,CAAV,CAD8C,CAI9C;;MACAwD,UAAU,CAACQ,IAAX,CAAgBzI,IAAI,CAACU,WAAW,CAAC,oBAAD,CAAZ,EAAoC8G,WAAW,IAAI,IAAf,GAAsB,KAAK,CAA3B,GAA+BA,WAAW,CAAC,oBAAD,CAA9E,CAApB;IACD;;IACD,IAAIkB,aAAa,IAAI,IAAjB,IAAyBtB,MAAM,CAAC0B,cAApC,EAAoD;MAClD,MAAMC,UAAU,GAAGlF,MAAM,CAACY,OAAP,CAAeuE,uBAAf,CAAuClG,KAAvC,EAA8CsE,MAAM,CAACH,KAArD,CAAnB;;MACA,MAAMgC,iBAAiB,GAAGtJ,6BAA6B,CAAC+I,aAAD,EAAgB7I,UAAhB,CAAvD;;MACA,MAAMqJ,MAAM,GAAGxJ,QAAQ,CAAC,EAAD,EAAKqI,UAAL,EAAiB;QACtChF,GAAG,EAAEgG;MADiC,CAAjB,EAEpBE,iBAFoB,EAED;QACpBJ,GAAG,EAAEhF,MAAM,CAACY;MADQ,CAFC,CAAvB;;MAKAkE,OAAO,GAAGvB,MAAM,CAAC0B,cAAP,CAAsBI,MAAtB,CAAV,CARkD,CASlD;;MACAjB,UAAU,CAACQ,IAAX,CAAgBzI,IAAI,CAACU,WAAW,CAAC,eAAD,CAAZ,EAA+B8G,WAAW,IAAI,IAAf,GAAsB,KAAK,CAA3B,GAA+BA,WAAW,CAAC,eAAD,CAAzE,CAApB;IACD;;IACD,IAAIE,gBAAJ,EAAsB;MACpB;MACAO,UAAU,CAACQ,IAAX,CAAgBf,gBAAgB,CAACK,UAAD,CAAhC;IACD;;IACD,MAAMoB,QAAQ,GAAG7F,WAAW,KAAK8D,MAAM,CAACH,KAAxC;IACA,MAAMmC,QAAQ,GAAG7F,YAAY,KAAK6D,MAAM,CAACH,KAAxB,GAAgC,CAAhC,GAAoC,CAAC,CAAtD;IACA,MAAMoC,UAAU,GAAGxF,MAAM,CAACY,OAAP,CAAeyD,4BAAf,CAA4C,gBAA5C,EAA8D,KAA9D,EAAqE;MACtFC,EAAE,EAAErF,KADkF;MAEtFmE,KAAK,EAAEG,MAAM,CAACH;IAFwE,CAArE,CAAnB;IAIA,OAAO,aAAaxF,IAAI,CAACmG,aAAD,EAAgBlI,QAAQ,CAAC;MAC/C4J,KAAK,EAAEvB,UAAU,CAACuB,KAD6B;MAE/CrC,KAAK,EAAEG,MAAM,CAACH,KAFiC;MAG/C1E,KAAK,EAAEuF,SAAS,CAACvF,KAH8B;MAI/CO,KAAK,EAAEA,KAJwC;MAK/C8C,MAAM,EAAE1D,SALuC;MAM/CqH,eAAe,EAAEzB,SAAS,CAACyB,eANoB;MAO/CC,cAAc,EAAEzB,UAAU,CAACyB,cAPoB;MAQ/CC,KAAK,EAAErC,MAAM,CAACqC,KAAP,IAAgB,MARwB;MAS/CC,QAAQ,EAAE3B,UAAU,CAAC2B,QAT0B;MAU/CC,QAAQ,EAAE7B,SAAS,CAAC8B,yBAV2B;MAW/CC,UAAU,EAAE9B,UAAU,CAAC8B,UAXwB;MAY/CR,UAAU,EAAEA,UAZmC;MAa/CF,QAAQ,EAAEA,QAbqC;MAc/CC,QAAQ,EAAEA,QAdqC;MAe/C3G,SAAS,EAAEzC,IAAI,CAACiI,UAAD,CAfgC;MAgB/C6B,OAAO,EAAEhC,SAAS,CAACgC,OAhB4B;MAiB/C1B,iBAAiB,EAAEA;IAjB4B,CAAD,EAkB7Cb,SAAS,IAAI,IAAb,GAAoB,KAAK,CAAzB,GAA6BA,SAAS,CAACP,IAlBM,EAkBA;MAC9C+C,QAAQ,EAAEpB;IADoC,CAlBA,CAAxB,EAoBpBvB,MAAM,CAACH,KApBa,CAAxB;EAqBD,CA9De,EA8Db,CAACpD,MAAD,EAASf,KAAT,EAAgB2E,oBAAhB,EAAsCE,aAAtC,EAAqDxD,SAAS,CAAC2B,MAA/D,EAAuE1B,SAAvE,EAAkFE,aAAlF,EAAiGoD,gBAAjG,EAAmHpE,WAAnH,EAAgIC,YAAhI,EAA8IqE,aAA9I,EAA6J1F,SAA7J,EAAwKqF,SAAS,IAAI,IAAb,GAAoB,KAAK,CAAzB,GAA6BA,SAAS,CAACP,IAA/M,EAAqNQ,WAArN,CA9Da,CAAhB;EA+DA,MAAMwC,KAAK,GAAGnG,MAAM,CAACY,OAAP,CAAewF,4BAAf,CAA4CnH,KAA5C,CAAd;EACA,IAAIoH,SAAS,GAAGhI,SAAhB;;EACA,IAAIgI,SAAS,KAAK,MAAd,IAAwBF,KAA5B,EAAmC;IACjC,IAAIG,iBAAiB,GAAG,CAAxB;IACA,MAAMC,WAAW,GAAG9B,MAAM,CAAC5C,OAAP,CAAesE,KAAf,EAAsBK,MAAtB,CAA6B,CAACC,GAAD,YAAsB;MAAA,IAAhB,CAACC,GAAD,EAAMC,IAAN,CAAgB;MACrE,MAAMC,YAAY,GAAG,aAAaC,IAAb,CAAkBH,GAAlB,CAArB;;MACA,IAAI,CAACE,YAAL,EAAmB;QACjB,OAAOH,GAAP;MACD;;MACDH,iBAAiB,IAAI,CAArB;;MACA,IAAIK,IAAI,GAAGF,GAAX,EAAgB;QACd,OAAOE,IAAP;MACD;;MACD,OAAOF,GAAP;IACD,CAVmB,EAUjB,CAViB,CAApB;;IAWA,IAAIF,WAAW,GAAG,CAAd,IAAmBD,iBAAiB,GAAG,CAA3C,EAA8C;MAC5CD,SAAS,GAAGE,WAAZ;IACD;EACF;;EACD,MAAM5H,KAAK,GAAG9C,QAAQ,CAAC,EAAD,EAAKuD,SAAL,EAAgB;IACpC0H,SAAS,EAAEzI,SAAS,KAAK,MAAd,GAAuB,MAAvB,GAAgCA,SADP;IAEpC;IACAgI;EAHoC,CAAhB,CAAtB;;EAKA,IAAIF,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAACY,UAA3B,EAAuC;IACrC,MAAMC,QAAQ,GAAG7G,SAAS,CAAC8G,cAAV,KAA6B,QAA7B,GAAwC,gBAAxC,GAA2D,WAA5E;IACAtI,KAAK,CAACqI,QAAD,CAAL,GAAkBb,KAAK,CAACY,UAAxB;EACD;;EACD,IAAIZ,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAACe,aAA3B,EAA0C;IACxC,MAAMF,QAAQ,GAAG7G,SAAS,CAAC8G,cAAV,KAA6B,QAA7B,GAAwC,mBAAxC,GAA8D,cAA/E;IACA,IAAIE,aAAa,GAAGxI,KAAK,CAACqI,QAAD,CAAzB,CAFwC,CAGxC;;IACA,IAAI,OAAOG,aAAP,KAAyB,QAA7B,EAAuC;MACrCA,aAAa,GAAGC,QAAQ,CAACD,aAAa,IAAI,GAAlB,EAAuB,EAAvB,CAAxB;IACD;;IACDA,aAAa,IAAIhB,KAAK,CAACe,aAAvB;IACAvI,KAAK,CAACqI,QAAD,CAAL,GAAkBG,aAAlB;EACD;;EACD,MAAME,aAAa,GAAGrH,MAAM,CAACY,OAAP,CAAeyD,4BAAf,CAA4C,cAA5C,EAA4D,EAA5D,EAAgEpF,KAAhE,CAAtB;;EACA,IAAI,OAAOkB,SAAS,CAACmH,eAAjB,KAAqC,UAAzC,EAAqD;IACnD,IAAIC,kBAAJ;;IACA,MAAMC,0BAA0B,GAAGrI,KAAK,IAAI,CAAC,CAACoI,kBAAkB,GAAGnH,WAAW,CAACiB,KAAlC,KAA4C,IAA5C,GAAmD,KAAK,CAAxD,GAA4DkG,kBAAkB,CAACE,aAAhF,KAAkG,CAAtG,CAAxC;;IACA,MAAMC,SAAS,GAAG7L,QAAQ,CAAC,EAAD,EAAKmE,MAAM,CAACY,OAAP,CAAeqC,YAAf,CAA4BhE,KAA5B,CAAL,EAAyC;MACjE0I,cAAc,EAAEH,0BAA0B,KAAK,CADkB;MAEjEpJ,aAAa,EAAEoJ,0BAA0B,KAAKpH,WAAW,CAACwH,IAAZ,CAAiB3F,MAAjB,GAA0B,CAFP;MAGjEuF;IAHiE,CAAzC,CAA1B;;IAKAH,aAAa,CAACzC,IAAd,CAAmBzE,SAAS,CAACmH,eAAV,CAA0BI,SAA1B,CAAnB;EACD;;EACD,MAAMG,YAAY,GAAGpK,mBAAmB,CAAC,KAAD,EAAQ,EAAR,EAAY,EAAZ,CAAxC;EACA,MAAMqK,OAAO,GAAG9H,MAAM,CAACY,OAAP,CAAemH,UAAf,CAA0B9I,KAA1B,EAAiCwE,IAAjD;EACA,MAAMuE,KAAK,GAAG,EAAd;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3I,eAAe,CAAC2C,MAApC,EAA4CgG,CAAC,IAAI,CAAjD,EAAoD;IAClD,MAAM1E,MAAM,GAAGjE,eAAe,CAAC2I,CAAD,CAA9B;IACA,MAAMlC,yBAAyB,GAAGvG,mBAAmB,GAAGyI,CAAxD;IACA,MAAMC,eAAe,GAAGlI,MAAM,CAACY,OAAP,CAAeuH,2BAAf,CAA2ClJ,KAA3C,EAAkD8G,yBAAlD,CAAxB;;IACA,IAAImC,eAAe,IAAI,CAACA,eAAe,CAACE,gBAAxC,EAA0D;MACxD,IAAIN,OAAO,KAAK,aAAhB,EAA+B;QAC7B,MAAM;UACJ7B,OADI;UAEJvH;QAFI,IAGFwJ,eAAe,CAACjE,SAHpB;QAIA,MAAMA,SAAS,GAAG;UAChBvF,KADgB;UAEhBuH,OAFgB;UAGhBP,eAAe,EAAEvF,SAAS,CAACkI,sBAHX;UAIhBtC;QAJgB,CAAlB;QAMAiC,KAAK,CAACpD,IAAN,CAAWZ,OAAO,CAACT,MAAD,EAASU,SAAT,CAAlB;MACD,CAZD,MAYO;QACL,MAAM;UACJvF;QADI,IAEFwJ,eAAe,CAACjE,SAFpB;QAGA,MAAMqE,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWX,YAAY,EAAvB,CAArB;QACAG,KAAK,CAACpD,IAAN,EAAY,aAAahH,IAAI,CAACuC,SAAS,CAAC5B,KAAV,CAAgBkK,YAAjB,EAA+B;UAC1D/J,KAAK,EAAEA,KADmD;UAE1D4J,YAAY,EAAEA,YAF4C;UAG1DlF,KAAK,EAAEG,MAAM,CAACH,KAH4C;UAI1DwC,KAAK,EAAErC,MAAM,CAACqC;QAJ4C,CAA/B,EAK1BrC,MAAM,CAACH,KALmB,CAA7B;MAMD;IACF;EACF;;EACD,MAAMsF,cAAc,GAAGnJ,cAAc,GAAGc,iBAAxC;EACA,MAAMsI,aAAa,GAAGzJ,GAAG,GAAG;IAC1BS,OAAO,EAAEuD,YADiB;IAE1BtD,aAAa,EAAE0C,OAAO,CAAC,gBAAD,EAAmB1C,aAAnB,CAFI;IAG1BC,YAAY,EAAEyC,OAAO,CAAC,eAAD,EAAkBzC,YAAlB,CAHK;IAI1BC,YAAY,EAAEwC,OAAO,CAAC,eAAD,EAAkBxC,YAAlB;EAJK,CAAH,GAKrB,IALJ;EAMA,OAAO,aAAahC,KAAK,CAAC,KAAD,EAAQjC,QAAQ,CAAC;IACxCoE,GAAG,EAAES,SADmC;IAExC,WAAWzB,KAF6B;IAGxC,iBAAiBE,KAHuB;IAIxCyJ,IAAI,EAAE,KAJkC;IAKxChK,SAAS,EAAEzC,IAAI,CAAC,GAAGkL,aAAJ,EAAmB/I,OAAO,CAACE,IAA3B,EAAiCI,SAAjC,CALyB;IAMxC,iBAAiB+B,YANuB;IAOxC,iBAAiBxC,QAPuB;IAQxCQ,KAAK,EAAEA;EARiC,CAAD,EAStCgK,aATsC,EASvB5I,KATuB,EAShB;IACvBmG,QAAQ,EAAE,CAAC8B,KAAD,EAAQU,cAAc,GAAG,CAAjB,IAAsB,aAAa9K,IAAI,CAACa,SAAD,EAAY;MACnEC,KAAK,EAAEgK;IAD4D,CAAZ,CAA/C;EADa,CATgB,CAAhB,CAAzB;AAcD,CA/S4B,CAA7B;AAgTAG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwClK,OAAO,CAACmK,SAAR,GAAoB;EAC1D;EACA;EACA;EACA;EACAzJ,cAAc,EAAErD,SAAS,CAAC+M,MALgC;EAM1DzJ,mBAAmB,EAAEtD,SAAS,CAAC+M,MAN2B;;EAO1D;AACF;AACA;AACA;EACExJ,WAAW,EAAEvD,SAAS,CAACgN,MAXmC;;EAY1D;AACF;AACA;AACA;EACE/J,KAAK,EAAEjD,SAAS,CAAC+M,MAhByC;EAiB1D7K,aAAa,EAAElC,SAAS,CAACiN,IAjBiC;EAkB1DC,kBAAkB,EAAElN,SAAS,CAAC+M,MAlB4B;EAmB1DtJ,OAAO,EAAEzD,SAAS,CAACmN,IAnBuC;EAoB1DzJ,aAAa,EAAE1D,SAAS,CAACmN,IApBiC;EAqB1DxJ,YAAY,EAAE3D,SAAS,CAACmN,IArBkC;EAsB1DvJ,YAAY,EAAE5D,SAAS,CAACmN,IAtBkC;EAuB1DhK,QAAQ,EAAEnD,SAAS,CAACoN,KAAV,CAAgB,CAAC,QAAD,EAAW,MAAX,EAAmB,OAAnB,CAAhB,CAvBgD;EAwB1DhK,eAAe,EAAEpD,SAAS,CAACqN,OAAV,CAAkBrN,SAAS,CAACsN,MAA5B,CAxByC;EAyB1DtK,GAAG,EAAEhD,SAAS,CAACsN,MAzB2C;EA0B1DnL,SAAS,EAAEnC,SAAS,CAACuN,SAAV,CAAoB,CAACvN,SAAS,CAACoN,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4BpN,SAAS,CAAC+M,MAAtC,CAApB,CA1B+C;EA2B1DhK,KAAK,EAAE/C,SAAS,CAACuN,SAAV,CAAoB,CAACvN,SAAS,CAAC+M,MAAX,EAAmB/M,SAAS,CAACgN,MAA7B,CAApB,CA3BmD;EA4B1D/K,QAAQ,EAAEjC,SAAS,CAACiN,IA5BsC;;EA6B1D;AACF;AACA;AACA;EACEzJ,YAAY,EAAExD,SAAS,CAACgN,MAjCkC;EAkC1DQ,cAAc,EAAExN,SAAS,CAACqN,OAAV,CAAkBrN,SAAS,CAACsN,MAA5B;AAlC0C,CAA5D,GAmCI,KAAK,CAnCT;AAoCA,SAAS3K,OAAT"},"metadata":{},"sourceType":"module"}