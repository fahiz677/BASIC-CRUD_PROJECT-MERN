{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument } from '@mui/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector, unstable_gridFocusColumnGroupHeaderSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null,\n    columnGroupHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null,\n    columnGroupHeader: null\n  }\n});\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const publishCellFocusOut = React.useCallback((cell, event) => {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate(); // The row might have been deleted\n\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFocus = React.useCallback(function (field) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnGroupHeaderFocus = React.useCallback(function (field, depth) {\n    let event = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (cell) {\n      apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        tabIndex: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          cell: null\n        },\n        focus: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const getColumnGroupHeaderFocus = React.useCallback(() => unstable_gridFocusColumnGroupHeaderSelector(apiRef), [apiRef]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    const rowToFocus = currentPage.rows[rowIndexToFocus];\n    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(_ref => {\n    let {\n      id,\n      field\n    } = _ref;\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || event.key === 'Shift' || isNavigationKey(event.key)) {\n      return;\n    }\n\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback((_ref2, event) => {\n    let {\n      field\n    } = _ref2;\n\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const focussedColumnGroup = unstable_gridFocusColumnGroupHeaderSelector(apiRef);\n  const handleColumnGroupHeaderFocus = React.useCallback((_ref3, event) => {\n    let {\n      fields,\n      depth\n    } = _ref3;\n\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    if (focussedColumnGroup !== null && focussedColumnGroup.depth === depth && fields.includes(focussedColumnGroup.field)) {\n      // This group cell has already been focused\n      return;\n    }\n\n    apiRef.current.setColumnGroupHeaderFocus(fields[0], depth, event);\n  }, [apiRef, focussedColumnGroup]);\n  const handleBlur = React.useCallback(() => {\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null,\n        columnGroupHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseDown = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n\n    if (!canUpdateFocus) {\n      return;\n    }\n\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n\n      return;\n    }\n\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    }\n\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnGroupHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate(); // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n\n    const cell = gridFocusCellSelector(apiRef);\n\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef); // If the focused cell is in a row which does not exist anymore, then remove the focus\n\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnGroupHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  const focusApi = {\n    setCellFocus,\n    setColumnHeaderFocus\n  };\n  const focusPrivateApi = {\n    moveFocusToRelativeCell,\n    setColumnGroupHeaderFocus,\n    getColumnGroupHeaderFocus\n  };\n  useGridApiMethod(apiRef, focusApi, 'public');\n  useGridApiMethod(apiRef, focusPrivateApi, 'private');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderFocus', handleColumnGroupHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};","map":{"version":3,"names":["_extends","React","unstable_ownerDocument","ownerDocument","useGridApiMethod","useGridLogger","useGridApiEventHandler","isNavigationKey","gridFocusCellSelector","unstable_gridFocusColumnGroupHeaderSelector","gridVisibleColumnDefinitionsSelector","getVisibleRows","clamp","focusStateInitializer","state","focus","cell","columnHeader","columnGroupHeader","tabIndex","useGridFocus","apiRef","props","logger","lastClickedCell","useRef","publishCellFocusOut","useCallback","event","current","getRow","id","publishEvent","getCellParams","field","setCellFocus","focusedCell","setState","debug","forceUpdate","setColumnHeaderFocus","setColumnGroupHeaderFocus","depth","getColumnGroupHeaderFocus","moveFocusToRelativeCell","direction","columnIndexToFocus","getColumnIndex","rowIndexToFocus","getRowIndexRelativeToVisibleRows","visibleColumns","currentPage","pagination","paginationMode","length","rows","rowToFocus","colSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","columnToFocus","handleCellDoubleClick","handleCellKeyDown","params","key","handleColumnHeaderFocus","target","currentTarget","focussedColumnGroup","handleColumnGroupHeaderFocus","fields","includes","handleBlur","handleCellMouseDown","handleDocumentClick","cellParams","canUpdateFocus","unstable_applyPipeProcessors","cellElement","getCellElement","contains","handleCellModeChange","cellMode","handleRowSet","focusApi","focusPrivateApi","useEffect","doc","rootElementRef","addEventListener","removeEventListener"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument } from '@mui/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector, unstable_gridFocusColumnGroupHeaderSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null,\n    columnGroupHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null,\n    columnGroupHeader: null\n  }\n});\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const publishCellFocusOut = React.useCallback((cell, event) => {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnGroupHeaderFocus = React.useCallback((field, depth, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    if (cell) {\n      apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        tabIndex: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          cell: null\n        },\n        focus: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const getColumnGroupHeaderFocus = React.useCallback(() => unstable_gridFocusColumnGroupHeaderSelector(apiRef), [apiRef]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    const rowToFocus = currentPage.rows[rowIndexToFocus];\n    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(({\n    id,\n    field\n  }) => {\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || event.key === 'Shift' || isNavigationKey(event.key)) {\n      return;\n    }\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback(({\n    field\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const focussedColumnGroup = unstable_gridFocusColumnGroupHeaderSelector(apiRef);\n  const handleColumnGroupHeaderFocus = React.useCallback(({\n    fields,\n    depth\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    if (focussedColumnGroup !== null && focussedColumnGroup.depth === depth && fields.includes(focussedColumnGroup.field)) {\n      // This group cell has already been focused\n      return;\n    }\n    apiRef.current.setColumnGroupHeaderFocus(fields[0], depth, event);\n  }, [apiRef, focussedColumnGroup]);\n  const handleBlur = React.useCallback(() => {\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null,\n        columnGroupHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseDown = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n      return;\n    }\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    }\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnGroupHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate();\n\n      // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n    const cell = gridFocusCellSelector(apiRef);\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    // If the focused cell is in a row which does not exist anymore, then remove the focus\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnGroupHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  const focusApi = {\n    setCellFocus,\n    setColumnHeaderFocus\n  };\n  const focusPrivateApi = {\n    moveFocusToRelativeCell,\n    setColumnGroupHeaderFocus,\n    getColumnGroupHeaderFocus\n  };\n  useGridApiMethod(apiRef, focusApi, 'public');\n  useGridApiMethod(apiRef, focusPrivateApi, 'private');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderFocus', handleColumnGroupHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}