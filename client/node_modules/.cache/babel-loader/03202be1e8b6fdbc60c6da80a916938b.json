{"ast":null,"code":"import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridExpandedSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nimport { unstable_gridFocusColumnGroupHeaderSelector } from '../focus';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../columnGrouping/gridColumnGroupsSelector';\nimport { useGridSelector } from '../../utils/useGridSelector';\n\nfunction enrichPageRowsWithPinnedRows(apiRef, rows) {\n  const pinnedRows = gridPinnedRowsSelector(apiRef) || {};\n  return [...(pinnedRows.top || []), ...rows, ...(pinnedRows.bottom || [])];\n}\n\nconst getLeftColumnIndex = _ref => {\n  let {\n    currentColIndex,\n    firstColIndex,\n    lastColIndex,\n    direction\n  } = _ref;\n\n  if (direction === 'rtl') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  }\n\n  return null;\n};\n\nconst getRightColumnIndex = _ref2 => {\n  let {\n    currentColIndex,\n    firstColIndex,\n    lastColIndex,\n    direction\n  } = _ref2;\n\n  if (direction === 'rtl') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  }\n\n  return null;\n};\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\n\n\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const initialCurrentPageRows = useGridVisibleRows(apiRef, props).rows;\n  const theme = useTheme();\n  const currentPageRows = React.useMemo(() => enrichPageRowsWithPinnedRows(apiRef, initialCurrentPageRows), [apiRef, initialCurrentPageRows]);\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {number} rowIndex index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * TODO replace with apiRef.current.moveFocusToRelativeCell()\n   */\n\n  const goToCell = React.useCallback(function (colIndex, rowId) {\n    let closestColumnToUse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'left';\n    const visibleSortedRows = gridExpandedSortedRowEntriesSelector(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    } // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n\n\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === rowId);\n    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setCellFocus(rowId, field);\n  }, [apiRef, logger]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const goToGroupHeader = React.useCallback((colIndex, depth, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const {\n      field\n    } = apiRef.current.getVisibleColumns()[colIndex];\n    apiRef.current.setColumnGroupHeaderFocus(field, depth, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    return currentPageRows[rowIndex].id;\n  }, [currentPageRows]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return;\n    }\n\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    const columnGroupMaxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n\n          if (rightColIndex !== null) {\n            goToHeader(rightColIndex, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n\n          if (leftColIndex !== null) {\n            goToHeader(leftColIndex, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          if (columnGroupMaxDepth > 0) {\n            goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, theme.direction, goToCell, getRowIdFromIndex, goToHeader, goToGroupHeader]);\n  const focusedColumnGroup = useGridSelector(apiRef, unstable_gridFocusColumnGroupHeaderSelector);\n  const handleColumnGroupHeaderKeyDown = React.useCallback((params, event) => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return;\n    }\n\n    if (focusedColumnGroup === null) {\n      return;\n    }\n\n    const {\n      field: currentField,\n      depth: currentDepth\n    } = focusedColumnGroup;\n    const {\n      fields,\n      depth,\n      maxDepth\n    } = params;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const currentColIndex = apiRef.current.getColumnIndex(currentField);\n    const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (depth === maxDepth - 1) {\n            goToHeader(currentColIndex, event);\n          } else {\n            goToGroupHeader(currentColIndex, currentDepth + 1, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          if (depth > 0) {\n            goToGroupHeader(currentColIndex, currentDepth - 1, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;\n\n          if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {\n            goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          const remainingLeftColumns = fields.indexOf(currentField);\n\n          if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {\n            goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          goToGroupHeader(firstColIndex, currentDepth, event);\n          break;\n        }\n\n      case 'End':\n        {\n          goToGroupHeader(lastColIndex, currentDepth, event);\n          break;\n        }\n\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, focusedColumnGroup, currentPageRows.length, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    } // Get the most recent params because the cell mode may have changed by another listener\n\n\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n\n    if (cellParams.cellMode === GridCellModes.Edit || !isNavigationKey(event.key)) {\n      return;\n    }\n\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n\n    if (!canUpdateFocus) {\n      return;\n    }\n\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (currentPageRows.length === 0 || !dimensions) {\n      return;\n    }\n\n    const direction = theme.direction;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n\n          if (rightColIndex !== null) {\n            goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'left' : 'right');\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n\n          if (leftColIndex !== null) {\n            goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'right' : 'left');\n          }\n\n          break;\n        }\n\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          const field = params.field;\n\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n\n          const colDef = params.colDef;\n\n          if (colDef && colDef.type === 'treeDataGroup') {\n            break;\n          }\n\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n\n          break;\n        }\n\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, theme.direction, getRowIdFromIndex, goToCell, goToHeader]);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderKeyDown', handleColumnGroupHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n};","map":{"version":3,"names":["React","useTheme","gridVisibleColumnDefinitionsSelector","useGridLogger","useGridApiEventHandler","gridExpandedSortedRowEntriesSelector","useGridVisibleRows","GRID_CHECKBOX_SELECTION_COL_DEF","gridClasses","GridCellModes","isNavigationKey","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridPinnedRowsSelector","unstable_gridFocusColumnGroupHeaderSelector","gridColumnGroupsHeaderMaxDepthSelector","useGridSelector","enrichPageRowsWithPinnedRows","apiRef","rows","pinnedRows","top","bottom","getLeftColumnIndex","currentColIndex","firstColIndex","lastColIndex","direction","getRightColumnIndex","useGridKeyboardNavigation","props","logger","initialCurrentPageRows","theme","currentPageRows","useMemo","goToCell","useCallback","colIndex","rowId","closestColumnToUse","visibleSortedRows","nextCellColSpanInfo","current","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","rowIndexRelativeToAllRows","findIndex","row","id","debug","scrollToIndexes","rowIndex","field","getVisibleColumns","setCellFocus","goToHeader","event","setColumnHeaderFocus","goToGroupHeader","depth","setColumnGroupHeaderFocus","getRowIdFromIndex","handleColumnHeaderKeyDown","params","headerTitleNode","currentTarget","querySelector","columnHeaderTitleContainerContent","isFromInsideContent","contains","target","dimensions","getRootDimensions","viewportPageSize","getViewportPageSize","colIndexBefore","getColumnIndex","firstRowIndexInPage","lastRowIndexInPage","length","columnGroupMaxDepth","shouldPreventDefault","key","rightColIndex","leftColIndex","Math","min","ctrlKey","metaKey","toggleColumnMenu","preventDefault","focusedColumnGroup","handleColumnGroupHeaderKeyDown","currentField","currentDepth","fields","maxDepth","remainingRightColumns","indexOf","remainingLeftColumns","handleCellKeyDown","cellParams","getCellParams","cellMode","Edit","canUpdateFocus","unstable_applyPipeProcessors","cell","rowIndexBefore","shiftKey","colDef","type","nextRowIndex","max"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js"],"sourcesContent":["import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridExpandedSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nimport { unstable_gridFocusColumnGroupHeaderSelector } from '../focus';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../columnGrouping/gridColumnGroupsSelector';\nimport { useGridSelector } from '../../utils/useGridSelector';\nfunction enrichPageRowsWithPinnedRows(apiRef, rows) {\n  const pinnedRows = gridPinnedRowsSelector(apiRef) || {};\n  return [...(pinnedRows.top || []), ...rows, ...(pinnedRows.bottom || [])];\n}\nconst getLeftColumnIndex = ({\n  currentColIndex,\n  firstColIndex,\n  lastColIndex,\n  direction\n}) => {\n  if (direction === 'rtl') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  }\n  return null;\n};\nconst getRightColumnIndex = ({\n  currentColIndex,\n  firstColIndex,\n  lastColIndex,\n  direction\n}) => {\n  if (direction === 'rtl') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  }\n  return null;\n};\n\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const initialCurrentPageRows = useGridVisibleRows(apiRef, props).rows;\n  const theme = useTheme();\n  const currentPageRows = React.useMemo(() => enrichPageRowsWithPinnedRows(apiRef, initialCurrentPageRows), [apiRef, initialCurrentPageRows]);\n\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {number} rowIndex index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * TODO replace with apiRef.current.moveFocusToRelativeCell()\n   */\n  const goToCell = React.useCallback((colIndex, rowId, closestColumnToUse = 'left') => {\n    const visibleSortedRows = gridExpandedSortedRowEntriesSelector(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === rowId);\n    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setCellFocus(rowId, field);\n  }, [apiRef, logger]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const goToGroupHeader = React.useCallback((colIndex, depth, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const {\n      field\n    } = apiRef.current.getVisibleColumns()[colIndex];\n    apiRef.current.setColumnGroupHeaderFocus(field, depth, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    return currentPageRows[rowIndex].id;\n  }, [currentPageRows]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return;\n    }\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    const columnGroupMaxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (rightColIndex !== null) {\n            goToHeader(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (leftColIndex !== null) {\n            goToHeader(leftColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (columnGroupMaxDepth > 0) {\n            goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, theme.direction, goToCell, getRowIdFromIndex, goToHeader, goToGroupHeader]);\n  const focusedColumnGroup = useGridSelector(apiRef, unstable_gridFocusColumnGroupHeaderSelector);\n  const handleColumnGroupHeaderKeyDown = React.useCallback((params, event) => {\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return;\n    }\n    if (focusedColumnGroup === null) {\n      return;\n    }\n    const {\n      field: currentField,\n      depth: currentDepth\n    } = focusedColumnGroup;\n    const {\n      fields,\n      depth,\n      maxDepth\n    } = params;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const currentColIndex = apiRef.current.getColumnIndex(currentField);\n    const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (depth === maxDepth - 1) {\n            goToHeader(currentColIndex, event);\n          } else {\n            goToGroupHeader(currentColIndex, currentDepth + 1, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (depth > 0) {\n            goToGroupHeader(currentColIndex, currentDepth - 1, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;\n          if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {\n            goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const remainingLeftColumns = fields.indexOf(currentField);\n          if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {\n            goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToGroupHeader(firstColIndex, currentDepth, event);\n          break;\n        }\n      case 'End':\n        {\n          goToGroupHeader(lastColIndex, currentDepth, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, focusedColumnGroup, currentPageRows.length, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    // Get the most recent params because the cell mode may have changed by another listener\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    if (cellParams.cellMode === GridCellModes.Edit || !isNavigationKey(event.key)) {\n      return;\n    }\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    const dimensions = apiRef.current.getRootDimensions();\n    if (currentPageRows.length === 0 || !dimensions) {\n      return;\n    }\n    const direction = theme.direction;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n          if (rightColIndex !== null) {\n            goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'left' : 'right');\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n          if (leftColIndex !== null) {\n            goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'right' : 'left');\n          }\n          break;\n        }\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n          break;\n        }\n      case ' ':\n        {\n          const field = params.field;\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n          const colDef = params.colDef;\n          if (colDef && colDef.type === 'treeDataGroup') {\n            break;\n          }\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, theme.direction, getRowIdFromIndex, goToCell, goToHeader]);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderKeyDown', handleColumnGroupHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}