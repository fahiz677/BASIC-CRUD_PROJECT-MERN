{"ast":null,"code":"import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n      _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange\n  } = props;\n\n  const runIfEditModeIsRow = callback => function () {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...arguments);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        } // The row may already changed its mode\n\n\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        } // Always prevent going to the next element in the tab sequence because the focus is\n        // handled manually to support edit components rendered inside Portals\n\n\n        event.preventDefault();\n\n        if (!reason) {\n          const index = columnFields.findIndex(field => field === params.field);\n          const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];\n          apiRef.current.setCellFocus(params.id, nextFieldToFocus);\n        }\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (event.key === ' ') {\n        return; // Space scrolls to the last row\n      }\n\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          key: event.key,\n          reason\n        });\n\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n\n    if (reason === GridRowEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('17')) {\n        // In React 17, cleaning the input is enough.\n        // The sequence of events makes the key pressed by the end-users update the textbox directly.\n        startRowEditModeParams.deleteValue = !!field;\n      } else {\n        startRowEditModeParams.initialValue = key;\n      }\n    } else if (reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      onRowModesModelChange(newModel, {});\n    }\n\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      let newValue = apiRef.current.getCellValue(id, field);\n\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        newValue = deleteValue ? '' : initialValue;\n      }\n\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(resolve => {\n      const promises = [];\n\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        const _editingState$id = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(_ref => {\n        let [thisField, fieldProps] = _ref;\n\n        if (thisField === field) {\n          return;\n        }\n\n        const fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        const _editingState$id2 = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    if (!editingState[id]) {\n      return apiRef.current.getRow(id);\n    }\n\n    let rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(_ref2 => {\n      let [field, fieldProps] = _ref2;\n      const column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode\n  };\n  const editingPrivateApi = {\n    setRowEditingEditCellValue,\n    getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopRowEditMode may change it later\n\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(rowModesModel).forEach(_ref3 => {\n      let [id, params] = _ref3;\n\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n\n      const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};","map":{"version":3,"names":["_toPropertyKey","_objectWithoutPropertiesLoose","_extends","_excluded","_excluded2","React","unstable_useEventCallback","useEventCallback","useGridApiEventHandler","useGridApiOptionHandler","GridEditModes","GridRowModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","gridColumnFieldsSelector","buildWarning","gridRowsDataRowIdToIdLookupSelector","deepClone","GridRowEditStopReasons","GridRowEditStartReasons","missingOnProcessRowUpdateErrorWarning","useGridRowEditing","apiRef","props","rowModesModel","setRowModesModel","useState","rowModesModelRef","useRef","prevRowModesModel","focusTimeout","nextFocusedCell","processRowUpdate","onProcessRowUpdateError","rowModesModelProp","onRowModesModelChange","runIfEditModeIsRow","callback","editMode","Row","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getRowMode","handleCellDoubleClick","event","isEditable","Edit","rowParams","getRowParams","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusIn","handleCellFocusOut","View","setTimeout","_nextFocusedCell$curr","getRow","rowFocusOut","useEffect","clearTimeout","handleCellKeyDown","cellMode","which","key","escapeKeyDown","enterKeyDown","columnFields","filter","shiftKey","shiftTabKeyDown","length","tabKeyDown","preventDefault","index","findIndex","nextFieldToFocus","setCellFocus","printableKeyDown","ctrlKey","metaKey","deleteKeyDown","handleRowEditStart","startRowEditModeParams","fieldToFocus","version","startsWith","deleteValue","initialValue","startRowEditMode","handleRowEditStop","runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","stopRowEditMode","onRowEditStart","onRowEditStop","Cell","editingState","state","isEditing","Object","keys","updateRowModesModel","newModel","isNewModelDifferentFromProp","updateRowInRowModesModel","newProps","updateOrDeleteRowState","setState","newEditingState","editRows","forceUpdate","updateOrDeleteFieldState","other","updateStateToStartRowEditMode","reduce","acc","cellParams","newValue","getCellValue","value","error","isProcessingProps","updateStateToStopRowEditMode","focusedField","finishRowEditMode","moveFocusToRelativeCell","row","isSomeFieldProcessingProps","values","some","fieldProps","hasSomeFieldWithError","rowUpdate","getRowWithUpdatedValuesFromRowEditing","handleError","errorThrown","Promise","resolve","then","finalRowUpdate","updateRows","catch","setRowEditingEditCellValue","debounceMs","unstable_skipValueParser","skipValueParser","column","getColumn","parsedValue","valueParser","changeReason","preProcessEditCellProps","promises","hasChanged","_editingState$id","otherFieldsProps","map","promise","processedProps","push","entries","forEach","thisField","fieldColumn","_editingState$id2","all","valueSetter","editingApi","editingPrivateApi","idToIdLookup","copyOfPrevRowModesModel","_copyOfPrevRowModesMo","_idToIdLookup$id","prevMode","originalId"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/editing/useGridRowEditing.js"],"sourcesContent":["import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n  _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange\n  } = props;\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n    const rowParams = apiRef.current.getRowParams(params.id);\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    }\n    // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n      focusTimeout.current = null;\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        }\n\n        // The row may already changed its mode\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        // Always prevent going to the next element in the tab sequence because the focus is\n        // handled manually to support edit components rendered inside Portals\n        event.preventDefault();\n        if (!reason) {\n          const index = columnFields.findIndex(field => field === params.field);\n          const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];\n          apiRef.current.setCellFocus(params.id, nextFieldToFocus);\n        }\n      }\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      if (event.key === ' ') {\n        return; // Space scrolls to the last row\n      }\n\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          key: event.key,\n          reason\n        });\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n    if (reason === GridRowEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('17')) {\n        // In React 17, cleaning the input is enough.\n        // The sequence of events makes the key pressed by the end-users update the textbox directly.\n        startRowEditModeParams.deleteValue = !!field;\n      } else {\n        startRowEditModeParams.initialValue = key;\n      }\n    } else if (reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      onRowModesModelChange(newModel, {});\n    }\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n      let newValue = apiRef.current.getCellValue(id, field);\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        newValue = deleteValue ? '' : initialValue;\n      }\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      // Revert the mode in the rowModesModel prop back to \"edit\"\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit;\n        // Revert the mode in the rowModesModel prop back to \"edit\"\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n    return new Promise(resolve => {\n      const promises = [];\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n        const _editingState$id = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n        const fieldColumn = apiRef.current.getColumn(thisField);\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n        const _editingState$id2 = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id]) {\n      return apiRef.current.getRow(id);\n    }\n    let rowUpdate = _extends({}, row);\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode\n  };\n  const editingPrivateApi = {\n    setRowEditingEditCellValue,\n    getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopRowEditMode may change it later\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(rowModesModel).forEach(([id, params]) => {\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n      const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,MAAMC,SAAS,GAAG,CAAC,IAAD,CAAlB;AAAA,MACEC,UAAU,GAAG,CAAC,IAAD,CADf;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,yBAAyB,IAAIC,gBAAtC,QAA8D,YAA9D;AACA,SAASC,sBAAT,EAAiCC,uBAAjC,QAAgE,oCAAhE;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,kCAA5C;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,yBAAT,QAA0C,wBAA1C;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,wBAAT,QAAyC,gCAAzC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,mCAAT,QAAoD,0BAApD;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,sBAAT,EAAiCC,uBAAjC,QAAgE,sCAAhE;AACA,MAAMC,qCAAqC,GAAGL,YAAY,CAAC,CAAC,sHAAD,EAAyH,0IAAzH,EAAqQ,gFAArQ,CAAD,EAAyV,OAAzV,CAA1D;AACA,OAAO,MAAMM,iBAAiB,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;EAClD,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCrB,KAAK,CAACsB,QAAN,CAAe,EAAf,CAA1C;EACA,MAAMC,gBAAgB,GAAGvB,KAAK,CAACwB,MAAN,CAAaJ,aAAb,CAAzB;EACA,MAAMK,iBAAiB,GAAGzB,KAAK,CAACwB,MAAN,CAAa,EAAb,CAA1B;EACA,MAAME,YAAY,GAAG1B,KAAK,CAACwB,MAAN,CAAa,IAAb,CAArB;EACA,MAAMG,eAAe,GAAG3B,KAAK,CAACwB,MAAN,CAAa,IAAb,CAAxB;EACA,MAAM;IACJI,gBADI;IAEJC,uBAFI;IAGJT,aAAa,EAAEU,iBAHX;IAIJC;EAJI,IAKFZ,KALJ;;EAMA,MAAMa,kBAAkB,GAAGC,QAAQ,IAAI,YAAa;IAClD,IAAId,KAAK,CAACe,QAAN,KAAmB7B,aAAa,CAAC8B,GAArC,EAA0C;MACxCF,QAAQ,CAAC,YAAD,CAAR;IACD;EACF,CAJD;;EAKA,MAAMG,kBAAkB,GAAGpC,KAAK,CAACqC,WAAN,CAAkB,CAACC,EAAD,EAAKC,KAAL,KAAe;IAC1D,MAAMC,MAAM,GAAGtB,MAAM,CAACuB,OAAP,CAAeC,aAAf,CAA6BJ,EAA7B,EAAiCC,KAAjC,CAAf;;IACA,IAAI,CAACrB,MAAM,CAACuB,OAAP,CAAeE,cAAf,CAA8BH,MAA9B,CAAL,EAA4C;MAC1C,MAAM,IAAII,KAAJ,CAAW,yBAAwBN,EAAG,cAAaC,KAAM,mBAAzD,CAAN;IACD;EACF,CAL0B,EAKxB,CAACrB,MAAD,CALwB,CAA3B;EAMA,MAAM2B,gBAAgB,GAAG7C,KAAK,CAACqC,WAAN,CAAkB,CAACC,EAAD,EAAKQ,IAAL,KAAc;IACvD,IAAI5B,MAAM,CAACuB,OAAP,CAAeM,UAAf,CAA0BT,EAA1B,MAAkCQ,IAAtC,EAA4C;MAC1C,MAAM,IAAIF,KAAJ,CAAW,wBAAuBN,EAAG,cAAaQ,IAAK,QAAvD,CAAN;IACD;EACF,CAJwB,EAItB,CAAC5B,MAAD,CAJsB,CAAzB;EAKA,MAAM8B,qBAAqB,GAAGhD,KAAK,CAACqC,WAAN,CAAkB,CAACG,MAAD,EAASS,KAAT,KAAmB;IACjE,IAAI,CAACT,MAAM,CAACU,UAAZ,EAAwB;MACtB;IACD;;IACD,IAAIhC,MAAM,CAACuB,OAAP,CAAeM,UAAf,CAA0BP,MAAM,CAACF,EAAjC,MAAyChC,YAAY,CAAC6C,IAA1D,EAAgE;MAC9D;IACD;;IACD,MAAMC,SAAS,GAAGlC,MAAM,CAACuB,OAAP,CAAeY,YAAf,CAA4Bb,MAAM,CAACF,EAAnC,CAAlB;;IACA,MAAMgB,SAAS,GAAGzD,QAAQ,CAAC,EAAD,EAAKuD,SAAL,EAAgB;MACxCb,KAAK,EAAEC,MAAM,CAACD,KAD0B;MAExCgB,MAAM,EAAExC,uBAAuB,CAACyC;IAFQ,CAAhB,CAA1B;;IAIAtC,MAAM,CAACuB,OAAP,CAAegB,YAAf,CAA4B,cAA5B,EAA4CH,SAA5C,EAAuDL,KAAvD;EACD,CAb6B,EAa3B,CAAC/B,MAAD,CAb2B,CAA9B;EAcA,MAAMwC,iBAAiB,GAAG1D,KAAK,CAACqC,WAAN,CAAkBG,MAAM,IAAI;IACpDb,eAAe,CAACc,OAAhB,GAA0BD,MAA1B;EACD,CAFyB,EAEvB,EAFuB,CAA1B;EAGA,MAAMmB,kBAAkB,GAAG3D,KAAK,CAACqC,WAAN,CAAkB,CAACG,MAAD,EAASS,KAAT,KAAmB;IAC9D,IAAI,CAACT,MAAM,CAACU,UAAZ,EAAwB;MACtB;IACD;;IACD,IAAIhC,MAAM,CAACuB,OAAP,CAAeM,UAAf,CAA0BP,MAAM,CAACF,EAAjC,MAAyChC,YAAY,CAACsD,IAA1D,EAAgE;MAC9D;IACD,CAN6D,CAO9D;IACA;IACA;IACA;IACA;;;IACAjC,eAAe,CAACc,OAAhB,GAA0B,IAA1B;IACAf,YAAY,CAACe,OAAb,GAAuBoB,UAAU,CAAC,MAAM;MACtC,IAAIC,qBAAJ;;MACApC,YAAY,CAACe,OAAb,GAAuB,IAAvB;;MACA,IAAI,CAAC,CAACqB,qBAAqB,GAAGnC,eAAe,CAACc,OAAzC,KAAqD,IAArD,GAA4D,KAAK,CAAjE,GAAqEqB,qBAAqB,CAACxB,EAA5F,MAAoGE,MAAM,CAACF,EAA/G,EAAmH;QACjH;QACA,IAAI,CAACpB,MAAM,CAACuB,OAAP,CAAesB,MAAf,CAAsBvB,MAAM,CAACF,EAA7B,CAAL,EAAuC;UACrC;QACD,CAJgH,CAMjH;;;QACA,IAAIpB,MAAM,CAACuB,OAAP,CAAeM,UAAf,CAA0BP,MAAM,CAACF,EAAjC,MAAyChC,YAAY,CAACsD,IAA1D,EAAgE;UAC9D;QACD;;QACD,MAAMR,SAAS,GAAGlC,MAAM,CAACuB,OAAP,CAAeY,YAAf,CAA4Bb,MAAM,CAACF,EAAnC,CAAlB;;QACA,MAAMgB,SAAS,GAAGzD,QAAQ,CAAC,EAAD,EAAKuD,SAAL,EAAgB;UACxCb,KAAK,EAAEC,MAAM,CAACD,KAD0B;UAExCgB,MAAM,EAAEzC,sBAAsB,CAACkD;QAFS,CAAhB,CAA1B;;QAIA9C,MAAM,CAACuB,OAAP,CAAegB,YAAf,CAA4B,aAA5B,EAA2CH,SAA3C,EAAsDL,KAAtD;MACD;IACF,CApBgC,CAAjC;EAqBD,CAlC0B,EAkCxB,CAAC/B,MAAD,CAlCwB,CAA3B;EAmCAlB,KAAK,CAACiE,SAAN,CAAgB,MAAM;IACpB,OAAO,MAAM;MACXC,YAAY,CAACxC,YAAY,CAACe,OAAd,CAAZ;IACD,CAFD;EAGD,CAJD,EAIG,EAJH;EAKA,MAAM0B,iBAAiB,GAAGnE,KAAK,CAACqC,WAAN,CAAkB,CAACG,MAAD,EAASS,KAAT,KAAmB;IAC7D,IAAIT,MAAM,CAAC4B,QAAP,KAAoB9D,YAAY,CAAC6C,IAArC,EAA2C;MACzC;MACA;MACA,IAAIF,KAAK,CAACoB,KAAN,KAAgB,GAApB,EAAyB;QACvB;MACD;;MACD,IAAId,MAAJ;;MACA,IAAIN,KAAK,CAACqB,GAAN,KAAc,QAAlB,EAA4B;QAC1Bf,MAAM,GAAGzC,sBAAsB,CAACyD,aAAhC;MACD,CAFD,MAEO,IAAItB,KAAK,CAACqB,GAAN,KAAc,OAAlB,EAA2B;QAChCf,MAAM,GAAGzC,sBAAsB,CAAC0D,YAAhC;MACD,CAFM,MAEA,IAAIvB,KAAK,CAACqB,GAAN,KAAc,KAAlB,EAAyB;QAC9B,MAAMG,YAAY,GAAG/D,wBAAwB,CAACQ,MAAD,CAAxB,CAAiCwD,MAAjC,CAAwCnC,KAAK,IAAIrB,MAAM,CAACuB,OAAP,CAAeE,cAAf,CAA8BzB,MAAM,CAACuB,OAAP,CAAeC,aAAf,CAA6BF,MAAM,CAACF,EAApC,EAAwCC,KAAxC,CAA9B,CAAjD,CAArB;;QACA,IAAIU,KAAK,CAAC0B,QAAV,EAAoB;UAClB,IAAInC,MAAM,CAACD,KAAP,KAAiBkC,YAAY,CAAC,CAAD,CAAjC,EAAsC;YACpC;YACAlB,MAAM,GAAGzC,sBAAsB,CAAC8D,eAAhC;UACD;QACF,CALD,MAKO,IAAIpC,MAAM,CAACD,KAAP,KAAiBkC,YAAY,CAACA,YAAY,CAACI,MAAb,GAAsB,CAAvB,CAAjC,EAA4D;UACjE;UACAtB,MAAM,GAAGzC,sBAAsB,CAACgE,UAAhC;QACD,CAV6B,CAY9B;QACA;;;QACA7B,KAAK,CAAC8B,cAAN;;QACA,IAAI,CAACxB,MAAL,EAAa;UACX,MAAMyB,KAAK,GAAGP,YAAY,CAACQ,SAAb,CAAuB1C,KAAK,IAAIA,KAAK,KAAKC,MAAM,CAACD,KAAjD,CAAd;UACA,MAAM2C,gBAAgB,GAAGT,YAAY,CAACxB,KAAK,CAAC0B,QAAN,GAAiBK,KAAK,GAAG,CAAzB,GAA6BA,KAAK,GAAG,CAAtC,CAArC;UACA9D,MAAM,CAACuB,OAAP,CAAe0C,YAAf,CAA4B3C,MAAM,CAACF,EAAnC,EAAuC4C,gBAAvC;QACD;MACF;;MACD,IAAI3B,MAAJ,EAAY;QACV,MAAMH,SAAS,GAAGlC,MAAM,CAACuB,OAAP,CAAeY,YAAf,CAA4Bb,MAAM,CAACF,EAAnC,CAAlB;;QACA,MAAMgB,SAAS,GAAGzD,QAAQ,CAAC,EAAD,EAAKuD,SAAL,EAAgB;UACxCG,MADwC;UAExChB,KAAK,EAAEC,MAAM,CAACD;QAF0B,CAAhB,CAA1B;;QAIArB,MAAM,CAACuB,OAAP,CAAegB,YAAf,CAA4B,aAA5B,EAA2CH,SAA3C,EAAsDL,KAAtD;MACD;IACF,CAxCD,MAwCO,IAAIT,MAAM,CAACU,UAAX,EAAuB;MAC5B,IAAIK,MAAJ;;MACA,IAAIN,KAAK,CAACqB,GAAN,KAAc,GAAlB,EAAuB;QACrB,OADqB,CACb;MACT;;MAED,IAAI7D,cAAc,CAACwC,KAAD,CAAlB,EAA2B;QACzBM,MAAM,GAAGxC,uBAAuB,CAACqE,gBAAjC;MACD,CAFD,MAEO,IAAI,CAACnC,KAAK,CAACoC,OAAN,IAAiBpC,KAAK,CAACqC,OAAxB,KAAoCrC,KAAK,CAACqB,GAAN,KAAc,GAAtD,EAA2D;QAChEf,MAAM,GAAGxC,uBAAuB,CAACqE,gBAAjC;MACD,CAFM,MAEA,IAAInC,KAAK,CAACqB,GAAN,KAAc,OAAlB,EAA2B;QAChCf,MAAM,GAAGxC,uBAAuB,CAACyD,YAAjC;MACD,CAFM,MAEA,IAAIvB,KAAK,CAACqB,GAAN,KAAc,QAAd,IAA0BrB,KAAK,CAACqB,GAAN,KAAc,WAA5C,EAAyD;QAC9D;QACAf,MAAM,GAAGxC,uBAAuB,CAACwE,aAAjC;MACD;;MACD,IAAIhC,MAAJ,EAAY;QACV,MAAMH,SAAS,GAAGlC,MAAM,CAACuB,OAAP,CAAeY,YAAf,CAA4Bb,MAAM,CAACF,EAAnC,CAAlB;;QACA,MAAMgB,SAAS,GAAGzD,QAAQ,CAAC,EAAD,EAAKuD,SAAL,EAAgB;UACxCb,KAAK,EAAEC,MAAM,CAACD,KAD0B;UAExC+B,GAAG,EAAErB,KAAK,CAACqB,GAF6B;UAGxCf;QAHwC,CAAhB,CAA1B;;QAKArC,MAAM,CAACuB,OAAP,CAAegB,YAAf,CAA4B,cAA5B,EAA4CH,SAA5C,EAAuDL,KAAvD;MACD;IACF;EACF,CAnEyB,EAmEvB,CAAC/B,MAAD,CAnEuB,CAA1B;EAoEA,MAAMsE,kBAAkB,GAAGxF,KAAK,CAACqC,WAAN,CAAkBG,MAAM,IAAI;IACrD,MAAM;MACJF,EADI;MAEJC,KAFI;MAGJgB,MAHI;MAIJe;IAJI,IAKF9B,MALJ;IAMA,MAAMiD,sBAAsB,GAAG;MAC7BnD,EAD6B;MAE7BoD,YAAY,EAAEnD;IAFe,CAA/B;;IAIA,IAAIgB,MAAM,KAAKxC,uBAAuB,CAACqE,gBAAvC,EAAyD;MACvD,IAAIpF,KAAK,CAAC2F,OAAN,CAAcC,UAAd,CAAyB,IAAzB,CAAJ,EAAoC;QAClC;QACA;QACAH,sBAAsB,CAACI,WAAvB,GAAqC,CAAC,CAACtD,KAAvC;MACD,CAJD,MAIO;QACLkD,sBAAsB,CAACK,YAAvB,GAAsCxB,GAAtC;MACD;IACF,CARD,MAQO,IAAIf,MAAM,KAAKxC,uBAAuB,CAACwE,aAAvC,EAAsD;MAC3DE,sBAAsB,CAACI,WAAvB,GAAqC,CAAC,CAACtD,KAAvC;IACD;;IACDrB,MAAM,CAACuB,OAAP,CAAesD,gBAAf,CAAgCN,sBAAhC;EACD,CAvB0B,EAuBxB,CAACvE,MAAD,CAvBwB,CAA3B;EAwBA,MAAM8E,iBAAiB,GAAGhG,KAAK,CAACqC,WAAN,CAAkBG,MAAM,IAAI;IACpD,MAAM;MACJF,EADI;MAEJiB,MAFI;MAGJhB;IAHI,IAIFC,MAJJ;IAKAtB,MAAM,CAACuB,OAAP,CAAewD,+BAAf,CAA+C3D,EAA/C;IACA,IAAI4D,gBAAJ;;IACA,IAAI3C,MAAM,KAAKzC,sBAAsB,CAAC0D,YAAtC,EAAoD;MAClD0B,gBAAgB,GAAG,OAAnB;IACD,CAFD,MAEO,IAAI3C,MAAM,KAAKzC,sBAAsB,CAACgE,UAAtC,EAAkD;MACvDoB,gBAAgB,GAAG,OAAnB;IACD,CAFM,MAEA,IAAI3C,MAAM,KAAKzC,sBAAsB,CAAC8D,eAAtC,EAAuD;MAC5DsB,gBAAgB,GAAG,MAAnB;IACD;;IACD,MAAMC,mBAAmB,GAAG5C,MAAM,KAAK,eAAvC;IACArC,MAAM,CAACuB,OAAP,CAAe2D,eAAf,CAA+B;MAC7B9D,EAD6B;MAE7B6D,mBAF6B;MAG7B5D,KAH6B;MAI7B2D;IAJ6B,CAA/B;EAMD,CAtByB,EAsBvB,CAAChF,MAAD,CAtBuB,CAA1B;EAuBAf,sBAAsB,CAACe,MAAD,EAAS,iBAAT,EAA4Bc,kBAAkB,CAACgB,qBAAD,CAA9C,CAAtB;EACA7C,sBAAsB,CAACe,MAAD,EAAS,aAAT,EAAwBc,kBAAkB,CAAC0B,iBAAD,CAA1C,CAAtB;EACAvD,sBAAsB,CAACe,MAAD,EAAS,cAAT,EAAyBc,kBAAkB,CAAC2B,kBAAD,CAA3C,CAAtB;EACAxD,sBAAsB,CAACe,MAAD,EAAS,aAAT,EAAwBc,kBAAkB,CAACmC,iBAAD,CAA1C,CAAtB;EACAhE,sBAAsB,CAACe,MAAD,EAAS,cAAT,EAAyBc,kBAAkB,CAACwD,kBAAD,CAA3C,CAAtB;EACArF,sBAAsB,CAACe,MAAD,EAAS,aAAT,EAAwBc,kBAAkB,CAACgE,iBAAD,CAA1C,CAAtB;EACA5F,uBAAuB,CAACc,MAAD,EAAS,cAAT,EAAyBC,KAAK,CAACkF,cAA/B,CAAvB;EACAjG,uBAAuB,CAACc,MAAD,EAAS,aAAT,EAAwBC,KAAK,CAACmF,aAA9B,CAAvB;EACA,MAAMvD,UAAU,GAAG/C,KAAK,CAACqC,WAAN,CAAkBC,EAAE,IAAI;IACzC,IAAInB,KAAK,CAACe,QAAN,KAAmB7B,aAAa,CAACkG,IAArC,EAA2C;MACzC,OAAOjG,YAAY,CAACsD,IAApB;IACD;;IACD,MAAM4C,YAAY,GAAGhG,yBAAyB,CAACU,MAAM,CAACuB,OAAP,CAAegE,KAAhB,CAA9C;IACA,MAAMC,SAAS,GAAGF,YAAY,CAAClE,EAAD,CAAZ,IAAoBqE,MAAM,CAACC,IAAP,CAAYJ,YAAY,CAAClE,EAAD,CAAxB,EAA8BuC,MAA9B,GAAuC,CAA7E;IACA,OAAO6B,SAAS,GAAGpG,YAAY,CAAC6C,IAAhB,GAAuB7C,YAAY,CAACsD,IAApD;EACD,CAPkB,EAOhB,CAAC1C,MAAD,EAASC,KAAK,CAACe,QAAf,CAPgB,CAAnB;EAQA,MAAM2E,mBAAmB,GAAG3G,gBAAgB,CAAC4G,QAAQ,IAAI;IACvD,MAAMC,2BAA2B,GAAGD,QAAQ,KAAK3F,KAAK,CAACC,aAAvD;;IACA,IAAIW,qBAAqB,IAAIgF,2BAA7B,EAA0D;MACxDhF,qBAAqB,CAAC+E,QAAD,EAAW,EAAX,CAArB;IACD;;IACD,IAAI3F,KAAK,CAACC,aAAN,IAAuB2F,2BAA3B,EAAwD;MACtD,OADsD,CAC9C;IACT;;IAED1F,gBAAgB,CAACyF,QAAD,CAAhB;IACAvF,gBAAgB,CAACkB,OAAjB,GAA2BqE,QAA3B;IACA5F,MAAM,CAACuB,OAAP,CAAegB,YAAf,CAA4B,qBAA5B,EAAmDqD,QAAnD;EACD,CAZ2C,CAA5C;EAaA,MAAME,wBAAwB,GAAGhH,KAAK,CAACqC,WAAN,CAAkB,CAACC,EAAD,EAAK2E,QAAL,KAAkB;IACnE,MAAMH,QAAQ,GAAGjH,QAAQ,CAAC,EAAD,EAAK0B,gBAAgB,CAACkB,OAAtB,CAAzB;;IACA,IAAIwE,QAAQ,KAAK,IAAjB,EAAuB;MACrBH,QAAQ,CAACxE,EAAD,CAAR,GAAezC,QAAQ,CAAC,EAAD,EAAKoH,QAAL,CAAvB;IACD,CAFD,MAEO;MACL,OAAOH,QAAQ,CAACxE,EAAD,CAAf;IACD;;IACDuE,mBAAmB,CAACC,QAAD,CAAnB;EACD,CARgC,EAQ9B,CAACD,mBAAD,CAR8B,CAAjC;EASA,MAAMK,sBAAsB,GAAGlH,KAAK,CAACqC,WAAN,CAAkB,CAACC,EAAD,EAAK2E,QAAL,KAAkB;IACjE/F,MAAM,CAACuB,OAAP,CAAe0E,QAAf,CAAwBV,KAAK,IAAI;MAC/B,MAAMW,eAAe,GAAGvH,QAAQ,CAAC,EAAD,EAAK4G,KAAK,CAACY,QAAX,CAAhC;;MACA,IAAIJ,QAAQ,KAAK,IAAjB,EAAuB;QACrBG,eAAe,CAAC9E,EAAD,CAAf,GAAsB2E,QAAtB;MACD,CAFD,MAEO;QACL,OAAOG,eAAe,CAAC9E,EAAD,CAAtB;MACD;;MACD,OAAOzC,QAAQ,CAAC,EAAD,EAAK4G,KAAL,EAAY;QACzBY,QAAQ,EAAED;MADe,CAAZ,CAAf;IAGD,CAVD;IAWAlG,MAAM,CAACuB,OAAP,CAAe6E,WAAf;EACD,CAb8B,EAa5B,CAACpG,MAAD,CAb4B,CAA/B;EAcA,MAAMqG,wBAAwB,GAAGvH,KAAK,CAACqC,WAAN,CAAkB,CAACC,EAAD,EAAKC,KAAL,EAAY0E,QAAZ,KAAyB;IAC1E/F,MAAM,CAACuB,OAAP,CAAe0E,QAAf,CAAwBV,KAAK,IAAI;MAC/B,MAAMW,eAAe,GAAGvH,QAAQ,CAAC,EAAD,EAAK4G,KAAK,CAACY,QAAX,CAAhC;;MACA,IAAIJ,QAAQ,KAAK,IAAjB,EAAuB;QACrBG,eAAe,CAAC9E,EAAD,CAAf,GAAsBzC,QAAQ,CAAC,EAAD,EAAKuH,eAAe,CAAC9E,EAAD,CAApB,EAA0B;UACtD,CAACC,KAAD,GAAS1C,QAAQ,CAAC,EAAD,EAAKoH,QAAL;QADqC,CAA1B,CAA9B;MAGD,CAJD,MAIO;QACL,OAAOG,eAAe,CAAC9E,EAAD,CAAf,CAAoBC,KAApB,CAAP;;QACA,IAAIoE,MAAM,CAACC,IAAP,CAAYQ,eAAe,CAAC9E,EAAD,CAA3B,EAAiCuC,MAAjC,KAA4C,CAAhD,EAAmD;UACjD,OAAOuC,eAAe,CAAC9E,EAAD,CAAtB;QACD;MACF;;MACD,OAAOzC,QAAQ,CAAC,EAAD,EAAK4G,KAAL,EAAY;QACzBY,QAAQ,EAAED;MADe,CAAZ,CAAf;IAGD,CAfD;IAgBAlG,MAAM,CAACuB,OAAP,CAAe6E,WAAf;EACD,CAlBgC,EAkB9B,CAACpG,MAAD,CAlB8B,CAAjC;EAmBA,MAAM6E,gBAAgB,GAAG/F,KAAK,CAACqC,WAAN,CAAkBG,MAAM,IAAI;IACnD,MAAM;MACFF;IADE,IAEAE,MAFN;IAAA,MAGEgF,KAAK,GAAG5H,6BAA6B,CAAC4C,MAAD,EAAS1C,SAAT,CAHvC;;IAIA+C,gBAAgB,CAACP,EAAD,EAAKhC,YAAY,CAACsD,IAAlB,CAAhB;IACAoD,wBAAwB,CAAC1E,EAAD,EAAKzC,QAAQ,CAAC;MACpCiD,IAAI,EAAExC,YAAY,CAAC6C;IADiB,CAAD,EAElCqE,KAFkC,CAAb,CAAxB;EAGD,CATwB,EAStB,CAAC3E,gBAAD,EAAmBmE,wBAAnB,CATsB,CAAzB;EAUA,MAAMS,6BAA6B,GAAGvH,gBAAgB,CAACsC,MAAM,IAAI;IAC/D,MAAM;MACJF,EADI;MAEJoD,YAFI;MAGJG,WAHI;MAIJC;IAJI,IAKFtD,MALJ;IAMA,MAAMiC,YAAY,GAAG/D,wBAAwB,CAACQ,MAAD,CAA7C;IACA,MAAM+F,QAAQ,GAAGxC,YAAY,CAACiD,MAAb,CAAoB,CAACC,GAAD,EAAMpF,KAAN,KAAgB;MACnD,MAAMqF,UAAU,GAAG1G,MAAM,CAACuB,OAAP,CAAeC,aAAf,CAA6BJ,EAA7B,EAAiCC,KAAjC,CAAnB;;MACA,IAAI,CAACqF,UAAU,CAAC1E,UAAhB,EAA4B;QAC1B,OAAOyE,GAAP;MACD;;MACD,IAAIE,QAAQ,GAAG3G,MAAM,CAACuB,OAAP,CAAeqF,YAAf,CAA4BxF,EAA5B,EAAgCC,KAAhC,CAAf;;MACA,IAAImD,YAAY,KAAKnD,KAAjB,KAA2BsD,WAAW,IAAIC,YAA1C,CAAJ,EAA6D;QAC3D+B,QAAQ,GAAGhC,WAAW,GAAG,EAAH,GAAQC,YAA9B;MACD;;MACD6B,GAAG,CAACpF,KAAD,CAAH,GAAa;QACXwF,KAAK,EAAEF,QADI;QAEXG,KAAK,EAAE,KAFI;QAGXC,iBAAiB,EAAE;MAHR,CAAb;MAKA,OAAON,GAAP;IACD,CAfgB,EAed,EAfc,CAAjB;IAgBAT,sBAAsB,CAAC5E,EAAD,EAAK2E,QAAL,CAAtB;;IACA,IAAIvB,YAAJ,EAAkB;MAChBxE,MAAM,CAACuB,OAAP,CAAe0C,YAAf,CAA4B7C,EAA5B,EAAgCoD,YAAhC;IACD;EACF,CA5BqD,CAAtD;EA6BA,MAAMU,eAAe,GAAGpG,KAAK,CAACqC,WAAN,CAAkBG,MAAM,IAAI;IAClD,MAAM;MACFF;IADE,IAEAE,MAFN;IAAA,MAGEgF,KAAK,GAAG5H,6BAA6B,CAAC4C,MAAD,EAASzC,UAAT,CAHvC;;IAIA8C,gBAAgB,CAACP,EAAD,EAAKhC,YAAY,CAAC6C,IAAlB,CAAhB;IACA6D,wBAAwB,CAAC1E,EAAD,EAAKzC,QAAQ,CAAC;MACpCiD,IAAI,EAAExC,YAAY,CAACsD;IADiB,CAAD,EAElC4D,KAFkC,CAAb,CAAxB;EAGD,CATuB,EASrB,CAAC3E,gBAAD,EAAmBmE,wBAAnB,CATqB,CAAxB;EAUA,MAAMkB,4BAA4B,GAAGhI,gBAAgB,CAACsC,MAAM,IAAI;IAC9D,MAAM;MACJF,EADI;MAEJ6D,mBAFI;MAGJ5D,KAAK,EAAE4F,YAHH;MAIJjC,gBAAgB,GAAG;IAJf,IAKF1D,MALJ;IAMAtB,MAAM,CAACuB,OAAP,CAAewD,+BAAf,CAA+C3D,EAA/C;;IACA,MAAM8F,iBAAiB,GAAG,MAAM;MAC9B,IAAIlC,gBAAgB,KAAK,MAArB,IAA+BiC,YAAnC,EAAiD;QAC/CjH,MAAM,CAACuB,OAAP,CAAe4F,uBAAf,CAAuC/F,EAAvC,EAA2C6F,YAA3C,EAAyDjC,gBAAzD;MACD;;MACDgB,sBAAsB,CAAC5E,EAAD,EAAK,IAAL,CAAtB;MACA0E,wBAAwB,CAAC1E,EAAD,EAAK,IAAL,CAAxB;IACD,CAND;;IAOA,IAAI6D,mBAAJ,EAAyB;MACvBiC,iBAAiB;MACjB;IACD;;IACD,MAAM5B,YAAY,GAAGhG,yBAAyB,CAACU,MAAM,CAACuB,OAAP,CAAegE,KAAhB,CAA9C;IACA,MAAM6B,GAAG,GAAGpH,MAAM,CAACuB,OAAP,CAAesB,MAAf,CAAsBzB,EAAtB,CAAZ;IACA,MAAMiG,0BAA0B,GAAG5B,MAAM,CAAC6B,MAAP,CAAchC,YAAY,CAAClE,EAAD,CAA1B,EAAgCmG,IAAhC,CAAqCC,UAAU,IAAIA,UAAU,CAACT,iBAA9D,CAAnC;;IACA,IAAIM,0BAAJ,EAAgC;MAC9B9G,iBAAiB,CAACgB,OAAlB,CAA0BH,EAA1B,EAA8BQ,IAA9B,GAAqCxC,YAAY,CAAC6C,IAAlD;MACA;IACD;;IACD,MAAMwF,qBAAqB,GAAGhC,MAAM,CAAC6B,MAAP,CAAchC,YAAY,CAAClE,EAAD,CAA1B,EAAgCmG,IAAhC,CAAqCC,UAAU,IAAIA,UAAU,CAACV,KAA9D,CAA9B;;IACA,IAAIW,qBAAJ,EAA2B;MACzBlH,iBAAiB,CAACgB,OAAlB,CAA0BH,EAA1B,EAA8BQ,IAA9B,GAAqCxC,YAAY,CAAC6C,IAAlD,CADyB,CAEzB;;MACA6D,wBAAwB,CAAC1E,EAAD,EAAK;QAC3BQ,IAAI,EAAExC,YAAY,CAAC6C;MADQ,CAAL,CAAxB;MAGA;IACD;;IACD,MAAMyF,SAAS,GAAG1H,MAAM,CAACuB,OAAP,CAAeoG,qCAAf,CAAqDvG,EAArD,CAAlB;;IACA,IAAIV,gBAAJ,EAAsB;MACpB,MAAMkH,WAAW,GAAGC,WAAW,IAAI;QACjCtH,iBAAiB,CAACgB,OAAlB,CAA0BH,EAA1B,EAA8BQ,IAA9B,GAAqCxC,YAAY,CAAC6C,IAAlD,CADiC,CAEjC;;QACA6D,wBAAwB,CAAC1E,EAAD,EAAK;UAC3BQ,IAAI,EAAExC,YAAY,CAAC6C;QADQ,CAAL,CAAxB;;QAGA,IAAItB,uBAAJ,EAA6B;UAC3BA,uBAAuB,CAACkH,WAAD,CAAvB;QACD,CAFD,MAEO;UACL/H,qCAAqC;QACtC;MACF,CAXD;;MAYA,IAAI;QACFgI,OAAO,CAACC,OAAR,CAAgBrH,gBAAgB,CAACgH,SAAD,EAAYN,GAAZ,CAAhC,EAAkDY,IAAlD,CAAuDC,cAAc,IAAI;UACvEjI,MAAM,CAACuB,OAAP,CAAe2G,UAAf,CAA0B,CAACD,cAAD,CAA1B;UACAf,iBAAiB;QAClB,CAHD,EAGGiB,KAHH,CAGSP,WAHT;MAID,CALD,CAKE,OAAOC,WAAP,EAAoB;QACpBD,WAAW,CAACC,WAAD,CAAX;MACD;IACF,CArBD,MAqBO;MACL7H,MAAM,CAACuB,OAAP,CAAe2G,UAAf,CAA0B,CAACR,SAAD,CAA1B;MACAR,iBAAiB;IAClB;EACF,CA7DoD,CAArD;EA8DA,MAAMkB,0BAA0B,GAAGtJ,KAAK,CAACqC,WAAN,CAAkBG,MAAM,IAAI;IAC7D,MAAM;MACJF,EADI;MAEJC,KAFI;MAGJwF,KAHI;MAIJwB,UAJI;MAKJC,wBAAwB,EAAEC;IALtB,IAMFjH,MANJ;IAOAJ,kBAAkB,CAACE,EAAD,EAAKC,KAAL,CAAlB;IACA,MAAMmH,MAAM,GAAGxI,MAAM,CAACuB,OAAP,CAAekH,SAAf,CAAyBpH,KAAzB,CAAf;IACA,MAAM+F,GAAG,GAAGpH,MAAM,CAACuB,OAAP,CAAesB,MAAf,CAAsBzB,EAAtB,CAAZ;IACA,IAAIsH,WAAW,GAAG7B,KAAlB;;IACA,IAAI2B,MAAM,CAACG,WAAP,IAAsB,CAACJ,eAA3B,EAA4C;MAC1CG,WAAW,GAAGF,MAAM,CAACG,WAAP,CAAmB9B,KAAnB,EAA0B7G,MAAM,CAACuB,OAAP,CAAeC,aAAf,CAA6BJ,EAA7B,EAAiCC,KAAjC,CAA1B,CAAd;IACD;;IACD,IAAIiE,YAAY,GAAGhG,yBAAyB,CAACU,MAAM,CAACuB,OAAP,CAAegE,KAAhB,CAA5C;;IACA,IAAIQ,QAAQ,GAAGpH,QAAQ,CAAC,EAAD,EAAK2G,YAAY,CAAClE,EAAD,CAAZ,CAAiBC,KAAjB,CAAL,EAA8B;MACnDwF,KAAK,EAAE6B,WAD4C;MAEnDE,YAAY,EAAEP,UAAU,GAAG,2BAAH,GAAiC;IAFN,CAA9B,CAAvB;;IAIA,IAAI,CAACG,MAAM,CAACK,uBAAZ,EAAqC;MACnCxC,wBAAwB,CAACjF,EAAD,EAAKC,KAAL,EAAY0E,QAAZ,CAAxB;IACD;;IACD,OAAO,IAAI+B,OAAJ,CAAYC,OAAO,IAAI;MAC5B,MAAMe,QAAQ,GAAG,EAAjB;;MACA,IAAIN,MAAM,CAACK,uBAAX,EAAoC;QAClC,MAAME,UAAU,GAAGhD,QAAQ,CAACc,KAAT,KAAmBvB,YAAY,CAAClE,EAAD,CAAZ,CAAiBC,KAAjB,EAAwBwF,KAA9D;QACAd,QAAQ,GAAGpH,QAAQ,CAAC,EAAD,EAAKoH,QAAL,EAAe;UAChCgB,iBAAiB,EAAE;QADa,CAAf,CAAnB;QAGAV,wBAAwB,CAACjF,EAAD,EAAKC,KAAL,EAAY0E,QAAZ,CAAxB;;QACA,MAAMiD,gBAAgB,GAAG1D,YAAY,CAAClE,EAAD,CAArC;QAAA,MACE6H,gBAAgB,GAAGvK,6BAA6B,CAACsK,gBAAD,EAAmB,CAAC3H,KAAD,EAAQ6H,GAAR,CAAYzK,cAAZ,CAAnB,CADlD;;QAEA,MAAM0K,OAAO,GAAGrB,OAAO,CAACC,OAAR,CAAgBS,MAAM,CAACK,uBAAP,CAA+B;UAC7DzH,EAD6D;UAE7DgG,GAF6D;UAG7DnH,KAAK,EAAE8F,QAHsD;UAI7DgD,UAJ6D;UAK7DE;QAL6D,CAA/B,CAAhB,EAMZjB,IANY,CAMPoB,cAAc,IAAI;UACzB;UACA;UACA,IAAIpJ,MAAM,CAACuB,OAAP,CAAeM,UAAf,CAA0BT,EAA1B,MAAkChC,YAAY,CAACsD,IAAnD,EAAyD;YACvDqF,OAAO,CAAC,KAAD,CAAP;YACA;UACD;;UACDzC,YAAY,GAAGhG,yBAAyB,CAACU,MAAM,CAACuB,OAAP,CAAegE,KAAhB,CAAxC;UACA6D,cAAc,GAAGzK,QAAQ,CAAC,EAAD,EAAKyK,cAAL,EAAqB;YAC5CrC,iBAAiB,EAAE;UADyB,CAArB,CAAzB,CARyB,CAWzB;UACA;UACA;;UACAqC,cAAc,CAACvC,KAAf,GAAuB2B,MAAM,CAACK,uBAAP,GAAiCvD,YAAY,CAAClE,EAAD,CAAZ,CAAiBC,KAAjB,EAAwBwF,KAAzD,GAAiE6B,WAAxF;UACArC,wBAAwB,CAACjF,EAAD,EAAKC,KAAL,EAAY+H,cAAZ,CAAxB;QACD,CAtBe,CAAhB;QAuBAN,QAAQ,CAACO,IAAT,CAAcF,OAAd;MACD;;MACD1D,MAAM,CAAC6D,OAAP,CAAehE,YAAY,CAAClE,EAAD,CAA3B,EAAiCmI,OAAjC,CAAyC,QAA6B;QAAA,IAA5B,CAACC,SAAD,EAAYhC,UAAZ,CAA4B;;QACpE,IAAIgC,SAAS,KAAKnI,KAAlB,EAAyB;UACvB;QACD;;QACD,MAAMoI,WAAW,GAAGzJ,MAAM,CAACuB,OAAP,CAAekH,SAAf,CAAyBe,SAAzB,CAApB;;QACA,IAAI,CAACC,WAAW,CAACZ,uBAAjB,EAA0C;UACxC;QACD;;QACDrB,UAAU,GAAG7I,QAAQ,CAAC,EAAD,EAAK6I,UAAL,EAAiB;UACpCT,iBAAiB,EAAE;QADiB,CAAjB,CAArB;QAGAV,wBAAwB,CAACjF,EAAD,EAAKoI,SAAL,EAAgBhC,UAAhB,CAAxB;QACAlC,YAAY,GAAGhG,yBAAyB,CAACU,MAAM,CAACuB,OAAP,CAAegE,KAAhB,CAAxC;;QACA,MAAMmE,iBAAiB,GAAGpE,YAAY,CAAClE,EAAD,CAAtC;QAAA,MACE6H,gBAAgB,GAAGvK,6BAA6B,CAACgL,iBAAD,EAAoB,CAACF,SAAD,EAAYN,GAAZ,CAAgBzK,cAAhB,CAApB,CADlD;;QAEA,MAAM0K,OAAO,GAAGrB,OAAO,CAACC,OAAR,CAAgB0B,WAAW,CAACZ,uBAAZ,CAAoC;UAClEzH,EADkE;UAElEgG,GAFkE;UAGlEnH,KAAK,EAAEuH,UAH2D;UAIlEuB,UAAU,EAAE,KAJsD;UAKlEE;QALkE,CAApC,CAAhB,EAMZjB,IANY,CAMPoB,cAAc,IAAI;UACzB;UACA;UACA,IAAIpJ,MAAM,CAACuB,OAAP,CAAeM,UAAf,CAA0BT,EAA1B,MAAkChC,YAAY,CAACsD,IAAnD,EAAyD;YACvDqF,OAAO,CAAC,KAAD,CAAP;YACA;UACD;;UACDqB,cAAc,GAAGzK,QAAQ,CAAC,EAAD,EAAKyK,cAAL,EAAqB;YAC5CrC,iBAAiB,EAAE;UADyB,CAArB,CAAzB;UAGAV,wBAAwB,CAACjF,EAAD,EAAKoI,SAAL,EAAgBJ,cAAhB,CAAxB;QACD,CAjBe,CAAhB;QAkBAN,QAAQ,CAACO,IAAT,CAAcF,OAAd;MACD,CAlCD;MAmCArB,OAAO,CAAC6B,GAAR,CAAYb,QAAZ,EAAsBd,IAAtB,CAA2B,MAAM;QAC/B,IAAIhI,MAAM,CAACuB,OAAP,CAAeM,UAAf,CAA0BT,EAA1B,MAAkChC,YAAY,CAAC6C,IAAnD,EAAyD;UACvDqD,YAAY,GAAGhG,yBAAyB,CAACU,MAAM,CAACuB,OAAP,CAAegE,KAAhB,CAAxC;UACAwC,OAAO,CAAC,CAACzC,YAAY,CAAClE,EAAD,CAAZ,CAAiBC,KAAjB,EAAwByF,KAA1B,CAAP;QACD,CAHD,MAGO;UACLiB,OAAO,CAAC,KAAD,CAAP;QACD;MACF,CAPD;IAQD,CA9EM,CAAP;EA+ED,CAtGkC,EAsGhC,CAAC/H,MAAD,EAASkB,kBAAT,EAA6BmF,wBAA7B,CAtGgC,CAAnC;EAuGA,MAAMsB,qCAAqC,GAAG7I,KAAK,CAACqC,WAAN,CAAkBC,EAAE,IAAI;IACpE,MAAMkE,YAAY,GAAGhG,yBAAyB,CAACU,MAAM,CAACuB,OAAP,CAAegE,KAAhB,CAA9C;IACA,MAAM6B,GAAG,GAAGpH,MAAM,CAACuB,OAAP,CAAesB,MAAf,CAAsBzB,EAAtB,CAAZ;;IACA,IAAI,CAACkE,YAAY,CAAClE,EAAD,CAAjB,EAAuB;MACrB,OAAOpB,MAAM,CAACuB,OAAP,CAAesB,MAAf,CAAsBzB,EAAtB,CAAP;IACD;;IACD,IAAIsG,SAAS,GAAG/I,QAAQ,CAAC,EAAD,EAAKyI,GAAL,CAAxB;;IACA3B,MAAM,CAAC6D,OAAP,CAAehE,YAAY,CAAClE,EAAD,CAA3B,EAAiCmI,OAAjC,CAAyC,SAAyB;MAAA,IAAxB,CAAClI,KAAD,EAAQmG,UAAR,CAAwB;MAChE,MAAMgB,MAAM,GAAGxI,MAAM,CAACuB,OAAP,CAAekH,SAAf,CAAyBpH,KAAzB,CAAf;;MACA,IAAImH,MAAM,CAACoB,WAAX,EAAwB;QACtBlC,SAAS,GAAGc,MAAM,CAACoB,WAAP,CAAmB;UAC7B/C,KAAK,EAAEW,UAAU,CAACX,KADW;UAE7BO,GAAG,EAAEM;QAFwB,CAAnB,CAAZ;MAID,CALD,MAKO;QACLA,SAAS,CAACrG,KAAD,CAAT,GAAmBmG,UAAU,CAACX,KAA9B;MACD;IACF,CAVD;IAWA,OAAOa,SAAP;EACD,CAnB6C,EAmB3C,CAAC1H,MAAD,CAnB2C,CAA9C;EAoBA,MAAM6J,UAAU,GAAG;IACjBhI,UADiB;IAEjBgD,gBAFiB;IAGjBK;EAHiB,CAAnB;EAKA,MAAM4E,iBAAiB,GAAG;IACxB1B,0BADwB;IAExBT;EAFwB,CAA1B;EAIAtI,gBAAgB,CAACW,MAAD,EAAS6J,UAAT,EAAqB,QAArB,CAAhB;EACAxK,gBAAgB,CAACW,MAAD,EAAS8J,iBAAT,EAA4B,SAA5B,CAAhB;EACAhL,KAAK,CAACiE,SAAN,CAAgB,MAAM;IACpB,IAAInC,iBAAJ,EAAuB;MACrB+E,mBAAmB,CAAC/E,iBAAD,CAAnB;IACD;EACF,CAJD,EAIG,CAACA,iBAAD,EAAoB+E,mBAApB,CAJH;EAKA7G,KAAK,CAACiE,SAAN,CAAgB,MAAM;IACpB,MAAMgH,YAAY,GAAGrK,mCAAmC,CAACM,MAAD,CAAxD,CADoB,CAGpB;;IACA,MAAMgK,uBAAuB,GAAGzJ,iBAAiB,CAACgB,OAAlD;IACAhB,iBAAiB,CAACgB,OAAlB,GAA4B5B,SAAS,CAACO,aAAD,CAArC,CALoB,CAKkC;;IAEtDuF,MAAM,CAAC6D,OAAP,CAAepJ,aAAf,EAA8BqJ,OAA9B,CAAsC,SAAkB;MAAA,IAAjB,CAACnI,EAAD,EAAKE,MAAL,CAAiB;;MACtD,IAAI2I,qBAAJ,EAA2BC,gBAA3B;;MACA,MAAMC,QAAQ,GAAG,CAAC,CAACF,qBAAqB,GAAGD,uBAAuB,CAAC5I,EAAD,CAAhD,KAAyD,IAAzD,GAAgE,KAAK,CAArE,GAAyE6I,qBAAqB,CAACrI,IAAhG,KAAyGxC,YAAY,CAACsD,IAAvI;MACA,MAAM0H,UAAU,GAAG,CAACF,gBAAgB,GAAGH,YAAY,CAAC3I,EAAD,CAAhC,KAAyC,IAAzC,GAAgD8I,gBAAhD,GAAmE9I,EAAtF;;MACA,IAAIE,MAAM,CAACM,IAAP,KAAgBxC,YAAY,CAAC6C,IAA7B,IAAqCkI,QAAQ,KAAK/K,YAAY,CAACsD,IAAnE,EAAyE;QACvE6D,6BAA6B,CAAC5H,QAAQ,CAAC;UACrCyC,EAAE,EAAEgJ;QADiC,CAAD,EAEnC9I,MAFmC,CAAT,CAA7B;MAGD,CAJD,MAIO,IAAIA,MAAM,CAACM,IAAP,KAAgBxC,YAAY,CAACsD,IAA7B,IAAqCyH,QAAQ,KAAK/K,YAAY,CAAC6C,IAAnE,EAAyE;QAC9E+E,4BAA4B,CAACrI,QAAQ,CAAC;UACpCyC,EAAE,EAAEgJ;QADgC,CAAD,EAElC9I,MAFkC,CAAT,CAA5B;MAGD;IACF,CAbD;EAcD,CArBD,EAqBG,CAACtB,MAAD,EAASE,aAAT,EAAwBqG,6BAAxB,EAAuDS,4BAAvD,CArBH;AAsBD,CA/hBM"},"metadata":{},"sourceType":"module"}