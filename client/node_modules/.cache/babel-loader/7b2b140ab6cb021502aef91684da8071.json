{"ast":null,"code":"import { GridFilterInputValue } from '../components/panel/filterPanel/GridFilterInputValue';\nimport { escapeRegExp } from '../utils/utils';\nimport { GridFilterInputMultipleValue } from '../components/panel/filterPanel/GridFilterInputMultipleValue';\nexport const getGridStringQuickFilterFn = value => {\n  if (!value) {\n    return null;\n  }\n\n  const filterRegex = new RegExp(escapeRegExp(value), 'i');\n  return _ref => {\n    let {\n      formattedValue: columnValue\n    } = _ref;\n    return columnValue != null ? filterRegex.test(columnValue.toString()) : false;\n  };\n};\nexport const getGridStringOperators = function () {\n  let disableTrim = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return [{\n    value: 'contains',\n    getApplyFilterFn: filterItem => {\n      if (!filterItem.value) {\n        return null;\n      }\n\n      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n      const filterRegex = new RegExp(escapeRegExp(filterItemValue), 'i');\n      return _ref2 => {\n        let {\n          value\n        } = _ref2;\n        return value != null ? filterRegex.test(value.toString()) : false;\n      };\n    },\n    InputComponent: GridFilterInputValue\n  }, {\n    value: 'equals',\n    getApplyFilterFn: filterItem => {\n      if (!filterItem.value) {\n        return null;\n      }\n\n      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n      const collator = new Intl.Collator(undefined, {\n        sensitivity: 'base',\n        usage: 'search'\n      });\n      return _ref3 => {\n        let {\n          value\n        } = _ref3;\n        return value != null ? collator.compare(filterItemValue, value.toString()) === 0 : false;\n      };\n    },\n    InputComponent: GridFilterInputValue\n  }, {\n    value: 'startsWith',\n    getApplyFilterFn: filterItem => {\n      if (!filterItem.value) {\n        return null;\n      }\n\n      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n      const filterRegex = new RegExp(`^${escapeRegExp(filterItemValue)}.*$`, 'i');\n      return _ref4 => {\n        let {\n          value\n        } = _ref4;\n        return value != null ? filterRegex.test(value.toString()) : false;\n      };\n    },\n    InputComponent: GridFilterInputValue\n  }, {\n    value: 'endsWith',\n    getApplyFilterFn: filterItem => {\n      if (!filterItem.value) {\n        return null;\n      }\n\n      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n      const filterRegex = new RegExp(`.*${escapeRegExp(filterItemValue)}$`, 'i');\n      return _ref5 => {\n        let {\n          value\n        } = _ref5;\n        return value != null ? filterRegex.test(value.toString()) : false;\n      };\n    },\n    InputComponent: GridFilterInputValue\n  }, {\n    value: 'isEmpty',\n    getApplyFilterFn: () => {\n      return _ref6 => {\n        let {\n          value\n        } = _ref6;\n        return value === '' || value == null;\n      };\n    },\n    requiresFilterValue: false\n  }, {\n    value: 'isNotEmpty',\n    getApplyFilterFn: () => {\n      return _ref7 => {\n        let {\n          value\n        } = _ref7;\n        return value !== '' && value != null;\n      };\n    },\n    requiresFilterValue: false\n  }, {\n    value: 'isAnyOf',\n    getApplyFilterFn: filterItem => {\n      if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {\n        return null;\n      }\n\n      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.map(val => val.trim());\n      const collator = new Intl.Collator(undefined, {\n        sensitivity: 'base',\n        usage: 'search'\n      });\n      return _ref8 => {\n        let {\n          value\n        } = _ref8;\n        return value != null ? filterItemValue.some(filterValue => {\n          return collator.compare(filterValue, value.toString() || '') === 0;\n        }) : false;\n      };\n    },\n    InputComponent: GridFilterInputMultipleValue\n  }];\n};","map":{"version":3,"names":["GridFilterInputValue","escapeRegExp","GridFilterInputMultipleValue","getGridStringQuickFilterFn","value","filterRegex","RegExp","formattedValue","columnValue","test","toString","getGridStringOperators","disableTrim","getApplyFilterFn","filterItem","filterItemValue","trim","InputComponent","collator","Intl","Collator","undefined","sensitivity","usage","compare","requiresFilterValue","Array","isArray","length","map","val","some","filterValue"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/colDef/gridStringOperators.js"],"sourcesContent":["import { GridFilterInputValue } from '../components/panel/filterPanel/GridFilterInputValue';\nimport { escapeRegExp } from '../utils/utils';\nimport { GridFilterInputMultipleValue } from '../components/panel/filterPanel/GridFilterInputMultipleValue';\nexport const getGridStringQuickFilterFn = value => {\n  if (!value) {\n    return null;\n  }\n  const filterRegex = new RegExp(escapeRegExp(value), 'i');\n  return ({\n    formattedValue: columnValue\n  }) => {\n    return columnValue != null ? filterRegex.test(columnValue.toString()) : false;\n  };\n};\nexport const getGridStringOperators = (disableTrim = false) => [{\n  value: 'contains',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const filterRegex = new RegExp(escapeRegExp(filterItemValue), 'i');\n    return ({\n      value\n    }) => {\n      return value != null ? filterRegex.test(value.toString()) : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'equals',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const collator = new Intl.Collator(undefined, {\n      sensitivity: 'base',\n      usage: 'search'\n    });\n    return ({\n      value\n    }) => {\n      return value != null ? collator.compare(filterItemValue, value.toString()) === 0 : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'startsWith',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const filterRegex = new RegExp(`^${escapeRegExp(filterItemValue)}.*$`, 'i');\n    return ({\n      value\n    }) => {\n      return value != null ? filterRegex.test(value.toString()) : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'endsWith',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const filterRegex = new RegExp(`.*${escapeRegExp(filterItemValue)}$`, 'i');\n    return ({\n      value\n    }) => {\n      return value != null ? filterRegex.test(value.toString()) : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'isEmpty',\n  getApplyFilterFn: () => {\n    return ({\n      value\n    }) => {\n      return value === '' || value == null;\n    };\n  },\n  requiresFilterValue: false\n}, {\n  value: 'isNotEmpty',\n  getApplyFilterFn: () => {\n    return ({\n      value\n    }) => {\n      return value !== '' && value != null;\n    };\n  },\n  requiresFilterValue: false\n}, {\n  value: 'isAnyOf',\n  getApplyFilterFn: filterItem => {\n    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {\n      return null;\n    }\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.map(val => val.trim());\n    const collator = new Intl.Collator(undefined, {\n      sensitivity: 'base',\n      usage: 'search'\n    });\n    return ({\n      value\n    }) => value != null ? filterItemValue.some(filterValue => {\n      return collator.compare(filterValue, value.toString() || '') === 0;\n    }) : false;\n  },\n  InputComponent: GridFilterInputMultipleValue\n}];"],"mappings":"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"},"metadata":{},"sourceType":"module"}