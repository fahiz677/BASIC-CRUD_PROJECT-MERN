{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridRowSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridExpandedSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { getVisibleRows, useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\n\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n\n  return [selectionModelProp];\n};\n\nexport const rowSelectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n\n  return _extends({}, state, {\n    rowSelection: props.rowSelection ? (_getSelectionModelPro = getSelectionModelPropValue(props.rowSelectionModel)) != null ? _getSelectionModelPro : [] : []\n  });\n};\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\n\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n\n  const runIfRowSelectionIsEnabled = callback => function () {\n    if (props.rowSelection) {\n      callback(...arguments);\n    }\n  };\n\n  const propRowSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableMultipleRowSelection,\n    disableRowSelectionOnClick,\n    pagination,\n    paginationMode,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleRowSelection || checkboxSelection;\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n\n      if (startIndex === endIndex) {\n        return;\n      }\n\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !props.checkboxSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n\n    const currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : []\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, props.checkboxSelection]);\n  const isRowSelected = React.useCallback(id => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n\n    const rowNode = apiRef.current.getRowNode(id);\n\n    if ((rowNode == null ? void 0 : rowNode.type) === 'footer' || (rowNode == null ? void 0 : rowNode.type) === 'pinnedRow') {\n      return false;\n    }\n\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback(function (id) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n\n    lastRowToggled.current = id;\n\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setRowSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridRowSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n\n      if (isSelected) {\n        newSelection.push(id);\n      }\n\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback(function (ids) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(function (_ref) {\n    let {\n      startId,\n      endId\n    } = _ref;\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`); // Using rows from all pages allow to select a range across several pages\n\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n  /**\n   * EVENTS\n   */\n\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef); // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      apiRef.current.setRowSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey; // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    var _closest;\n\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n\n    const field = (_closest = event.target.closest(`.${gridClasses.cell}`)) == null ? void 0 : _closest.getAttribute('data-field');\n\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    const rowNode = apiRef.current.getRowNode(params.id);\n\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    } // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n\n\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n\n    if (event.key === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    } // props.isRowSelectable changed\n\n\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      return;\n    }\n\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      const {\n        rows: currentPageRows\n      } = getVisibleRows(apiRef, {\n        pagination,\n        paginationMode\n      });\n      const currentPageRowsLookup = currentPageRows.reduce((acc, _ref2) => {\n        let {\n          id\n        } = _ref2;\n        acc[id] = true;\n        return acc;\n      }, {});\n      const firstSelectableRow = currentSelection.find(id => {\n        let isSelectable = true;\n\n        if (isRowSelectable) {\n          isSelectable = isRowSelectable(id);\n        }\n\n        return isSelectable && currentPageRowsLookup[id]; // Check if the row is in the current page\n      });\n      apiRef.current.setRowSelectionModel(firstSelectableRow !== undefined ? [firstSelectableRow] : []);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleRowSelection, isRowSelectable, pagination, paginationMode, props.rowSelection]);\n};","map":{"version":3,"names":["_extends","React","GridSignature","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridRowsLookupSelector","gridRowSelectionStateSelector","selectedGridRowsSelector","selectedIdsLookupSelector","gridPaginatedVisibleSortedGridRowIdsSelector","gridFocusCellSelector","gridExpandedSortedRowIdsSelector","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GridCellModes","isKeyboardEvent","isNavigationKey","getVisibleRows","useGridVisibleRows","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridClasses","getSelectionModelPropValue","selectionModelProp","prevSelectionModel","Array","isArray","rowSelectionStateInitializer","state","props","_getSelectionModelPro","rowSelection","rowSelectionModel","useGridRowSelection","apiRef","logger","runIfRowSelectionIsEnabled","callback","propRowSelectionModel","useMemo","current","lastRowToggled","useRef","registerControlState","stateId","propModel","propOnChange","onRowSelectionModelChange","stateSelector","changeEvent","checkboxSelection","disableMultipleRowSelection","disableRowSelectionOnClick","pagination","paginationMode","isRowSelectable","propIsRowSelectable","canHaveMultipleSelection","visibleRows","expandMouseRowRangeSelection","useCallback","id","_lastRowToggled$curre","endId","startId","isSelected","isRowSelected","visibleRowIds","startIndex","findIndex","rowId","endIndex","selectRowRange","setRowSelectionModel","model","signature","DataGrid","length","Error","join","currentModel","debug","setState","forceUpdate","includes","getRowParams","rowNode","getRowNode","type","getSelectedRows","selectRow","resetSelection","selection","newSelection","filter","el","push","isSelectionValid","selectRows","ids","selectableIds","selectionLookup","forEach","Object","values","getRow","allPagesRowIds","indexOf","start","end","rowsBetweenStartAndEnd","slice","selectionPublicApi","selectionPrivateApi","removeOutdatedSelection","keepNonExistentRowsSelected","currentSelection","rowsLookup","hasChanged","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","handleRowClick","params","_closest","field","target","closest","cell","getAttribute","column","getColumn","shiftKey","preventSelectionOnShift","_window$getSelection","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","value","handleHeaderSelectionCheckboxChange","shouldLimitSelectionToCurrentPage","checkboxSelectionVisibleOnly","rowsToBeSelected","handleCellKeyDown","getCellMode","Edit","currentTarget","contains","key","focusCell","preventDefault","isNextRowSelected","newRowIndex","getRowIndexRelativeToVisibleRows","previousRowIndex","rows","map","row","getAllRowIds","useEffect","undefined","isStateControlled","currentPageRows","currentPageRowsLookup","reduce","acc","firstSelectableRow","find","isSelectable"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelection.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridRowSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridExpandedSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { getVisibleRows, useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n  return [selectionModelProp];\n};\nexport const rowSelectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n  return _extends({}, state, {\n    rowSelection: props.rowSelection ? (_getSelectionModelPro = getSelectionModelPropValue(props.rowSelectionModel)) != null ? _getSelectionModelPro : [] : []\n  });\n};\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = callback => (...args) => {\n    if (props.rowSelection) {\n      callback(...args);\n    }\n  };\n  const propRowSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableMultipleRowSelection,\n    disableRowSelectionOnClick,\n    pagination,\n    paginationMode,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleRowSelection || checkboxSelection;\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !props.checkboxSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : []\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, props.checkboxSelection]);\n  const isRowSelected = React.useCallback(id => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = apiRef.current.getRowNode(id);\n    if ((rowNode == null ? void 0 : rowNode.type) === 'footer' || (rowNode == null ? void 0 : rowNode.type) === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setRowSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridRowSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n      if (isSelected) {\n        newSelection.push(id);\n      }\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * EVENTS\n   */\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n\n    // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      apiRef.current.setRowSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    var _closest;\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = (_closest = event.target.closest(`.${gridClasses.cell}`)) == null ? void 0 : _closest.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = apiRef.current.getRowNode(params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (event.key === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      const {\n        rows: currentPageRows\n      } = getVisibleRows(apiRef, {\n        pagination,\n        paginationMode\n      });\n      const currentPageRowsLookup = currentPageRows.reduce((acc, {\n        id\n      }) => {\n        acc[id] = true;\n        return acc;\n      }, {});\n      const firstSelectableRow = currentSelection.find(id => {\n        let isSelectable = true;\n        if (isRowSelectable) {\n          isSelectable = isRowSelectable(id);\n        }\n        return isSelectable && currentPageRowsLookup[id]; // Check if the row is in the current page\n      });\n\n      apiRef.current.setRowSelectionModel(firstSelectableRow !== undefined ? [firstSelectableRow] : []);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleRowSelection, isRowSelectable, pagination, paginationMode, props.rowSelection]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}