{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildRootGroup, GRID_ROOT_GROUP_ID } from './gridRowsUtils';\n\nconst createFlatRowTree = rows => {\n  const tree = {\n    [GRID_ROOT_GROUP_ID]: _extends({}, buildRootGroup(), {\n      children: rows\n    })\n  };\n\n  for (let i = 0; i < rows.length; i += 1) {\n    const rowId = rows[i];\n    tree[rowId] = {\n      id: rowId,\n      depth: 0,\n      parent: GRID_ROOT_GROUP_ID,\n      type: 'leaf',\n      groupingKey: null\n    };\n  }\n\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepths: {\n      0: rows.length\n    },\n    dataRowIds: rows\n  };\n};\n\nconst updateFlatRowTree = _ref => {\n  let {\n    previousTree,\n    actions\n  } = _ref;\n\n  const tree = _extends({}, previousTree);\n\n  const idsToRemoveFromRootGroup = {};\n\n  for (let i = 0; i < actions.remove.length; i += 1) {\n    const idToDelete = actions.remove[i];\n    idsToRemoveFromRootGroup[idToDelete] = true;\n    delete tree[idToDelete];\n  }\n\n  for (let i = 0; i < actions.insert.length; i += 1) {\n    const idToInsert = actions.insert[i];\n    tree[idToInsert] = {\n      id: idToInsert,\n      depth: 0,\n      parent: GRID_ROOT_GROUP_ID,\n      type: 'leaf',\n      groupingKey: null\n    };\n  } // TODO rows v6: Support row unpinning\n\n\n  const rootGroup = tree[GRID_ROOT_GROUP_ID];\n  let rootGroupChildren = [...rootGroup.children, ...actions.insert];\n\n  if (Object.values(idsToRemoveFromRootGroup).length) {\n    rootGroupChildren = rootGroupChildren.filter(id => !idsToRemoveFromRootGroup[id]);\n  }\n\n  tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n    children: rootGroupChildren\n  });\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepths: {\n      0: rootGroupChildren.length\n    },\n    dataRowIds: rootGroupChildren\n  };\n};\n\nconst flatRowTreeCreationMethod = params => {\n  if (params.updates.type === 'full') {\n    return createFlatRowTree(params.updates.rows);\n  }\n\n  return updateFlatRowTree({\n    previousTree: params.previousTree,\n    actions: params.updates.actions\n  });\n};\n\nexport const useGridRowsPreProcessors = apiRef => {\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};","map":{"version":3,"names":["_extends","GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","buildRootGroup","GRID_ROOT_GROUP_ID","createFlatRowTree","rows","tree","children","i","length","rowId","id","depth","parent","type","groupingKey","groupingName","treeDepths","dataRowIds","updateFlatRowTree","previousTree","actions","idsToRemoveFromRootGroup","remove","idToDelete","insert","idToInsert","rootGroup","rootGroupChildren","Object","values","filter","flatRowTreeCreationMethod","params","updates","useGridRowsPreProcessors","apiRef"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsPreProcessors.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildRootGroup, GRID_ROOT_GROUP_ID } from './gridRowsUtils';\nconst createFlatRowTree = rows => {\n  const tree = {\n    [GRID_ROOT_GROUP_ID]: _extends({}, buildRootGroup(), {\n      children: rows\n    })\n  };\n  for (let i = 0; i < rows.length; i += 1) {\n    const rowId = rows[i];\n    tree[rowId] = {\n      id: rowId,\n      depth: 0,\n      parent: GRID_ROOT_GROUP_ID,\n      type: 'leaf',\n      groupingKey: null\n    };\n  }\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepths: {\n      0: rows.length\n    },\n    dataRowIds: rows\n  };\n};\nconst updateFlatRowTree = ({\n  previousTree,\n  actions\n}) => {\n  const tree = _extends({}, previousTree);\n  const idsToRemoveFromRootGroup = {};\n  for (let i = 0; i < actions.remove.length; i += 1) {\n    const idToDelete = actions.remove[i];\n    idsToRemoveFromRootGroup[idToDelete] = true;\n    delete tree[idToDelete];\n  }\n  for (let i = 0; i < actions.insert.length; i += 1) {\n    const idToInsert = actions.insert[i];\n    tree[idToInsert] = {\n      id: idToInsert,\n      depth: 0,\n      parent: GRID_ROOT_GROUP_ID,\n      type: 'leaf',\n      groupingKey: null\n    };\n  }\n\n  // TODO rows v6: Support row unpinning\n\n  const rootGroup = tree[GRID_ROOT_GROUP_ID];\n  let rootGroupChildren = [...rootGroup.children, ...actions.insert];\n  if (Object.values(idsToRemoveFromRootGroup).length) {\n    rootGroupChildren = rootGroupChildren.filter(id => !idsToRemoveFromRootGroup[id]);\n  }\n  tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n    children: rootGroupChildren\n  });\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepths: {\n      0: rootGroupChildren.length\n    },\n    dataRowIds: rootGroupChildren\n  };\n};\nconst flatRowTreeCreationMethod = params => {\n  if (params.updates.type === 'full') {\n    return createFlatRowTree(params.updates.rows);\n  }\n  return updateFlatRowTree({\n    previousTree: params.previousTree,\n    actions: params.updates.actions\n  });\n};\nexport const useGridRowsPreProcessors = apiRef => {\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}