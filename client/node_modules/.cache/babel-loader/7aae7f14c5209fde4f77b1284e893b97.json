{"ast":null,"code":"import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnPositionsSelector, gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridPageSelector, gridPageSizeSelector } from '../pagination/gridPaginationSelector';\nimport { gridRowCountSelector } from '../rows/gridRowsSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridExpandedSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { gridClasses } from '../../../constants/gridClasses'; // Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js\n// Similar to https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\n\nfunction scrollIntoView(dimensions) {\n  const {\n    clientHeight,\n    scrollTop,\n    offsetHeight,\n    offsetTop\n  } = dimensions;\n  const elementBottom = offsetTop + offsetHeight; // Always scroll to top when cell is higher than viewport to avoid scroll jump\n  // See https://github.com/mui/mui-x/issues/4513 and https://github.com/mui/mui-x/issues/4514\n\n  if (offsetHeight > clientHeight) {\n    return offsetTop;\n  }\n\n  if (elementBottom - clientHeight > scrollTop) {\n    return elementBottom - clientHeight;\n  }\n\n  if (offsetTop < scrollTop) {\n    return offsetTop;\n  }\n\n  return undefined;\n}\n/**\n * @requires useGridPagination (state) - can be after, async only\n * @requires useGridColumns (state) - can be after, async only\n * @requires useGridRows (state) - can be after, async only\n * @requires useGridRowsMeta (state) - can be after, async only\n * @requires useGridFilter (state)\n * @requires useGridColumnSpanning (method)\n */\n\n\nexport const useGridScroll = (apiRef, props) => {\n  const theme = useTheme();\n  const logger = useGridLogger(apiRef, 'useGridScroll');\n  const colRef = apiRef.current.columnHeadersElementRef;\n  const virtualScrollerRef = apiRef.current.virtualScrollerRef;\n  const visibleSortedRows = useGridSelector(apiRef, gridExpandedSortedRowEntriesSelector);\n  const scrollToIndexes = React.useCallback(params => {\n    const totalRowCount = gridRowCountSelector(apiRef);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const scrollToHeader = params.rowIndex == null;\n\n    if (!scrollToHeader && totalRowCount === 0 || visibleColumns.length === 0) {\n      return false;\n    }\n\n    logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);\n    let scrollCoordinates = {};\n\n    if (params.colIndex != null) {\n      const columnPositions = gridColumnPositionsSelector(apiRef);\n      let cellWidth;\n\n      if (typeof params.rowIndex !== 'undefined') {\n        var _visibleSortedRows$pa;\n\n        const rowId = (_visibleSortedRows$pa = visibleSortedRows[params.rowIndex]) == null ? void 0 : _visibleSortedRows$pa.id;\n        const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, params.colIndex);\n\n        if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n          cellWidth = cellColSpanInfo.cellProps.width;\n        }\n      }\n\n      if (typeof cellWidth === 'undefined') {\n        cellWidth = visibleColumns[params.colIndex].computedWidth;\n      } // When using RTL, `scrollLeft` becomes negative, so we must ensure that we only compare values.\n\n\n      scrollCoordinates.left = scrollIntoView({\n        clientHeight: virtualScrollerRef.current.clientWidth,\n        scrollTop: Math.abs(virtualScrollerRef.current.scrollLeft),\n        offsetHeight: cellWidth,\n        offsetTop: columnPositions[params.colIndex]\n      });\n    }\n\n    if (params.rowIndex != null) {\n      var _querySelector, _querySelector2;\n\n      const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n      const page = gridPageSelector(apiRef);\n      const pageSize = gridPageSizeSelector(apiRef);\n      const elementIndex = !props.pagination ? params.rowIndex : params.rowIndex - page * pageSize;\n      const targetOffsetHeight = rowsMeta.positions[elementIndex + 1] ? rowsMeta.positions[elementIndex + 1] - rowsMeta.positions[elementIndex] : rowsMeta.currentPageTotalHeight - rowsMeta.positions[elementIndex];\n      const topPinnedRowsHeight = ((_querySelector = virtualScrollerRef.current.querySelector(`.${gridClasses['pinnedRows--top']}`)) == null ? void 0 : _querySelector.clientHeight) || 0;\n      const bottomPinnedRowsHeight = ((_querySelector2 = virtualScrollerRef.current.querySelector(`.${gridClasses['pinnedRows--bottom']}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;\n      scrollCoordinates.top = scrollIntoView({\n        clientHeight: virtualScrollerRef.current.clientHeight - topPinnedRowsHeight - bottomPinnedRowsHeight,\n        scrollTop: virtualScrollerRef.current.scrollTop,\n        offsetHeight: targetOffsetHeight,\n        offsetTop: rowsMeta.positions[elementIndex]\n      });\n    }\n\n    scrollCoordinates = apiRef.current.unstable_applyPipeProcessors('scrollToIndexes', scrollCoordinates, params);\n\n    if (typeof scrollCoordinates.left !== undefined || typeof scrollCoordinates.top !== undefined) {\n      apiRef.current.scroll(scrollCoordinates);\n      return true;\n    }\n\n    return false;\n  }, [logger, apiRef, virtualScrollerRef, props.pagination, visibleSortedRows]);\n  const scroll = React.useCallback(params => {\n    if (virtualScrollerRef.current && params.left != null && colRef.current) {\n      const direction = theme.direction === 'rtl' ? -1 : 1;\n      colRef.current.scrollLeft = params.left;\n      virtualScrollerRef.current.scrollLeft = direction * params.left;\n      logger.debug(`Scrolling left: ${params.left}`);\n    }\n\n    if (virtualScrollerRef.current && params.top != null) {\n      virtualScrollerRef.current.scrollTop = params.top;\n      logger.debug(`Scrolling top: ${params.top}`);\n    }\n\n    logger.debug(`Scrolling, updating container, and viewport`);\n  }, [virtualScrollerRef, theme.direction, colRef, logger]);\n  const getScrollPosition = React.useCallback(() => {\n    if (!(virtualScrollerRef != null && virtualScrollerRef.current)) {\n      return {\n        top: 0,\n        left: 0\n      };\n    }\n\n    return {\n      top: virtualScrollerRef.current.scrollTop,\n      left: virtualScrollerRef.current.scrollLeft\n    };\n  }, [virtualScrollerRef]);\n  const scrollApi = {\n    scroll,\n    scrollToIndexes,\n    getScrollPosition\n  };\n  useGridApiMethod(apiRef, scrollApi, 'public');\n};","map":{"version":3,"names":["React","useTheme","useGridLogger","gridColumnPositionsSelector","gridVisibleColumnDefinitionsSelector","useGridSelector","gridPageSelector","gridPageSizeSelector","gridRowCountSelector","gridRowsMetaSelector","useGridApiMethod","gridExpandedSortedRowEntriesSelector","gridClasses","scrollIntoView","dimensions","clientHeight","scrollTop","offsetHeight","offsetTop","elementBottom","undefined","useGridScroll","apiRef","props","theme","logger","colRef","current","columnHeadersElementRef","virtualScrollerRef","visibleSortedRows","scrollToIndexes","useCallback","params","totalRowCount","visibleColumns","scrollToHeader","rowIndex","length","debug","colIndex","scrollCoordinates","columnPositions","cellWidth","_visibleSortedRows$pa","rowId","id","cellColSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","cellProps","width","computedWidth","left","clientWidth","Math","abs","scrollLeft","_querySelector","_querySelector2","rowsMeta","state","page","pageSize","elementIndex","pagination","targetOffsetHeight","positions","currentPageTotalHeight","topPinnedRowsHeight","querySelector","bottomPinnedRowsHeight","top","unstable_applyPipeProcessors","scroll","direction","getScrollPosition","scrollApi"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/scroll/useGridScroll.js"],"sourcesContent":["import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnPositionsSelector, gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridPageSelector, gridPageSizeSelector } from '../pagination/gridPaginationSelector';\nimport { gridRowCountSelector } from '../rows/gridRowsSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridExpandedSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { gridClasses } from '../../../constants/gridClasses';\n\n// Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js\n// Similar to https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\nfunction scrollIntoView(dimensions) {\n  const {\n    clientHeight,\n    scrollTop,\n    offsetHeight,\n    offsetTop\n  } = dimensions;\n  const elementBottom = offsetTop + offsetHeight;\n  // Always scroll to top when cell is higher than viewport to avoid scroll jump\n  // See https://github.com/mui/mui-x/issues/4513 and https://github.com/mui/mui-x/issues/4514\n  if (offsetHeight > clientHeight) {\n    return offsetTop;\n  }\n  if (elementBottom - clientHeight > scrollTop) {\n    return elementBottom - clientHeight;\n  }\n  if (offsetTop < scrollTop) {\n    return offsetTop;\n  }\n  return undefined;\n}\n\n/**\n * @requires useGridPagination (state) - can be after, async only\n * @requires useGridColumns (state) - can be after, async only\n * @requires useGridRows (state) - can be after, async only\n * @requires useGridRowsMeta (state) - can be after, async only\n * @requires useGridFilter (state)\n * @requires useGridColumnSpanning (method)\n */\nexport const useGridScroll = (apiRef, props) => {\n  const theme = useTheme();\n  const logger = useGridLogger(apiRef, 'useGridScroll');\n  const colRef = apiRef.current.columnHeadersElementRef;\n  const virtualScrollerRef = apiRef.current.virtualScrollerRef;\n  const visibleSortedRows = useGridSelector(apiRef, gridExpandedSortedRowEntriesSelector);\n  const scrollToIndexes = React.useCallback(params => {\n    const totalRowCount = gridRowCountSelector(apiRef);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const scrollToHeader = params.rowIndex == null;\n    if (!scrollToHeader && totalRowCount === 0 || visibleColumns.length === 0) {\n      return false;\n    }\n    logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);\n    let scrollCoordinates = {};\n    if (params.colIndex != null) {\n      const columnPositions = gridColumnPositionsSelector(apiRef);\n      let cellWidth;\n      if (typeof params.rowIndex !== 'undefined') {\n        var _visibleSortedRows$pa;\n        const rowId = (_visibleSortedRows$pa = visibleSortedRows[params.rowIndex]) == null ? void 0 : _visibleSortedRows$pa.id;\n        const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, params.colIndex);\n        if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n          cellWidth = cellColSpanInfo.cellProps.width;\n        }\n      }\n      if (typeof cellWidth === 'undefined') {\n        cellWidth = visibleColumns[params.colIndex].computedWidth;\n      }\n      // When using RTL, `scrollLeft` becomes negative, so we must ensure that we only compare values.\n      scrollCoordinates.left = scrollIntoView({\n        clientHeight: virtualScrollerRef.current.clientWidth,\n        scrollTop: Math.abs(virtualScrollerRef.current.scrollLeft),\n        offsetHeight: cellWidth,\n        offsetTop: columnPositions[params.colIndex]\n      });\n    }\n    if (params.rowIndex != null) {\n      var _querySelector, _querySelector2;\n      const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n      const page = gridPageSelector(apiRef);\n      const pageSize = gridPageSizeSelector(apiRef);\n      const elementIndex = !props.pagination ? params.rowIndex : params.rowIndex - page * pageSize;\n      const targetOffsetHeight = rowsMeta.positions[elementIndex + 1] ? rowsMeta.positions[elementIndex + 1] - rowsMeta.positions[elementIndex] : rowsMeta.currentPageTotalHeight - rowsMeta.positions[elementIndex];\n      const topPinnedRowsHeight = ((_querySelector = virtualScrollerRef.current.querySelector(`.${gridClasses['pinnedRows--top']}`)) == null ? void 0 : _querySelector.clientHeight) || 0;\n      const bottomPinnedRowsHeight = ((_querySelector2 = virtualScrollerRef.current.querySelector(`.${gridClasses['pinnedRows--bottom']}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;\n      scrollCoordinates.top = scrollIntoView({\n        clientHeight: virtualScrollerRef.current.clientHeight - topPinnedRowsHeight - bottomPinnedRowsHeight,\n        scrollTop: virtualScrollerRef.current.scrollTop,\n        offsetHeight: targetOffsetHeight,\n        offsetTop: rowsMeta.positions[elementIndex]\n      });\n    }\n    scrollCoordinates = apiRef.current.unstable_applyPipeProcessors('scrollToIndexes', scrollCoordinates, params);\n    if (typeof scrollCoordinates.left !== undefined || typeof scrollCoordinates.top !== undefined) {\n      apiRef.current.scroll(scrollCoordinates);\n      return true;\n    }\n    return false;\n  }, [logger, apiRef, virtualScrollerRef, props.pagination, visibleSortedRows]);\n  const scroll = React.useCallback(params => {\n    if (virtualScrollerRef.current && params.left != null && colRef.current) {\n      const direction = theme.direction === 'rtl' ? -1 : 1;\n      colRef.current.scrollLeft = params.left;\n      virtualScrollerRef.current.scrollLeft = direction * params.left;\n      logger.debug(`Scrolling left: ${params.left}`);\n    }\n    if (virtualScrollerRef.current && params.top != null) {\n      virtualScrollerRef.current.scrollTop = params.top;\n      logger.debug(`Scrolling top: ${params.top}`);\n    }\n    logger.debug(`Scrolling, updating container, and viewport`);\n  }, [virtualScrollerRef, theme.direction, colRef, logger]);\n  const getScrollPosition = React.useCallback(() => {\n    if (!(virtualScrollerRef != null && virtualScrollerRef.current)) {\n      return {\n        top: 0,\n        left: 0\n      };\n    }\n    return {\n      top: virtualScrollerRef.current.scrollTop,\n      left: virtualScrollerRef.current.scrollLeft\n    };\n  }, [virtualScrollerRef]);\n  const scrollApi = {\n    scroll,\n    scrollToIndexes,\n    getScrollPosition\n  };\n  useGridApiMethod(apiRef, scrollApi, 'public');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}