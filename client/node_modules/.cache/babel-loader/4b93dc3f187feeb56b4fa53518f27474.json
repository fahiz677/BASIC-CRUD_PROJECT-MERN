{"ast":null,"code":"import * as React from 'react';\nimport { gridPaginationRowRangeSelector, gridPaginatedVisibleSortedGridRowEntriesSelector } from '../features/pagination/gridPaginationSelector';\nimport { gridExpandedSortedRowEntriesSelector } from '../features/filter/gridFilterSelector';\nexport const getVisibleRows = (apiRef, props) => {\n  let rows;\n  let range;\n\n  if (props.pagination && props.paginationMode === 'client') {\n    range = gridPaginationRowRangeSelector(apiRef);\n    rows = gridPaginatedVisibleSortedGridRowEntriesSelector(apiRef);\n  } else {\n    rows = gridExpandedSortedRowEntriesSelector(apiRef);\n\n    if (rows.length === 0) {\n      range = null;\n    } else {\n      range = {\n        firstRowIndex: 0,\n        lastRowIndex: rows.length - 1\n      };\n    }\n  }\n\n  return {\n    rows,\n    range\n  };\n};\n/**\n * Computes the list of rows that are reachable by scroll.\n * Depending on whether pagination is enabled, it will return the rows in the current page.\n * - If the pagination is disabled or in server mode, it equals all the visible rows.\n * - If the row tree has several layers, it contains up to `state.pageSize` top level rows and all their descendants.\n * - If the row tree is flat, it only contains up to `state.pageSize` rows.\n */\n\nexport const useGridVisibleRows = (apiRef, props) => {\n  const response = getVisibleRows(apiRef, props);\n  return React.useMemo(() => ({\n    rows: response.rows,\n    range: response.range\n  }), [response.rows, response.range]);\n};","map":{"version":3,"names":["React","gridPaginationRowRangeSelector","gridPaginatedVisibleSortedGridRowEntriesSelector","gridExpandedSortedRowEntriesSelector","getVisibleRows","apiRef","props","rows","range","pagination","paginationMode","length","firstRowIndex","lastRowIndex","useGridVisibleRows","response","useMemo"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.js"],"sourcesContent":["import * as React from 'react';\nimport { gridPaginationRowRangeSelector, gridPaginatedVisibleSortedGridRowEntriesSelector } from '../features/pagination/gridPaginationSelector';\nimport { gridExpandedSortedRowEntriesSelector } from '../features/filter/gridFilterSelector';\nexport const getVisibleRows = (apiRef, props) => {\n  let rows;\n  let range;\n  if (props.pagination && props.paginationMode === 'client') {\n    range = gridPaginationRowRangeSelector(apiRef);\n    rows = gridPaginatedVisibleSortedGridRowEntriesSelector(apiRef);\n  } else {\n    rows = gridExpandedSortedRowEntriesSelector(apiRef);\n    if (rows.length === 0) {\n      range = null;\n    } else {\n      range = {\n        firstRowIndex: 0,\n        lastRowIndex: rows.length - 1\n      };\n    }\n  }\n  return {\n    rows,\n    range\n  };\n};\n\n/**\n * Computes the list of rows that are reachable by scroll.\n * Depending on whether pagination is enabled, it will return the rows in the current page.\n * - If the pagination is disabled or in server mode, it equals all the visible rows.\n * - If the row tree has several layers, it contains up to `state.pageSize` top level rows and all their descendants.\n * - If the row tree is flat, it only contains up to `state.pageSize` rows.\n */\nexport const useGridVisibleRows = (apiRef, props) => {\n  const response = getVisibleRows(apiRef, props);\n  return React.useMemo(() => ({\n    rows: response.rows,\n    range: response.range\n  }), [response.rows, response.range]);\n};"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,8BAAT,EAAyCC,gDAAzC,QAAiG,+CAAjG;AACA,SAASC,oCAAT,QAAqD,uCAArD;AACA,OAAO,MAAMC,cAAc,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;EAC/C,IAAIC,IAAJ;EACA,IAAIC,KAAJ;;EACA,IAAIF,KAAK,CAACG,UAAN,IAAoBH,KAAK,CAACI,cAAN,KAAyB,QAAjD,EAA2D;IACzDF,KAAK,GAAGP,8BAA8B,CAACI,MAAD,CAAtC;IACAE,IAAI,GAAGL,gDAAgD,CAACG,MAAD,CAAvD;EACD,CAHD,MAGO;IACLE,IAAI,GAAGJ,oCAAoC,CAACE,MAAD,CAA3C;;IACA,IAAIE,IAAI,CAACI,MAAL,KAAgB,CAApB,EAAuB;MACrBH,KAAK,GAAG,IAAR;IACD,CAFD,MAEO;MACLA,KAAK,GAAG;QACNI,aAAa,EAAE,CADT;QAENC,YAAY,EAAEN,IAAI,CAACI,MAAL,GAAc;MAFtB,CAAR;IAID;EACF;;EACD,OAAO;IACLJ,IADK;IAELC;EAFK,CAAP;AAID,CArBM;AAuBP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,kBAAkB,GAAG,CAACT,MAAD,EAASC,KAAT,KAAmB;EACnD,MAAMS,QAAQ,GAAGX,cAAc,CAACC,MAAD,EAASC,KAAT,CAA/B;EACA,OAAON,KAAK,CAACgB,OAAN,CAAc,OAAO;IAC1BT,IAAI,EAAEQ,QAAQ,CAACR,IADW;IAE1BC,KAAK,EAAEO,QAAQ,CAACP;EAFU,CAAP,CAAd,EAGH,CAACO,QAAQ,CAACR,IAAV,EAAgBQ,QAAQ,CAACP,KAAzB,CAHG,CAAP;AAID,CANM"},"metadata":{},"sourceType":"module"}