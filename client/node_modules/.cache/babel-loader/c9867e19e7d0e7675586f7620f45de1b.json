{"ast":null,"code":"import { createSelector } from '../../../utils/createSelector';\nimport { gridFilteredTopLevelRowCountSelector, gridExpandedSortedRowEntriesSelector, gridExpandedSortedRowIdsSelector, gridFilteredSortedTopLevelRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\nimport { getPageCount } from './gridPaginationUtils';\n/**\n * @category Pagination\n * @ignore - do not document.\n */\n\nexport const gridPaginationSelector = state => state.pagination;\n/**\n * Get the pagination model\n * @category Pagination\n */\n\nexport const gridPaginationModelSelector = createSelector(gridPaginationSelector, pagination => pagination.paginationModel);\n/**\n * Get the index of the page to render if the pagination is enabled\n * @category Pagination\n */\n\nexport const gridPageSelector = createSelector(gridPaginationModelSelector, paginationModel => paginationModel.page);\n/**\n * Get the maximum amount of rows to display on a single page if the pagination is enabled\n * @category Pagination\n */\n\nexport const gridPageSizeSelector = createSelector(gridPaginationModelSelector, paginationModel => paginationModel.pageSize);\n/**\n * Get the amount of pages needed to display all the rows if the pagination is enabled\n * @category Pagination\n */\n\nexport const gridPageCountSelector = createSelector(gridPaginationModelSelector, gridFilteredTopLevelRowCountSelector, (paginationModel, visibleTopLevelRowCount) => getPageCount(visibleTopLevelRowCount, paginationModel.pageSize));\n/**\n * Get the index of the first and the last row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport const gridPaginationRowRangeSelector = createSelector(gridPaginationModelSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, gridExpandedSortedRowEntriesSelector, gridFilteredSortedTopLevelRowEntriesSelector, (paginationModel, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {\n  const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;\n  const topLevelFirstRowIndex = Math.min(paginationModel.pageSize * paginationModel.page, visibleTopLevelRowCount - 1);\n  const topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + paginationModel.pageSize - 1, visibleTopLevelRowCount - 1); // The range contains no element\n\n  if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {\n    return null;\n  } // The tree is flat, there is no need to look for children\n\n\n  if (rowTreeDepth < 2) {\n    return {\n      firstRowIndex: topLevelFirstRowIndex,\n      lastRowIndex: topLevelLastRowIndex\n    };\n  }\n\n  const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];\n  const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;\n  const firstRowIndex = visibleSortedRowEntries.findIndex(row => row.id === topLevelFirstRow.id);\n  let lastRowIndex = firstRowIndex;\n  let topLevelRowAdded = 0;\n\n  while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {\n    const row = visibleSortedRowEntries[lastRowIndex];\n    const depth = rowTree[row.id].depth;\n\n    if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {\n      lastRowIndex += 1;\n    }\n\n    if (depth === 0) {\n      topLevelRowAdded += 1;\n    }\n  }\n\n  return {\n    firstRowIndex,\n    lastRowIndex: lastRowIndex - 1\n  };\n});\n/**\n * Get the id and the model of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport const gridPaginatedVisibleSortedGridRowEntriesSelector = createSelector(gridExpandedSortedRowEntriesSelector, gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n\n  return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});\n/**\n * Get the id of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport const gridPaginatedVisibleSortedGridRowIdsSelector = createSelector(gridExpandedSortedRowIdsSelector, gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n\n  return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});","map":{"version":3,"names":["createSelector","gridFilteredTopLevelRowCountSelector","gridExpandedSortedRowEntriesSelector","gridExpandedSortedRowIdsSelector","gridFilteredSortedTopLevelRowEntriesSelector","gridRowMaximumTreeDepthSelector","gridRowTreeSelector","getPageCount","gridPaginationSelector","state","pagination","gridPaginationModelSelector","paginationModel","gridPageSelector","page","gridPageSizeSelector","pageSize","gridPageCountSelector","visibleTopLevelRowCount","gridPaginationRowRangeSelector","rowTree","rowTreeDepth","visibleSortedRowEntries","visibleSortedTopLevelRowEntries","length","topLevelFirstRowIndex","Math","min","topLevelLastRowIndex","firstRowIndex","lastRowIndex","topLevelFirstRow","topLevelRowsInCurrentPageCount","findIndex","row","id","topLevelRowAdded","depth","gridPaginatedVisibleSortedGridRowEntriesSelector","paginationRange","slice","gridPaginatedVisibleSortedGridRowIdsSelector","visibleSortedRowIds"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js"],"sourcesContent":["import { createSelector } from '../../../utils/createSelector';\nimport { gridFilteredTopLevelRowCountSelector, gridExpandedSortedRowEntriesSelector, gridExpandedSortedRowIdsSelector, gridFilteredSortedTopLevelRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\nimport { getPageCount } from './gridPaginationUtils';\n\n/**\n * @category Pagination\n * @ignore - do not document.\n */\nexport const gridPaginationSelector = state => state.pagination;\n\n/**\n * Get the pagination model\n * @category Pagination\n */\nexport const gridPaginationModelSelector = createSelector(gridPaginationSelector, pagination => pagination.paginationModel);\n\n/**\n * Get the index of the page to render if the pagination is enabled\n * @category Pagination\n */\nexport const gridPageSelector = createSelector(gridPaginationModelSelector, paginationModel => paginationModel.page);\n\n/**\n * Get the maximum amount of rows to display on a single page if the pagination is enabled\n * @category Pagination\n */\nexport const gridPageSizeSelector = createSelector(gridPaginationModelSelector, paginationModel => paginationModel.pageSize);\n\n/**\n * Get the amount of pages needed to display all the rows if the pagination is enabled\n * @category Pagination\n */\nexport const gridPageCountSelector = createSelector(gridPaginationModelSelector, gridFilteredTopLevelRowCountSelector, (paginationModel, visibleTopLevelRowCount) => getPageCount(visibleTopLevelRowCount, paginationModel.pageSize));\n\n/**\n * Get the index of the first and the last row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport const gridPaginationRowRangeSelector = createSelector(gridPaginationModelSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, gridExpandedSortedRowEntriesSelector, gridFilteredSortedTopLevelRowEntriesSelector, (paginationModel, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {\n  const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;\n  const topLevelFirstRowIndex = Math.min(paginationModel.pageSize * paginationModel.page, visibleTopLevelRowCount - 1);\n  const topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + paginationModel.pageSize - 1, visibleTopLevelRowCount - 1);\n\n  // The range contains no element\n  if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {\n    return null;\n  }\n\n  // The tree is flat, there is no need to look for children\n  if (rowTreeDepth < 2) {\n    return {\n      firstRowIndex: topLevelFirstRowIndex,\n      lastRowIndex: topLevelLastRowIndex\n    };\n  }\n  const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];\n  const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;\n  const firstRowIndex = visibleSortedRowEntries.findIndex(row => row.id === topLevelFirstRow.id);\n  let lastRowIndex = firstRowIndex;\n  let topLevelRowAdded = 0;\n  while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {\n    const row = visibleSortedRowEntries[lastRowIndex];\n    const depth = rowTree[row.id].depth;\n    if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {\n      lastRowIndex += 1;\n    }\n    if (depth === 0) {\n      topLevelRowAdded += 1;\n    }\n  }\n  return {\n    firstRowIndex,\n    lastRowIndex: lastRowIndex - 1\n  };\n});\n\n/**\n * Get the id and the model of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport const gridPaginatedVisibleSortedGridRowEntriesSelector = createSelector(gridExpandedSortedRowEntriesSelector, gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n  return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});\n\n/**\n * Get the id of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport const gridPaginatedVisibleSortedGridRowIdsSelector = createSelector(gridExpandedSortedRowIdsSelector, gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n  return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}