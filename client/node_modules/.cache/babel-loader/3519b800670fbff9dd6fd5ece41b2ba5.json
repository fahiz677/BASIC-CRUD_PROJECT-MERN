{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n      _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange\n  } = props;\n\n  const runIfEditModeIsCell = callback => function () {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...arguments);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (event.key === ' ') {\n        return; // Space scrolls to the last row\n      }\n\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason,\n          key: event.key\n        });\n\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n\n    if (reason === GridCellEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('17')) {\n        // In React 17, cleaning the input is enough.\n        // The sequence of events makes the key pressed by the end-users update the textbox directly.\n        startCellEditModeParams.deleteValue = true;\n      } else {\n        startCellEditModeParams.initialValue = key;\n      }\n    } else if (reason === GridCellEditStartReasons.deleteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {});\n    }\n\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = _extends({}, cellModesModelRef.current);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n            otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n\n\n      newModel[id] = otherFields;\n\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = useEventCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue,\n      initialValue\n    } = params;\n    let newValue = apiRef.current.getCellValue(id, field);\n\n    if (deleteValue || initialValue) {\n      newValue = deleteValue ? '' : initialValue;\n    }\n\n    const newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  });\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit; // Revert the mode in the cellModesModel prop back to \"edit\"\n\n      updateFieldInCellModesModel(id, field, {\n        mode: GridCellModes.Edit\n      });\n      return;\n    }\n\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit; // Revert the mode in the cellModesModel prop back to \"edit\"\n\n        updateFieldInCellModesModel(id, field, {\n          mode: GridCellModes.Edit\n        });\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  });\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    var _editingState$id, _editingState$id$fiel;\n\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    } // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n\n\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    }); // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !((_editingState$id = editingState[id]) != null && (_editingState$id$fiel = _editingState$id[field]) != null && _editingState$id$fiel.error);\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n\n    const {\n      value\n    } = editingState[id][field];\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode\n  };\n  const editingPrivateApi = {\n    setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopCellEditMode may change it later\n\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = deepClone(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(_ref => {\n      let [id, fields] = _ref;\n      Object.entries(fields).forEach(_ref2 => {\n        let [field, params] = _ref2;\n\n        var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;\n\n        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;\n        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_toPropertyKey","_extends","_excluded","_excluded2","React","unstable_useEventCallback","useEventCallback","useGridApiEventHandler","useGridApiOptionHandler","GridEditModes","GridCellModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","buildWarning","gridRowsDataRowIdToIdLookupSelector","deepClone","GridCellEditStartReasons","GridCellEditStopReasons","missingOnProcessRowUpdateErrorWarning","useGridCellEditing","apiRef","props","cellModesModel","setCellModesModel","useState","cellModesModelRef","useRef","prevCellModesModel","processRowUpdate","onProcessRowUpdateError","cellModesModelProp","onCellModesModelChange","runIfEditModeIsCell","callback","editMode","Cell","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getCellMode","handleCellDoubleClick","event","isEditable","cellMode","Edit","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusOut","View","cellFocusOut","handleCellKeyDown","which","key","escapeKeyDown","enterKeyDown","shiftKey","shiftTabKeyDown","tabKeyDown","preventDefault","printableKeyDown","ctrlKey","metaKey","deleteKeyDown","handleCellEditStart","startCellEditModeParams","version","startsWith","deleteValue","initialValue","startCellEditMode","handleCellEditStop","runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","stopCellEditMode","onCellEditStart","onCellEditStop","editingState","state","isEditing","updateCellModesModel","newModel","isNewModelDifferentFromProp","updateFieldInCellModesModel","newProps","_newModel$id","otherFields","map","Object","keys","length","updateOrDeleteFieldState","setState","newEditingState","editRows","forceUpdate","other","updateStateToStartCellEditMode","newValue","getCellValue","value","error","isProcessingProps","setCellFocus","updateStateToStopCellEditMode","finishCellEditMode","moveFocusToRelativeCell","rowUpdate","getRowWithUpdatedValuesFromCellEditing","handleError","errorThrown","row","getRow","Promise","resolve","then","finalRowUpdate","updateRows","catch","setCellEditingEditCellValue","_editingState$id","_editingState$id$fiel","debounceMs","unstable_skipValueParser","skipValueParser","column","getColumn","parsedValue","valueParser","changeReason","preProcessEditCellProps","hasChanged","valueSetter","editingApi","editingPrivateApi","useEffect","idToIdLookup","copyOfPrevCellModes","entries","forEach","fields","_copyOfPrevCellModes$","_copyOfPrevCellModes$2","_idToIdLookup$id","prevMode","originalId"],"sources":["/home/fahiz/Brocamp Works/BASIC-CRUD_PROJECT-MERN/client/node_modules/@mui/x-data-grid/hooks/features/editing/useGridCellEditing.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n  _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange\n  } = props;\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      if (event.key === ' ') {\n        return; // Space scrolls to the last row\n      }\n\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason,\n          key: event.key\n        });\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n    if (reason === GridCellEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('17')) {\n        // In React 17, cleaning the input is enough.\n        // The sequence of events makes the key pressed by the end-users update the textbox directly.\n        startCellEditModeParams.deleteValue = true;\n      } else {\n        startCellEditModeParams.initialValue = key;\n      }\n    } else if (reason === GridCellEditStartReasons.deleteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {});\n    }\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = _extends({}, cellModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n        otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n      newModel[id] = otherFields;\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = useEventCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue,\n      initialValue\n    } = params;\n    let newValue = apiRef.current.getCellValue(id, field);\n    if (deleteValue || initialValue) {\n      newValue = deleteValue ? '' : initialValue;\n    }\n    const newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  });\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      // Revert the mode in the cellModesModel prop back to \"edit\"\n      updateFieldInCellModesModel(id, field, {\n        mode: GridCellModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: GridCellModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  });\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    var _editingState$id, _editingState$id$fiel;\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    }\n\n    // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    });\n    // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !((_editingState$id = editingState[id]) != null && (_editingState$id$fiel = _editingState$id[field]) != null && _editingState$id$fiel.error);\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n    const {\n      value\n    } = editingState[id][field];\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode\n  };\n  const editingPrivateApi = {\n    setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopCellEditMode may change it later\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = deepClone(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(([id, fields]) => {\n      Object.entries(fields).forEach(([field, params]) => {\n        var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;\n        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;\n        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}